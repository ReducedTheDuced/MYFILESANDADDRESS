Shader "Hidden/TonemappingColorGrading" {
Properties {
 _MainTex ("Texture", 2D) = "white" { }
 _LutTex ("Texture", 2D) = "white" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 37567
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _ChannelMixerBlue;
					//   float3 _ChannelMixerGreen;
					//   float3 _ChannelMixerRed;
					//   float3 _ContrastGainGamma;
					//   sampler2D _CurveTex;
					//   float3 _Gain;
					//   float3 _Gamma;
					//   float3 _HSV;
					//   float3 _Lift;
					//   sampler2D _MainTex;
					//   float4 _UserLutParams;
					//   sampler2D _UserLutTex;
					//   float _Vibrance;
					//   float3 _WhiteBalance;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _UserLutParams            c1       1
					//   _WhiteBalance             c2       1
					//   _Lift                     c3       1
					//   _Gamma                    c4       1
					//   _Gain                     c5       1
					//   _ContrastGainGamma        c6       1
					//   _Vibrance                 c7       1
					//   _HSV                      c8       1
					//   _ChannelMixerRed          c9       1
					//   _ChannelMixerGreen        c10      1
					//   _ChannelMixerBlue         c11      1
					//   _MainTex                  s0       1
					//   _UserLutTex               s1       1
					//   _CurveTex                 s2       1
					//
					
					    ps_3_0
					    def c12, 6, 9.99999975e-005, -3, 0
					    def c13, 1, 0.666666687, 0.333333343, 0
					    def c14, 1, 0, -1, 0.666666687
					    def c15, 0.5, 1, 0, -0.333333343
					    def c16, 0.390404999, 0.549941003, 0.00892631989, 9.99999975e-005
					    def c17, 0.070841603, 0.963172019, 0.00135775004, 0
					    def c18, 0.0231081992, 0.128021002, 0.936245024, 0
					    def c19, 2.85846996, -1.62879002, -0.0248910002, 0
					    def c20, -0.210181996, 1.15820003, 0.000324280991, 0
					    def c21, -0.0418119989, -0.118169002, 1.06867003, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r1.xyz, r0.zxyw, c1.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mov r2.xyz, c15
					    mul_pp r1.xw, r2.x, c1.xyzy
					    mad_pp r1.yz, r1, c1.xxyw, r1.xxww
					    mad_pp r1.x, r0.w, c1.y, r1.y
					    mad r0.w, r0.z, c1.z, -r0.w
					    mad_pp r1.yw, c1.y, r2.xyzz, r1.xxzz
					    texld r3, r1.xzzw, s1
					    texld r1, r1.ywzw, s1
					    lrp_pp r4.xyz, r0.w, r1, r3
					    lrp_pp r1.xyz, c1.w, r4, r0
					    dp3_pp r0.x, c16, r1
					    dp3_pp r0.y, c17, r1
					    dp3_pp r0.z, c18, r1
					    mul_pp r0.xyz, r0, c2
					    dp3_pp r1.x, c19, r0
					    dp3_pp r1.y, c20, r0
					    dp3_pp r1.z, c21, r0
					    add_pp r0.xyz, -r1, c15.y
					    log_pp r3.x, r1.x
					    log_pp r3.y, r1.y
					    log_pp r3.z, r1.z
					    mul_pp r1.xyz, r3, c4
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r0.xyz, c3, r0, r3
					    mul_pp r0.xyz, r0, c5
					    max_pp r1.xyz, r0, c15.z
					    add r0.x, -r1.z, r1.y
					    mad_pp r3, r1.yzyy, c15.yyzz, c15.zzzw
					    mad_pp r4, r3.yxyy, c14.xxyy, c14.yyzw
					    cmp_pp r0, r0.x, r3.xywz, r4.xywz
					    add r2.w, -r0.x, r1.x
					    mov_pp r1.yzw, r0.xywx
					    mov_pp r0.xyw, r1.wyzx
					    cmp_pp r0, r2.w, r1.yxzw, r0.yxzw
					    min_pp r1.x, r0.x, r0.w
					    add_pp r1.x, r0.y, -r1.x
					    mad_pp r1.y, r1.x, c12.x, c12.y
					    rcp r1.y, r1.y
					    add r0.w, -r0.x, r0.w
					    mad_pp r0.z, r0.w, r1.y, r0.z
					    add_pp r0.z, r0_abs.z, c8.x
					    frc_pp r0.w, r0.z
					    add_pp r0.w, -r0.w, r0.z
					    add_pp r0.z, -r0.w, r0.z
					    add_pp r1.yzw, r0.z, c13.xxyz
					    frc_pp r1.yzw, r1
					    mad_pp r1.yzw, r1, c12.x, c12.z
					    add_sat_pp r1.yzw, r1_abs, -c15.y
					    add_pp r0.z, r0.y, c16.w
					    rcp r0.z, r0.z
					    mul_pp r0.x, r0.z, r1.x
					    mul_pp r0.xy, r0, c8.yzzw
					    lrp_pp r3.xyz, r0.x, r1.yzww, c15.y
					    mul_sat_pp r0.xyz, r0.y, r3
					    add r0.w, -r0.z, r0.y
					    cmp_pp r1.xy, r0.w, r0.yzzw, r0.zyzw
					    max_pp r2.w, r0.x, r1.x
					    min_pp r3.x, r1.y, r0.x
					    add_pp r0.w, r2.w, -r3.x
					    cmp_pp r1.x, -c7.x, r2.z, r2.y
					    cmp_pp r1.y, c7.x, -r2.z, -r2.y
					    add r1.x, r1.y, r1.x
					    mad r0.w, r1.x, -r0.w, c15.y
					    mad r0.w, c7.x, r0.w, r2.y
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    lrp_pp r2.yzw, r0.w, r0.xxyz, r1.x
					    add_pp r0.xyz, r2.yzww, -c15.x
					    mad_sat_pp r0.xyz, r0, c6.x, r2.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r1.xyz, r1, c6.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    exp_pp r0.w, c6.y
					    mul_pp r0.w, r0.w, c15.x
					    mul_pp r1.xyz, r0.w, r2
					    add r2.xyz, r0, -c15.x
					    add_pp r0.xyz, -r0, c15.y
					    log_pp r3.x, r0.x
					    log_pp r3.y, r0.y
					    log_pp r3.z, r0.z
					    mul_pp r0.xyz, r3, c6.y
					    exp_pp r3.x, r0.x
					    exp_pp r3.y, r0.y
					    exp_pp r3.z, r0.z
					    mad_pp r0.xyz, r3, -r0.w, c15.y
					    cmp_pp r0.xyz, r2, r0, r1
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c6.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    dp3_pp r0.x, r1, c9
					    mov_pp r0.yw, c15.x
					    texld_pp r2, r0, s2
					    mad_pp r0.xy, r2.w, c15.yzzw, c15.zxzw
					    texld_pp r2, r0, s2
					    mad_pp oC0.xw, r2.x, c15.yyzz, c15.zyzy
					    dp3_pp r0.z, r1, c10
					    dp3_pp r0.x, r1, c11
					    texld_pp r1, r0.zwzw, s2
					    mad_pp r0.zw, r1.w, c15.xyyz, c15.xyzx
					    texld_pp r1, r0.zwzw, s2
					    mov_pp oC0.y, r1.y
					    mov_pp r0.y, c15.x
					    texld_pp r0, r0, s2
					    mad_pp r0.xy, r0.w, c15.yzzw, c15.zxzw
					    texld_pp r0, r0, s2
					    mov_pp oC0.z, r0.z
					
					// approximately 126 instruction slots used (9 texture, 117 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[9];
						vec4 _UserLutParams;
						vec3 _WhiteBalance;
						vec3 _Lift;
						vec3 _Gamma;
						vec3 _Gain;
						vec3 _ContrastGainGamma;
						float _Vibrance;
						vec3 _HSV;
						vec3 _ChannelMixerRed;
						vec3 _ChannelMixerGreen;
						vec3 _ChannelMixerBlue;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _UserLutTex;
					uniform  sampler2D _CurveTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.x = _UserLutParams.y;
					    u_xlat0.y = float(0.0);
					    u_xlat10.y = float(0.5);
					    u_xlat1.xy = _UserLutParams.xy * vec2(0.5, 0.5);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.zxy * _UserLutParams.zzz;
					    u_xlat1.yz = u_xlat3.yz * _UserLutParams.xy + u_xlat1.xy;
					    u_xlat16 = floor(u_xlat3.x);
					    u_xlat1.x = u_xlat16 * _UserLutParams.y + u_xlat1.y;
					    u_xlat6 = u_xlat2.z * _UserLutParams.z + (-u_xlat16);
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xz;
					    u_xlat3 = texture(_UserLutTex, u_xlat1.xz);
					    u_xlat4 = texture(_UserLutTex, u_xlat0.xy);
					    u_xlat1.xzw = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xzw + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _UserLutParams.www * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = dot(vec3(0.390404999, 0.549941003, 0.00892631989), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(0.070841603, 0.963172019, 0.00135775004), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0231081992, 0.128021002, 0.936245024), u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xyz * _WhiteBalance.xyz;
					    u_xlat2.x = dot(vec3(2.85846996, -1.62879002, -0.0248910002), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-0.210181996, 1.15820003, 0.000324280991), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(-0.0418119989, -0.118169002, 1.06867003), u_xlat1.xyz);
					    u_xlat1.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * _Gamma.xyz;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = _Lift.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Gain.xyz;
					    u_xlat1.xyw = max(u_xlat1.yzx, vec3(0.0, 0.0, 0.0));
					    u_xlatb0 = u_xlat1.x>=u_xlat1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xy = u_xlat1.yx;
					    u_xlat3.xy = u_xlat1.xy + (-u_xlat2.xy);
					    u_xlat2.z = float(-1.0);
					    u_xlat2.w = float(0.666666687);
					    u_xlat3.z = float(1.0);
					    u_xlat3.w = float(-1.0);
					    u_xlat2 = u_xlat0.xxxx * u_xlat3 + u_xlat2;
					    u_xlatb0 = u_xlat1.w>=u_xlat2.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = u_xlat2.xyw;
					    u_xlat2.xyw = u_xlat1.wyx;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat1 = u_xlat0.xxxx * u_xlat2.yxzw + u_xlat1.yxzw;
					    u_xlat0.x = min(u_xlat1.x, u_xlat1.w);
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.y;
					    u_xlat5 = u_xlat0.x * 6.0 + 9.99999975e-05;
					    u_xlat16 = (-u_xlat1.x) + u_xlat1.w;
					    u_xlat5 = u_xlat16 / u_xlat5;
					    u_xlat5 = u_xlat5 + u_xlat1.z;
					    u_xlat5 = abs(u_xlat5) + _HSV.x;
					    u_xlat11 = floor(u_xlat5);
					    u_xlat5 = u_xlat5 + (-u_xlat11);
					    u_xlat2.xyz = vec3(u_xlat5) + vec3(1.0, 0.666666687, 0.333333343);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
					    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat5 = u_xlat1.y + 9.99999975e-05;
					    u_xlat1.x = u_xlat0.x / u_xlat5;
					    u_xlat0.xy = u_xlat1.xy * _HSV.yz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat1.z, u_xlat1.y);
					    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5 = min(u_xlat1.z, u_xlat1.y);
					    u_xlat5 = min(u_xlat5, u_xlat1.x);
					    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
					    u_xlati5 = int((0.0<_Vibrance) ? 0xFFFFFFFFu : uint(0));
					    u_xlati16 = int((_Vibrance<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati5 = (-u_xlati5) + u_xlati16;
					    u_xlat5 = float(u_xlati5);
					    u_xlat0.x = (-u_xlat5) * u_xlat0.x + 1.0;
					    u_xlat0.x = _Vibrance * u_xlat0.x + 1.0;
					    u_xlat2.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat2.xz = u_xlat2.yz + u_xlat2.xx;
					    u_xlat5 = u_xlat2.z * u_xlat2.y;
					    u_xlat16 = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat2.x;
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat5));
					    u_xlat5 = u_xlat5 + u_xlat16;
					    u_xlat1.xyz = (-vec3(u_xlat5)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat5);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = u_xlat1.xyz * _ContrastGainGamma.xxx + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlatb2.xyz = lessThan(u_xlat1.xyzx, vec4(0.5, 0.5, 0.5, 0.0)).xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _ContrastGainGamma.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _ContrastGainGamma.yyy;
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat0.x = exp2(_ContrastGainGamma.y);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat0.xxx + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.y;
					        hlslcc_movcTemp.z = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _ContrastGainGamma.zzz;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat10.x = dot(u_xlat1.xyz, _ChannelMixerRed.xyz);
					    u_xlat0 = texture(_CurveTex, u_xlat10.xy).wxyz;
					    u_xlat0.y = float(0.5);
					    u_xlat10.y = float(0.5);
					    u_xlat2 = texture(_CurveTex, u_xlat0.xy);
					    SV_Target0.x = u_xlat2.x;
					    u_xlat12.x = dot(u_xlat1.xyz, _ChannelMixerBlue.xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, _ChannelMixerGreen.xyz);
					    u_xlat2.y = float(0.5);
					    u_xlat12.y = float(0.5);
					    u_xlat1 = texture(_CurveTex, u_xlat12.xy).wxyz;
					    u_xlat2 = texture(_CurveTex, u_xlat2.xy);
					    u_xlat10.x = u_xlat2.w;
					    u_xlat0 = texture(_CurveTex, u_xlat10.xy);
					    SV_Target0.y = u_xlat0.y;
					    u_xlat1.y = 0.5;
					    u_xlat0 = texture(_CurveTex, u_xlat1.xy);
					    SV_Target0.z = u_xlat0.z;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[9];
						vec4 _UserLutParams;
						vec3 _WhiteBalance;
						vec3 _Lift;
						vec3 _Gamma;
						vec3 _Gain;
						vec3 _ContrastGainGamma;
						float _Vibrance;
						vec3 _HSV;
						vec3 _ChannelMixerRed;
						vec3 _ChannelMixerGreen;
						vec3 _ChannelMixerBlue;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _UserLutTex;
					uniform  sampler2D _CurveTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.x = _UserLutParams.y;
					    u_xlat0.y = float(0.0);
					    u_xlat10.y = float(0.5);
					    u_xlat1.xy = _UserLutParams.xy * vec2(0.5, 0.5);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.zxy * _UserLutParams.zzz;
					    u_xlat1.yz = u_xlat3.yz * _UserLutParams.xy + u_xlat1.xy;
					    u_xlat16 = floor(u_xlat3.x);
					    u_xlat1.x = u_xlat16 * _UserLutParams.y + u_xlat1.y;
					    u_xlat6 = u_xlat2.z * _UserLutParams.z + (-u_xlat16);
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xz;
					    u_xlat3 = texture(_UserLutTex, u_xlat1.xz);
					    u_xlat4 = texture(_UserLutTex, u_xlat0.xy);
					    u_xlat1.xzw = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xzw + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _UserLutParams.www * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = dot(vec3(0.390404999, 0.549941003, 0.00892631989), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(0.070841603, 0.963172019, 0.00135775004), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0231081992, 0.128021002, 0.936245024), u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xyz * _WhiteBalance.xyz;
					    u_xlat2.x = dot(vec3(2.85846996, -1.62879002, -0.0248910002), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-0.210181996, 1.15820003, 0.000324280991), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(-0.0418119989, -0.118169002, 1.06867003), u_xlat1.xyz);
					    u_xlat1.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * _Gamma.xyz;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = _Lift.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Gain.xyz;
					    u_xlat1.xyw = max(u_xlat1.yzx, vec3(0.0, 0.0, 0.0));
					    u_xlatb0 = u_xlat1.x>=u_xlat1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xy = u_xlat1.yx;
					    u_xlat3.xy = u_xlat1.xy + (-u_xlat2.xy);
					    u_xlat2.z = float(-1.0);
					    u_xlat2.w = float(0.666666687);
					    u_xlat3.z = float(1.0);
					    u_xlat3.w = float(-1.0);
					    u_xlat2 = u_xlat0.xxxx * u_xlat3 + u_xlat2;
					    u_xlatb0 = u_xlat1.w>=u_xlat2.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = u_xlat2.xyw;
					    u_xlat2.xyw = u_xlat1.wyx;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat1 = u_xlat0.xxxx * u_xlat2.yxzw + u_xlat1.yxzw;
					    u_xlat0.x = min(u_xlat1.x, u_xlat1.w);
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.y;
					    u_xlat5 = u_xlat0.x * 6.0 + 9.99999975e-05;
					    u_xlat16 = (-u_xlat1.x) + u_xlat1.w;
					    u_xlat5 = u_xlat16 / u_xlat5;
					    u_xlat5 = u_xlat5 + u_xlat1.z;
					    u_xlat5 = abs(u_xlat5) + _HSV.x;
					    u_xlat11 = floor(u_xlat5);
					    u_xlat5 = u_xlat5 + (-u_xlat11);
					    u_xlat2.xyz = vec3(u_xlat5) + vec3(1.0, 0.666666687, 0.333333343);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
					    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat5 = u_xlat1.y + 9.99999975e-05;
					    u_xlat1.x = u_xlat0.x / u_xlat5;
					    u_xlat0.xy = u_xlat1.xy * _HSV.yz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat1.z, u_xlat1.y);
					    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5 = min(u_xlat1.z, u_xlat1.y);
					    u_xlat5 = min(u_xlat5, u_xlat1.x);
					    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
					    u_xlati5 = int((0.0<_Vibrance) ? 0xFFFFFFFFu : uint(0));
					    u_xlati16 = int((_Vibrance<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati5 = (-u_xlati5) + u_xlati16;
					    u_xlat5 = float(u_xlati5);
					    u_xlat0.x = (-u_xlat5) * u_xlat0.x + 1.0;
					    u_xlat0.x = _Vibrance * u_xlat0.x + 1.0;
					    u_xlat2.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat2.xz = u_xlat2.yz + u_xlat2.xx;
					    u_xlat5 = u_xlat2.z * u_xlat2.y;
					    u_xlat16 = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat2.x;
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat5));
					    u_xlat5 = u_xlat5 + u_xlat16;
					    u_xlat1.xyz = (-vec3(u_xlat5)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat5);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = u_xlat1.xyz * _ContrastGainGamma.xxx + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlatb2.xyz = lessThan(u_xlat1.xyzx, vec4(0.5, 0.5, 0.5, 0.0)).xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _ContrastGainGamma.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _ContrastGainGamma.yyy;
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat0.x = exp2(_ContrastGainGamma.y);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat0.xxx + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.y;
					        hlslcc_movcTemp.z = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _ContrastGainGamma.zzz;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat10.x = dot(u_xlat1.xyz, _ChannelMixerRed.xyz);
					    u_xlat0 = texture(_CurveTex, u_xlat10.xy).wxyz;
					    u_xlat0.y = float(0.5);
					    u_xlat10.y = float(0.5);
					    u_xlat2 = texture(_CurveTex, u_xlat0.xy);
					    SV_Target0.x = u_xlat2.x;
					    u_xlat12.x = dot(u_xlat1.xyz, _ChannelMixerBlue.xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, _ChannelMixerGreen.xyz);
					    u_xlat2.y = float(0.5);
					    u_xlat12.y = float(0.5);
					    u_xlat1 = texture(_CurveTex, u_xlat12.xy).wxyz;
					    u_xlat2 = texture(_CurveTex, u_xlat2.xy);
					    u_xlat10.x = u_xlat2.w;
					    u_xlat0 = texture(_CurveTex, u_xlat10.xy);
					    SV_Target0.y = u_xlat0.y;
					    u_xlat1.y = 0.5;
					    u_xlat0 = texture(_CurveTex, u_xlat1.xy);
					    SV_Target0.z = u_xlat0.z;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 102563
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c2, -1, 1, 0, 0
					    def c3, -0.00100000005, 0.693147182, -6.9077549, 0.25
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c1, v0
					    texld_pp r0, r0, s0
					    mul_pp r0.xyw, r0.xyzz, c0.xyzz
					    add_pp r0.xw, r0.yyzw, r0.x
					    mul_pp r0.y, r0.w, r0.y
					    mad_pp r0.x, r0.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    log r0.y, r0.x
					    add r0.x, r0.x, c3.x
					    mul_pp r0.y, r0.y, c3.y
					    cmp_pp r0.x, r0.x, r0.y, c3.z
					    add_pp r0.yz, c1.xxyw, v0.xxyw
					    texld_pp r1, r0.yzzw, s0
					    mul_pp r0.yzw, r1.xxyz, c0.xxyz
					    add_pp r0.yw, r0.xzzw, r0.y
					    mul_pp r0.z, r0.w, r0.z
					    mad_pp r0.y, r1.z, c0.z, r0.y
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    dp2add_pp r0.y, c0.w, r0.z, r0.y
					    log r0.z, r0.y
					    add r0.y, r0.y, c3.x
					    mul_pp r0.z, r0.z, c3.y
					    cmp_pp r0.y, r0.y, r0.z, c3.z
					    add_pp r0.x, r0.y, r0.x
					    mov r1.xy, c1
					    mad_pp r1, r1.xyxy, c2.xyyx, v0.xyxy
					    texld_pp r2, r1, s0
					    texld_pp r1, r1.zwzw, s0
					    mul_pp r0.yzw, r2.xxyz, c0.xxyz
					    add_pp r0.yw, r0.xzzw, r0.y
					    mul_pp r0.z, r0.w, r0.z
					    mad_pp r0.y, r2.z, c0.z, r0.y
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    dp2add_pp r0.y, c0.w, r0.z, r0.y
					    log r0.z, r0.y
					    add r0.y, r0.y, c3.x
					    mul_pp r0.z, r0.z, c3.y
					    cmp_pp r0.y, r0.y, r0.z, c3.z
					    add_pp r0.x, r0.y, r0.x
					    mul_pp r0.yzw, r1.xxyz, c0.xxyz
					    add_pp r0.yw, r0.xzzw, r0.y
					    mul_pp r0.z, r0.w, r0.z
					    mad_pp r0.y, r1.z, c0.z, r0.y
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    dp2add_pp r0.y, c0.w, r0.z, r0.y
					    add r0.z, r0.y, c3.x
					    log r0.y, r0.y
					    mul_pp r0.y, r0.y, c3.y
					    cmp_pp r0.y, r0.z, r0.y, c3.z
					    add_pp r0.x, r0.y, r0.x
					    mul_pp oC0, r0.x, c3.w
					
					// approximately 60 instruction slots used (4 texture, 56 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyw = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat0.xw = u_xlat0.yw + u_xlat0.xx;
					    u_xlat3.x = u_xlat0.w * u_xlat0.y;
					    u_xlat0.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat0.x;
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = dot(unity_ColorSpaceLuminance.ww, u_xlat3.xx);
					    u_xlat0.x = u_xlat3.x + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.693147182;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat2.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat2.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    SV_Target0 = u_xlat0.xxxx * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyw = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat0.xw = u_xlat0.yw + u_xlat0.xx;
					    u_xlat3.x = u_xlat0.w * u_xlat0.y;
					    u_xlat0.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat0.x;
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = dot(unity_ColorSpaceLuminance.ww, u_xlat3.xx);
					    u_xlat0.x = u_xlat3.x + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.693147182;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat2.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat2.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    SV_Target0 = u_xlat0.xxxx * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend SrcAlpha OneMinusSrcAlpha
  GpuProgramID 144523
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationSpeed;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _AdaptationSpeed   c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 1, -1, 0.360673755, 0.0125000002
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c0, v0
					    texld_pp r0, r0, s0
					    add_pp r0.yz, c0.xxyw, v0.xxyw
					    texld r1, r0.yzzw, s0
					    add_pp r0.x, r0.x, r1.x
					    mov r1.xy, c0
					    mad_pp r1, r1.xyxy, c2.xyyx, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0.x, r0.x, r2.x
					    add_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r0.x, c2.z
					    exp_pp oC0.xyz, r0.x
					    mov r0.w, c2.w
					    mul_sat_pp oC0.w, r0.w, c1.x
					
					// approximately 15 instruction slots used (4 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						float _AdaptationSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.x = u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.360673755;
					    SV_Target0.xyz = exp2(u_xlat0.xxx);
					    SV_Target0.w = _AdaptationSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						float _AdaptationSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.x = u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.360673755;
					    SV_Target0.xyz = exp2(u_xlat0.xxx);
					    SV_Target0.w = _AdaptationSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 229652
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationSpeed;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _AdaptationSpeed   c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 1, -1, 0.360673755, 0.0125000002
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c0, v0
					    texld_pp r0, r0, s0
					    add_pp r0.yz, c0.xxyw, v0.xxyw
					    texld r1, r0.yzzw, s0
					    add_pp r0.x, r0.x, r1.x
					    mov r1.xy, c0
					    mad_pp r1, r1.xyxy, c2.xyyx, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0.x, r0.x, r2.x
					    add_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r0.x, c2.z
					    exp_pp oC0.xyz, r0.x
					    mov r0.w, c2.w
					    mul_sat_pp oC0.w, r0.w, c1.x
					
					// approximately 15 instruction slots used (4 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						float _AdaptationSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.x = u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.360673755;
					    SV_Target0.xyz = exp2(u_xlat0.xxx);
					    SV_Target0.w = _AdaptationSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						float _AdaptationSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.x = u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.360673755;
					    SV_Target0.xyz = exp2(u_xlat0.xxx);
					    SV_Target0.w = _AdaptationSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 267642
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp oC0, v0, s0
					
					// approximately 1 instruction slot used (1 texture, 0 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c2, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c1, c1.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mad_pp oC0.xyz, r0.x, -c2.x, r1
					    mov_pp oC0.w, r1.w
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _MiddleGrey    c0       1
					//   _AdaptationMin c1       1
					//   _AdaptationMax c2       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c0.x
					    min_pp r1.x, r0.x, c2.x
					    max_pp r0.x, c1.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp oC0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					
					// approximately 8 instruction slots used (2 texture, 6 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[12];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[5];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MiddleGrey        c1       1
					//   _AdaptationMin     c2       1
					//   _AdaptationMax     c3       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c4, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c5, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4, c4.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.x
					    texld_pp r1, v0, s1
					    rcp r0.y, r1.x
					    mul_pp r0.y, r0.y, c1.x
					    min_pp r1.x, r0.y, c3.x
					    max_pp r0.y, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp oC0.xyz, r1, r0.y, -r0.x
					    mov_pp oC0.w, r1.w
					
					// approximately 17 instruction slots used (2 texture, 15 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat2 = _MiddleGrey / u_xlat1.x;
					    u_xlat2 = min(u_xlat2, _AdaptationMax);
					    u_xlat2 = max(u_xlat2, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat2) + (-u_xlat0.xxx);
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[4];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					vec2 u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat2 = _MiddleGrey / u_xlat1.x;
					    u_xlat2 = min(u_xlat2, _AdaptationMax);
					    u_xlat2 = max(u_xlat2, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat2) + (-u_xlat0.xxx);
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _LutParams   c0       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c1, 0.5, 1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c0.z
					    frc_pp r2.x, r1.y
					    add_pp r1.y, r1.y, -r2.x
					    mov r2.xy, c0
					    mul_pp r2.xz, r2.xyyw, c1.x
					    mad_pp r3.yz, r1.xzww, c0.xxyw, r2.xxzw
					    mad_pp r3.x, r1.y, c0.y, r3.y
					    mad r1.x, r1.x, c0.z, -r1.y
					    mad_pp r1.yz, r2.y, c1, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    add_pp r1.xyz, -r0, r4
					    mad_pp oC0.xyz, c0.w, r1, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 17 instruction slots used (3 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _LutParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat8.xy;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[4];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LutParams         c1       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c2, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c3, 0.5, 1, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c2, c2.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mov_sat_pp r0.yzw, r1.xzxy
					    mul_pp r2.xyz, r0.yzww, c1.z
					    frc_pp r0.z, r2.x
					    add_pp r0.z, -r0.z, r2.x
					    mov r3.xy, c1
					    mul_pp r2.xw, r3.xyzy, c3.x
					    mad_pp r2.yz, r2, c1.xxyw, r2.xxww
					    mad_pp r2.x, r0.z, c1.y, r2.y
					    mad r0.y, r0.y, c1.z, -r0.z
					    mad_pp r0.zw, r3.y, c3.xyyz, r2.xyxz
					    texld r2, r2.xzzw, s1
					    texld r3, r0.zwzw, s1
					    lrp_pp r4.xyz, r0.y, r3, r2
					    lrp_pp r0.yzw, c1.w, r4.xxyz, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mad_pp oC0.xyz, r0.x, -c2.w, r0.yzww
					
					// approximately 25 instruction slots used (3 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat8.xy;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[3];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _LutParams     c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c4, 0.5, 1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r0.x, r1.xxyz
					    mov_sat_pp r2.xyz, r0.wyzw
					    mul_pp r2.yzw, r2.xxyz, c0.z
					    frc_pp r3.x, r2.y
					    add_pp r2.y, r2.y, -r3.x
					    mov r3.xy, c0
					    mul_pp r3.xz, r3.xyyw, c4.x
					    mad_pp r4.yz, r2.xzww, c0.xxyw, r3.xxzw
					    mad_pp r4.x, r2.y, c0.y, r4.y
					    mad r2.x, r2.x, c0.z, -r2.y
					    mad_pp r2.yz, r3.y, c4, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r1.xyz, r1, -r0.x, r5
					    mov_pp oC0.w, r1.w
					    mad_pp oC0.xyz, c0.w, r1, r0.yzww
					
					// approximately 23 instruction slots used (4 texture, 19 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[4];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1.xy = vs_TEXCOORD0.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LutParams         c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c5, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c6, 0.5, 1, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r0.x, r1.xxyz
					    mov_sat_pp r2.xyz, r0.wyzw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r3.x, r2.y
					    add_pp r2.y, r2.y, -r3.x
					    mov r3.xy, c1
					    mul_pp r3.xz, r3.xyyw, c6.x
					    mad_pp r4.yz, r2.xzww, c1.xxyw, r3.xxzw
					    mad_pp r4.x, r2.y, c1.y, r4.y
					    mad r2.x, r2.x, c1.z, -r2.y
					    mad_pp r2.yz, r3.y, c6, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r1.xyz, r1, -r0.x, r5
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xyz, c1.w, r1, r0.yzww
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c5, c5.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c5.w, r0
					
					// approximately 32 instruction slots used (4 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat15 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat15 = fract(u_xlat15);
					    u_xlat15 = u_xlat15 * 52.9829178;
					    u_xlat15 = fract(u_xlat15);
					    SV_Target0.xyz = (-vec3(u_xlat15)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[3];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1.xy = vs_TEXCOORD0.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat15 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat15 = fract(u_xlat15);
					    u_xlat15 = u_xlat15 * 52.9829178;
					    u_xlat15 = fract(u_xlat15);
					    SV_Target0.xyz = (-vec3(u_xlat15)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0.305306017, 0.682171106, 0.0125228781, 0
					    def c1, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c0.x, c0.y
					    mad_pp r1.xyz, r0, r1, c0.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    max_pp r1.xyz, r0, c0.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c1.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c1.y, c1.z
					    max_pp oC0.xyz, r0, c0.w
					
					// approximately 15 instruction slots used (1 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0.305306017, 0.682171106, 0.0125228781, 52.9829178
					    def c2, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c3, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c2, c2.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.w
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c1.x, c1.y
					    mad_pp r0.yzw, r1.xxyz, r0, c1.z
					    mad_pp r0.xyz, r1, r0.yzww, -r0.x
					    mov_pp oC0.w, r1.w
					    max_pp r1.xyz, r0, c2.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c3.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c3.y, c3.z
					    max_pp oC0.xyz, r0, c2.z
					
					// approximately 24 instruction slots used (1 texture, 23 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + (-u_xlat0.xxx);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + (-u_xlat0.xxx);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _MiddleGrey    c0       1
					//   _AdaptationMin c1       1
					//   _AdaptationMax c2       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 0
					    def c4, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c0.x
					    min_pp r1.x, r0.x, c2.x
					    max_pp r0.x, c1.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c3.x, c3.y
					    mad_pp r0.yzw, r1.xxyz, r0, c3.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    max_pp r1.xyz, r0, c3.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c4.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c4.y, c4.z
					    max_pp oC0.xyz, r0, c3.w
					
					// approximately 21 instruction slots used (2 texture, 19 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[12];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[5];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MiddleGrey        c1       1
					//   _AdaptationMin     c2       1
					//   _AdaptationMax     c3       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 52.9829178
					    def c5, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c6, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c5, c5.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.w
					    texld_pp r1, v0, s1
					    rcp r0.y, r1.x
					    mul_pp r0.y, r0.y, c1.x
					    min_pp r1.x, r0.y, c3.x
					    max_pp r0.y, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r2.xyz, r1, c4.x, c4.y
					    mad_pp r2.xyz, r1, r2, c4.z
					    mul_pp r1.xyz, r1, r2
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xyz, r1, r0.y, -r0.x
					    max_pp r1.xyz, r0, c5.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.y, c6.z
					    max_pp oC0.xyz, r0, c5.z
					
					// approximately 30 instruction slots used (2 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat3 = _MiddleGrey / u_xlat1.x;
					    u_xlat3 = min(u_xlat3, _AdaptationMax);
					    u_xlat3 = max(u_xlat3, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat3) + (-u_xlat0.xxx);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[4];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat3 = _MiddleGrey / u_xlat1.x;
					    u_xlat3 = min(u_xlat3, _AdaptationMax);
					    u_xlat3 = max(u_xlat3, _AdaptationMin);
					    u_xlat6.xy = vs_TEXCOORD0.xy;
					    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat3) + (-u_xlat0.xxx);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _LutParams   c0       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c1, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c2, 1.05499995, -0.0549999997, 0, 0
					    def c3, 1, 0, 0.416666657, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c1.x, c1.y
					    mad_pp r1.xyz, r0, r1, c1.z
					    mul_pp r2.xyz, r0, r1
					    mov_sat_pp r3.xyz, r2.zxyw
					    mul_pp r3.yzw, r3.xxyz, c0.z
					    frc_pp r1.w, r3.y
					    add_pp r1.w, -r1.w, r3.y
					    mov r4.xy, c0
					    mul_pp r4.xz, r4.xyyw, c1.w
					    mad_pp r5.yz, r3.xzww, c0.xxyw, r4.xxzw
					    mad_pp r5.x, r1.w, c0.y, r5.y
					    mad r1.w, r3.x, c0.z, -r1.w
					    mad_pp r3.xy, r4.y, c3, r5.xzzw
					    texld r4, r5.xzzw, s1
					    texld r3, r3, s1
					    lrp_pp r5.xyz, r1.w, r3, r4
					    mad_pp r0.xyz, r0, -r1, r5
					    mov_pp oC0.w, r0.w
					    mad_pp r0.xyz, c0.w, r0, r2
					    max_pp r1.xyz, r0, c3.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c3.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c2.x, c2.y
					    max_pp oC0.xyz, r0, c3.y
					
					// approximately 30 instruction slots used (3 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _LutParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat10;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat3.zxy;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat10.xyz = u_xlat4.xyz * _LutParams.zzz;
					    u_xlat12 = floor(u_xlat10.x);
					    u_xlat5.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat5.yz = u_xlat10.yz * _LutParams.xy + u_xlat5.xy;
					    u_xlat5.x = u_xlat12 * _LutParams.y + u_xlat5.y;
					    u_xlat12 = u_xlat4.x * _LutParams.z + (-u_xlat12);
					    u_xlat0.xy = u_xlat0.xy + u_xlat5.xz;
					    u_xlat4 = texture(_LutTex, u_xlat5.xz);
					    u_xlat5 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyw + u_xlat4.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[4];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat10;
					vec2 u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy;
					    u_xlat12.xy = clamp(u_xlat12.xy, 0.0, 1.0);
					    u_xlat12.xy = u_xlat12.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat12.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat3.zxy;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat10.xyz = u_xlat4.xyz * _LutParams.zzz;
					    u_xlat12.x = floor(u_xlat10.x);
					    u_xlat5.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat5.yz = u_xlat10.yz * _LutParams.xy + u_xlat5.xy;
					    u_xlat5.x = u_xlat12.x * _LutParams.y + u_xlat5.y;
					    u_xlat12.x = u_xlat4.x * _LutParams.z + (-u_xlat12.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat5.xz;
					    u_xlat4 = texture(_LutTex, u_xlat5.xz);
					    u_xlat5 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat12.xxx * u_xlat0.xyw + u_xlat4.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LutParams         c1       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c3, 1, 0, 0.0671105608, 0.00583714992
					    def c4, 52.9829178, 0.00392156886, 0.416666657, 0
					    def c5, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mul_pp r2.xyz, r0, r1
					    mov_sat_pp r3.xyz, r2.zxyw
					    mul_pp r3.yzw, r3.xxyz, c1.z
					    frc_pp r1.w, r3.y
					    add_pp r1.w, -r1.w, r3.y
					    mov r4.xy, c1
					    mul_pp r4.xz, r4.xyyw, c2.w
					    mad_pp r5.yz, r3.xzww, c1.xxyw, r4.xxzw
					    mad_pp r5.x, r1.w, c1.y, r5.y
					    mad r1.w, r3.x, c1.z, -r1.w
					    mad_pp r3.xy, r4.y, c3, r5.xzzw
					    texld r4, r5.xzzw, s1
					    texld r3, r3, s1
					    lrp_pp r5.xyz, r1.w, r3, r4
					    mad_pp r0.xyz, r0, -r1, r5
					    mov_pp oC0.w, r0.w
					    mad_pp r0.xyz, c1.w, r0, r2
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c3.zwzw, c3.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c4.x
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c4.y, r0
					    max_pp r1.xyz, r0, c3.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c4.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.x, c5.y
					    max_pp oC0.xyz, r0, c3.y
					
					// approximately 39 instruction slots used (3 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat3.zxy;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat10.xyz = u_xlat4.xyz * _LutParams.zzz;
					    u_xlat12 = floor(u_xlat10.x);
					    u_xlat5.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat5.yz = u_xlat10.yz * _LutParams.xy + u_xlat5.xy;
					    u_xlat5.x = u_xlat12 * _LutParams.y + u_xlat5.y;
					    u_xlat12 = u_xlat4.x * _LutParams.z + (-u_xlat12);
					    u_xlat0.xy = u_xlat0.xy + u_xlat5.xz;
					    u_xlat4 = texture(_LutTex, u_xlat5.xz);
					    u_xlat5 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyw + u_xlat4.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat18 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat18 = fract(u_xlat18);
					    u_xlat18 = u_xlat18 * 52.9829178;
					    u_xlat18 = fract(u_xlat18);
					    u_xlat0.xyz = (-vec3(u_xlat18)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[3];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat10;
					vec2 u_xlat12;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy;
					    u_xlat12.xy = clamp(u_xlat12.xy, 0.0, 1.0);
					    u_xlat12.xy = u_xlat12.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat12.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat3.zxy;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat10.xyz = u_xlat4.xyz * _LutParams.zzz;
					    u_xlat12.x = floor(u_xlat10.x);
					    u_xlat5.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat5.yz = u_xlat10.yz * _LutParams.xy + u_xlat5.xy;
					    u_xlat5.x = u_xlat12.x * _LutParams.y + u_xlat5.y;
					    u_xlat12.x = u_xlat4.x * _LutParams.z + (-u_xlat12.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat5.xz;
					    u_xlat4 = texture(_LutTex, u_xlat5.xz);
					    u_xlat5 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat4.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat12.xxx * u_xlat0.xyw + u_xlat4.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat18 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat18 = fract(u_xlat18);
					    u_xlat18 = u_xlat18 * 52.9829178;
					    u_xlat18 = fract(u_xlat18);
					    u_xlat0.xyz = (-vec3(u_xlat18)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _LutParams     c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c5, 1.05499995, -0.0549999997, 0, 0
					    def c6, 1, 0, 0.416666657, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c4.x, c4.y
					    mad_pp r0.yzw, r1.xxyz, r0, c4.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0.x, r0.yzww
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c0.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c0.z, -r1.w
					    mov r3.xy, c0
					    mul_pp r3.xz, r3.xyyw, c4.w
					    mad_pp r4.yz, r2.xzww, c0.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c0.y, r4.y
					    mad_pp r2.yz, r3.y, c6.xxyw, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0.yzww, -r0.x, r5
					    mad_pp r0.xyz, c0.w, r0, r1
					    max_pp r1.xyz, r0, c6.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.x, c5.y
					    max_pp oC0.xyz, r0, c6.y
					
					// approximately 36 instruction slots used (4 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[4];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1.xy = vs_TEXCOORD0.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LutParams         c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c6, 1, 0, 0.0671105608, 0.00583714992
					    def c7, 52.9829178, 0.00392156886, 0.416666657, 0
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0.x, r0.yzww
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c1.z, -r1.w
					    mov r3.xy, c1
					    mul_pp r3.xz, r3.xyyw, c5.w
					    mad_pp r4.yz, r2.xzww, c1.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c1.y, r4.y
					    mad_pp r2.yz, r3.y, c6.xxyw, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0.yzww, -r0.x, r5
					    mad_pp r0.xyz, c1.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c6.zwzw, c6.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.x
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c7.y, r0
					    max_pp r1.xyz, r0, c6.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.x, c8.y
					    max_pp oC0.xyz, r0, c6.y
					
					// approximately 45 instruction slots used (4 texture, 41 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat15 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat15 = fract(u_xlat15);
					    u_xlat15 = u_xlat15 * 52.9829178;
					    u_xlat15 = fract(u_xlat15);
					    u_xlat0.xyz = (-vec3(u_xlat15)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[3];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat10 = _MiddleGrey / u_xlat1.x;
					    u_xlat10 = min(u_xlat10, _AdaptationMax);
					    u_xlat10 = max(u_xlat10, _AdaptationMin);
					    u_xlat1.xy = vs_TEXCOORD0.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat15 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat15 * _LutParams.y + u_xlat4.y;
					    u_xlat15 = u_xlat3.x * _LutParams.z + (-u_xlat15);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyw = vec3(u_xlat15) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(u_xlat10) + u_xlat0.xyw;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat15 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat15 = fract(u_xlat15);
					    u_xlat15 = u_xlat15 * 52.9829178;
					    u_xlat15 = fract(u_xlat15);
					    u_xlat0.xyz = (-vec3(u_xlat15)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 360541
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c2, 0.140000001, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0.x
					    mov_pp oC0.w, r0.w
					    mad_pp r1.xyz, r0, c1.x, c1.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c1.z, c1.w
					    mad_pp r0.xyz, r0, r2, c2.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp oC0.xyz, r1, r2
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    SV_Target0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = clamp(SV_Target0.xyz, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    SV_Target0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = clamp(SV_Target0.xyz, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c3, 0.140000001, 0.0671105608, 0.00583714992, 0
					    def c4, 52.9829178, 0.00392156886, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c3.yzzw, c3.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r1.xxyz, c1.x
					    mov_pp oC0.w, r1.w
					    mad_pp r1.xyz, r0.yzww, c2.x, c2.y
					    mul_pp r1.xyz, r0.yzww, r1
					    mad_pp r2.xyz, r0.yzww, c2.z, c2.w
					    mad_pp r0.yzw, r0, r2.xxyz, c3.x
					    rcp r2.x, r0.y
					    rcp r2.y, r0.z
					    rcp r2.z, r0.w
					    mul_sat_pp r0.yzw, r1.xxyz, r2.xxyz
					    mad_pp oC0.xyz, r0.x, -c4.y, r0.yzww
					
					// approximately 20 instruction slots used (1 texture, 19 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c5, 0.140000001, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c4.z, c4.w
					    mad_pp r0.xyz, r0, r2, c5.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp oC0.xyz, r1, r2
					
					// approximately 17 instruction slots used (2 texture, 15 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    SV_Target0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = clamp(SV_Target0.xyz, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    SV_Target0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = clamp(SV_Target0.xyz, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c6, 0.140000001, 0.0671105608, 0.00583714992, 0
					    def c7, 52.9829178, 0.00392156886, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c1.x
					    mad_pp r1.xyz, r0, c5.x, c5.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c5.z, c5.w
					    mad_pp r0.xyz, r0, r2, c6.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c6.yzzw, c6.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.x
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c7.y, r0
					
					// approximately 26 instruction slots used (2 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c3, 0.140000001, 0.5, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0.x
					    mov_pp oC0.w, r0.w
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c2.z, c2.w
					    mad_pp r0.xyz, r0, r2, c3.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c1.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c1.z, -r0.w
					    mov r2.xy, c1
					    mul_pp r2.xz, r2.xyyw, c3.y
					    mad_pp r3.yz, r1, c1.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad_pp r1.yz, r2.y, c3.xzww, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    add_pp r1.xyz, -r0, r4
					    mad_pp oC0.xyz, c1.w, r1, r0
					
					// approximately 25 instruction slots used (3 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat1.zxy * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat2.x);
					    u_xlat2.xw = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat2.yz * _LutParams.xy + u_xlat2.xw;
					    u_xlat2.x = u_xlat8 * _LutParams.y + u_xlat2.y;
					    u_xlat8 = u_xlat1.z * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat1.zxy * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat2.x);
					    u_xlat2.xw = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat2.yz * _LutParams.xy + u_xlat2.xw;
					    u_xlat2.x = u_xlat8.x * _LutParams.y + u_xlat2.y;
					    u_xlat8.x = u_xlat1.z * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c4, 0.140000001, 0.5, 1, 0
					    def c5, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c6, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c1.x
					    mov_pp oC0.w, r0.w
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c3.z, c3.w
					    mad_pp r0.xyz, r0, r2, c4.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c2.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c4.y
					    mad_pp r3.yz, r1, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c4.xzww, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c5, c5.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.w
					    frc_pp r0.x, r0.x
					    mad_pp oC0.xyz, r0.x, -c6.x, r1
					
					// approximately 33 instruction slots used (3 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat1.zxy * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat2.x);
					    u_xlat2.xw = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat2.yz * _LutParams.xy + u_xlat2.xw;
					    u_xlat2.x = u_xlat8 * _LutParams.y + u_xlat2.y;
					    u_xlat8 = u_xlat1.z * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat1.zxy * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat2.x);
					    u_xlat2.xw = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat2.yz * _LutParams.xy + u_xlat2.xw;
					    u_xlat2.x = u_xlat8.x * _LutParams.y + u_xlat2.y;
					    u_xlat8.x = u_xlat1.z * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c6, 0.140000001, 0.5, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    mad_pp r1.xyz, r0, c5.x, c5.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c5.z, c5.w
					    mad_pp r0.xyz, r0, r2, c6.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c1.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c1.z, -r0.w
					    mov r2.xy, c1
					    mul_pp r2.xz, r2.xyyw, c6.y
					    mad_pp r3.yz, r1, c1.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad_pp r1.yz, r2.y, c6.xzww, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    add_pp r1.xyz, -r0, r4
					    mad_pp oC0.xyz, c1.w, r1, r0
					
					// approximately 31 instruction slots used (4 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c7, 0.140000001, 0.5, 1, 0
					    def c8, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c9, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c1.x
					    mad_pp r1.xyz, r0, c6.x, c6.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c6.z, c6.w
					    mad_pp r0.xyz, r0, r2, c7.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c2.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c7.y
					    mad_pp r3.yz, r1, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c7.xzww, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c8, c8.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c8.w
					    frc_pp r0.x, r0.x
					    mad_pp oC0.xyz, r0.x, -c9.x, r1
					
					// approximately 39 instruction slots used (4 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c2, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c3, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c1.x, c1.y
					    mad_pp r1.xyz, r0, r1, c1.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c2.z, c2.w
					    mad_pp r0.xyz, r0, r2, c1.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c3.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c3.y, c3.z
					    max_pp oC0.xyz, r0, c3.w
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c3, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c4, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c5, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4, c4.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c2.x, c2.y
					    mad_pp r0.yzw, r1.xxyz, r0, c2.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.yzw, r0, c1.x
					    mad_pp r1.xyz, r0.yzww, c3.x, c3.y
					    mul_pp r1.xyz, r0.yzww, r1
					    mad_pp r2.xyz, r0.yzww, c3.z, c3.w
					    mad_pp r0.yzw, r0, r2.xxyz, c2.w
					    rcp r2.x, r0.y
					    rcp r2.y, r0.z
					    rcp r2.z, r0.w
					    mul_sat_pp r0.yzw, r1.xxyz, r2.xxyz
					    mad_pp r0.xyz, r0.x, -c5.x, r0.yzww
					    max_pp r1.xyz, r0, c4.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c5.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.z, c5.w
					    max_pp oC0.xyz, r0, c4.z
					
					// approximately 33 instruction slots used (1 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat3.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c5, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c6, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c4.x, c4.y
					    mad_pp r0.yzw, r1.xxyz, r0, c4.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    mad_pp r1.xyz, r0, c5.x, c5.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c5.z, c5.w
					    mad_pp r0.xyz, r0, r2, c4.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c6.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.y, c6.z
					    max_pp oC0.xyz, r0, c6.w
					
					// approximately 29 instruction slots used (2 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c6, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c7, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c8, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c1.x
					    mad_pp r1.xyz, r0, c6.x, c6.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c6.z, c6.w
					    mad_pp r0.xyz, r0, r2, c5.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c7, c7.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c8.x, r0
					    max_pp r1.xyz, r0, c7.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c8.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.z, c8.w
					    max_pp oC0.xyz, r0, c7.z
					
					// approximately 39 instruction slots used (2 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c3, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c4, 1.05499995, -0.0549999997, 0, 0
					    def c5, 0.5, 1, 0, 0.416666657
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c3.z, c3.w
					    mad_pp r0.xyz, r0, r2, c2.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c1.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c1.z, -r0.w
					    mov r2.xy, c1
					    mul_pp r2.xz, r2.xyyw, c5.x
					    mad_pp r3.yz, r1, c1.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad_pp r1.yz, r2.y, c5, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c1.w, r4, r0
					    max_pp r0.xyz, r1, c5.z
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c5.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c4.x, c4.y
					    max_pp oC0.xyz, r0, c5.z
					
					// approximately 37 instruction slots used (3 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat1.zxy * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat2.x);
					    u_xlat2.xw = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat2.yz * _LutParams.xy + u_xlat2.xw;
					    u_xlat2.x = u_xlat8 * _LutParams.y + u_xlat2.y;
					    u_xlat8 = u_xlat1.z * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c4, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c5, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c6, 0.416666657, 1.05499995, -0.0549999997, 0
					    def c7, 0.5, 1, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c1.x
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c4.z, c4.w
					    mad_pp r0.xyz, r0, r2, c3.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c2.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c7.x
					    mad_pp r3.yz, r1, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c7, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c5, c5.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c7.w
					    frc_pp r0.x, r0.x
					    mad_pp r0.xyz, r0.x, -c5.w, r1
					    max_pp r1.xyz, r0, c7.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.y, c6.z
					    max_pp oC0.xyz, r0, c7.z
					
					// approximately 46 instruction slots used (3 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat1.zxy * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat2.x);
					    u_xlat2.xw = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat2.yz * _LutParams.xy + u_xlat2.xw;
					    u_xlat2.x = u_xlat8 * _LutParams.y + u_xlat2.y;
					    u_xlat8 = u_xlat1.z * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c6, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c7, 1.05499995, -0.0549999997, 0, 0
					    def c8, 0.5, 1, 0, 0.416666657
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    mad_pp r1.xyz, r0, c6.x, c6.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c6.z, c6.w
					    mad_pp r0.xyz, r0, r2, c5.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c1.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c1.z, -r0.w
					    mov r2.xy, c1
					    mul_pp r2.xz, r2.xyyw, c8.x
					    mad_pp r3.yz, r1, c1.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad_pp r1.yz, r2.y, c8, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c1.w, r4, r0
					    max_pp r0.xyz, r1, c8.z
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c8.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.x, c7.y
					    max_pp oC0.xyz, r0, c8.z
					
					// approximately 43 instruction slots used (4 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 0.140000001
					    def c7, 2.50999999, 0.0299999993, 2.43000007, 0.589999974
					    def c8, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c9, 0.416666657, 1.05499995, -0.0549999997, 0
					    def c10, 0.5, 1, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c6.x, c6.y
					    mad_pp r0.yzw, r1.xxyz, r0, c6.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c1.x
					    mad_pp r1.xyz, r0, c7.x, c7.y
					    mul_pp r1.xyz, r0, r1
					    mad_pp r2.xyz, r0, c7.z, c7.w
					    mad_pp r0.xyz, r0, r2, c6.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mul_sat_pp r0.xyz, r1, r2
					    mul_pp r1.xyz, r0.zxyw, c2.z
					    frc_pp r0.w, r1.x
					    add_pp r0.w, -r0.w, r1.x
					    mad r1.x, r0.z, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c10.x
					    mad_pp r3.yz, r1, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c10, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c8, c8.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c10.w
					    frc_pp r0.x, r0.x
					    mad_pp r0.xyz, r0.x, -c8.w, r1
					    max_pp r1.xyz, r0, c10.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c9.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c9.y, c9.z
					    max_pp oC0.xyz, r0, c10.z
					
					// approximately 52 instruction slots used (4 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(2.50999999, 2.50999999, 2.50999999) + vec3(0.0299999993, 0.0299999993, 0.0299999993);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(2.43000007, 2.43000007, 2.43000007) + vec3(0.589999974, 0.589999974, 0.589999974);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.140000001, 0.140000001, 0.140000001);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.zxy * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat1.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat0.z * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 457128
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//
					
					    ps_3_0
					    def c2, 0.514136374, 0.323878586, 0.160363764, 1
					    def c3, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c4, 0.0241187997, 0.122817799, 0.844426632, 0
					    def c5, 2.56509995, -1.16649997, -0.398600012, 0
					    def c6, -1.02170002, 1.9777, 0.0439000018, 0
					    def c7, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0.x
					    mov_pp oC0.w, r0.w
					    dp3_pp r1.z, c4, r0
					    dp3_pp r1.x, c2, r0
					    dp3_pp r1.y, c3, r0
					    dp3_pp r0.x, c2.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c2.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c3.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp oC0.x, c5, r1
					    dp3_pp oC0.y, c6, r1
					    dp3_pp oC0.z, c7, r1
					
					// approximately 21 instruction slots used (2 texture, 19 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    SV_Target0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    SV_Target0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    SV_Target0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    SV_Target0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    SV_Target0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    SV_Target0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//
					
					    ps_3_0
					    def c3, 0.514136374, 0.323878586, 0.160363764, 1
					    def c4, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c5, 0.0671105608, 0.00583714992, 0, 0
					    def c6, 2.56509995, -1.16649997, -0.398600012, 0.00392156886
					    def c7, 0.0241187997, 0.122817799, 0.844426632, 52.9829178
					    def c8, -1.02170002, 1.9777, 0.0439000018, 0
					    def c9, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c5, c5.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c7.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r1.xxyz, c1.x
					    mov_pp oC0.w, r1.w
					    dp3_pp r1.z, c7, r0.yzww
					    dp3_pp r1.x, c3, r0.yzww
					    dp3_pp r1.y, c4, r0.yzww
					    dp3_pp r0.y, c3.w, r1
					    rcp r0.y, r0.y
					    mad_pp r0.z, r1.x, -r0.y, c3.w
					    mul_pp r1.xz, r0.y, r1.xyyw
					    mad_pp r0.y, r1.y, -r0.y, r0.z
					    mul_pp r2.x, r1.y, c2.x
					    mov_pp r2.y, c4.w
					    texld_pp r2, r2, s1
					    mul_pp r0.y, r0.y, r2.x
					    rcp r0.z, r1.z
					    mul_pp r0.w, r1.x, r2.x
					    mov_pp r1.y, r2.x
					    mul_pp r1.xz, r0.z, r0.wyyw
					    dp3_pp r2.x, c6, r1
					    dp3_pp r2.y, c8, r1
					    dp3_pp r2.z, c9, r1
					    mad_pp oC0.xyz, r0.x, -c6.w, r2
					
					// approximately 31 instruction slots used (2 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _MiddleGrey     c2       1
					//   _AdaptationMin  c3       1
					//   _AdaptationMax  c4       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//   _LumTex         s2       1
					//
					
					    ps_3_0
					    def c5, 0.514136374, 0.323878586, 0.160363764, 1
					    def c6, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c7, 0.0241187997, 0.122817799, 0.844426632, 0
					    def c8, 2.56509995, -1.16649997, -0.398600012, 0
					    def c9, -1.02170002, 1.9777, 0.0439000018, 0
					    def c10, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    dp3_pp r1.x, c5, r0
					    dp3_pp r1.z, c7, r0
					    dp3_pp r1.y, c6, r0
					    dp3_pp r0.x, c5.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c5.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c6.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp oC0.x, c8, r1
					    dp3_pp oC0.y, c9, r1
					    dp3_pp oC0.z, c10, r1
					
					// approximately 27 instruction slots used (3 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    SV_Target0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    SV_Target0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    SV_Target0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    SV_Target0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    SV_Target0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    SV_Target0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 0.514136374, 0.323878586, 0.160363764, 1
					    def c7, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c8, 0.0671105608, 0.00583714992, 0, 0
					    def c9, 2.56509995, -1.16649997, -0.398600012, 0.00392156886
					    def c10, 0.0241187997, 0.122817799, 0.844426632, 52.9829178
					    def c11, -1.02170002, 1.9777, 0.0439000018, 0
					    def c12, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c8, c8.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c10.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s2
					    rcp r0.y, r1.x
					    mul_pp r0.y, r0.y, c3.x
					    min_pp r1.x, r0.y, c5.x
					    max_pp r0.y, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.yzw, r0, c1.x
					    dp3_pp r1.x, c6, r0.yzww
					    dp3_pp r1.z, c10, r0.yzww
					    dp3_pp r1.y, c7, r0.yzww
					    dp3_pp r0.y, c6.w, r1
					    rcp r0.y, r0.y
					    mad_pp r0.z, r1.x, -r0.y, c6.w
					    mul_pp r1.xz, r0.y, r1.xyyw
					    mad_pp r0.y, r1.y, -r0.y, r0.z
					    mul_pp r2.x, r1.y, c2.x
					    mov_pp r2.y, c7.w
					    texld_pp r2, r2, s1
					    mul_pp r0.y, r0.y, r2.x
					    rcp r0.z, r1.z
					    mul_pp r0.w, r1.x, r2.x
					    mov_pp r1.y, r2.x
					    mul_pp r1.xz, r0.z, r0.wyyw
					    dp3_pp r2.x, c9, r1
					    dp3_pp r2.y, c11, r1
					    dp3_pp r2.z, c12, r1
					    mad_pp oC0.xyz, r0.x, -c9.w, r2
					
					// approximately 37 instruction slots used (3 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat3.x = _MiddleGrey / u_xlat1.x;
					    u_xlat3.x = min(u_xlat3.x, _AdaptationMax);
					    u_xlat3.x = max(u_xlat3.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat3.x = _MiddleGrey / u_xlat1.x;
					    u_xlat3.x = min(u_xlat3.x, _AdaptationMax);
					    u_xlat3.x = max(u_xlat3.x, _AdaptationMin);
					    u_xlat6.xy = vs_TEXCOORD0.xy;
					    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _LutParams      c2       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//   _LutTex         s2       1
					//
					
					    ps_3_0
					    def c3, 0.514136374, 0.323878586, 0.160363764, 1
					    def c4, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c5, 0.0241187997, 0.122817799, 0.844426632, 0
					    def c6, 2.56509995, -1.16649997, -0.398600012, 0
					    def c7, -1.02170002, 1.9777, 0.0439000018, 0
					    def c8, 0.0753000006, -0.254299998, 1.18920004, 0
					    def c9, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0.x
					    mov_pp oC0.w, r0.w
					    dp3_pp r1.z, c5, r0
					    dp3_pp r1.x, c3, r0
					    dp3_pp r1.y, c4, r0
					    dp3_pp r0.x, c3.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c3.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c4.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c6, r1
					    dp3_pp r0.y, c7, r1
					    dp3_pp r0.z, c8, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c4.w
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c9.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    add_pp r1.xyz, -r0, r4
					    mad_pp oC0.xyz, c2.w, r1, r0
					
					// approximately 36 instruction slots used (4 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					void main()
					{
					    u_xlat8.x = _LutParams.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat1.xyz);
					    u_xlat2.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat1.xyz);
					    u_xlat1.x = dot(vec3(1.0, 1.0, 1.0), u_xlat2.xyz);
					    u_xlat1.xy = u_xlat2.xy / u_xlat1.xx;
					    u_xlat0.x = u_xlat2.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat1.x) + 1.0;
					    u_xlat9 = (-u_xlat1.y) + u_xlat9;
					    u_xlat0.y = float(0.5);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat0.xy).yxzw;
					    u_xlat0.x = u_xlat9 * u_xlat2.y;
					    u_xlat2.z = u_xlat0.x / u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat2.y;
					    u_xlat2.x = u_xlat0.x / u_xlat1.y;
					    u_xlat1.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat1.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat1.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat0.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat0.x * _LutParams.y + u_xlat3.y;
					    u_xlat0.x = u_xlat2.x * _LutParams.z + (-u_xlat0.x);
					    u_xlat4.xy = u_xlat8.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat4.xy);
					    u_xlat4.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _LutParams         c3       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//   _LutTex            s2       1
					//
					
					    ps_3_0
					    def c4, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c5, 1, 0, 0.0671105608, 0.00583714992
					    def c6, 2.56509995, -1.16649997, -0.398600012, 0.00392156886
					    def c7, 0.0241187997, 0.122817799, 0.844426632, 52.9829178
					    def c8, 0.514136374, 0.323878586, 0.160363764, 1
					    def c9, -1.02170002, 1.9777, 0.0439000018, 0
					    def c10, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c1.x
					    mov_pp oC0.w, r0.w
					    dp3_pp r1.z, c7, r0
					    dp3_pp r1.x, c8, r0
					    dp3_pp r1.y, c4, r0
					    dp3_pp r0.x, c8.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c8.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c2.x
					    mov_pp r1.y, c4.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c6, r1
					    dp3_pp r0.y, c9, r1
					    dp3_pp r0.z, c10, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c3.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c3.z, -r0.w
					    mov r2.xy, c3
					    mul_pp r2.xz, r2.xyyw, c4.w
					    mad_pp r3.yz, r1.xzww, c3.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c3.y, r3.y
					    mad_pp r1.yz, r2.y, c5.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c3.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c5.zwzw, c5.y
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c7.w
					    frc_pp r0.x, r0.x
					    mad_pp oC0.xyz, r0.x, -c6.w, r1
					
					// approximately 44 instruction slots used (4 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat8.x = _LutParams.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat1.xyz);
					    u_xlat2.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat1.xyz);
					    u_xlat1.x = dot(vec3(1.0, 1.0, 1.0), u_xlat2.xyz);
					    u_xlat1.xy = u_xlat2.xy / u_xlat1.xx;
					    u_xlat0.x = u_xlat2.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat1.x) + 1.0;
					    u_xlat9 = (-u_xlat1.y) + u_xlat9;
					    u_xlat0.y = float(0.5);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat0.xy).yxzw;
					    u_xlat0.x = u_xlat9 * u_xlat2.y;
					    u_xlat2.z = u_xlat0.x / u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat2.y;
					    u_xlat2.x = u_xlat0.x / u_xlat1.y;
					    u_xlat1.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat1.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat1.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat0.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat0.x * _LutParams.y + u_xlat3.y;
					    u_xlat0.x = u_xlat2.x * _LutParams.z + (-u_xlat0.x);
					    u_xlat4.xy = u_xlat8.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat4.xy);
					    u_xlat4.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _LutParams      c2       1
					//   _MiddleGrey     c3       1
					//   _AdaptationMin  c4       1
					//   _AdaptationMax  c5       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//   _LutTex         s2       1
					//   _LumTex         s3       1
					//
					
					    ps_3_0
					    def c6, 0.514136374, 0.323878586, 0.160363764, 1
					    def c7, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c8, 0.0241187997, 0.122817799, 0.844426632, 0
					    def c9, 2.56509995, -1.16649997, -0.398600012, 0
					    def c10, -1.02170002, 1.9777, 0.0439000018, 0
					    def c11, 0.0753000006, -0.254299998, 1.18920004, 0
					    def c12, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s3
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    dp3_pp r1.x, c6, r0
					    dp3_pp r1.z, c8, r0
					    dp3_pp r1.y, c7, r0
					    dp3_pp r0.x, c6.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c6.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c7.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c9, r1
					    dp3_pp r0.y, c10, r1
					    dp3_pp r0.z, c11, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c7.w
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c12.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    add_pp r1.xyz, -r0, r4
					    mad_pp oC0.xyz, c2.w, r1, r0
					
					// approximately 42 instruction slots used (5 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _LutParams         c3       1
					//   _MiddleGrey        c4       1
					//   _AdaptationMin     c5       1
					//   _AdaptationMax     c6       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//   _LutTex            s2       1
					//   _LumTex            s3       1
					//
					
					    ps_3_0
					    def c7, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c8, 1, 0, 0.0671105608, 0.00583714992
					    def c9, 2.56509995, -1.16649997, -0.398600012, 0.00392156886
					    def c10, 0.0241187997, 0.122817799, 0.844426632, 52.9829178
					    def c11, 0.514136374, 0.323878586, 0.160363764, 1
					    def c12, -1.02170002, 1.9777, 0.0439000018, 0
					    def c13, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s3
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c1.x
					    dp3_pp r1.x, c11, r0
					    dp3_pp r1.z, c10, r0
					    dp3_pp r1.y, c7, r0
					    dp3_pp r0.x, c11.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c11.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c2.x
					    mov_pp r1.y, c7.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c9, r1
					    dp3_pp r0.y, c12, r1
					    dp3_pp r0.z, c13, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c3.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c3.z, -r0.w
					    mov r2.xy, c3
					    mul_pp r2.xz, r2.xyyw, c7.w
					    mad_pp r3.yz, r1.xzww, c3.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c3.y, r3.y
					    mad_pp r1.yz, r2.y, c8.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c3.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c8.zwzw, c8.y
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c10.w
					    frc_pp r0.x, r0.x
					    mad_pp oC0.xyz, r0.x, -c9.w, r1
					
					// approximately 50 instruction slots used (5 texture, 45 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c3, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c4, 0.265067995, 0.670234263, 0.0640915707, 0
					    def c5, 1.05499995, -0.0549999997, 0, 0
					    def c6, 0.0241187997, 0.122817799, 0.844426632, 0.416666657
					    def c7, 2.56509995, -1.16649997, -0.398600012, 0
					    def c8, -1.02170002, 1.9777, 0.0439000018, 0
					    def c9, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    dp3_pp r1.z, c6, r0
					    dp3_pp r1.x, c3, r0
					    dp3_pp r1.y, c4, r0
					    dp3_pp r0.x, c2.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c2.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c3.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c7, r1
					    dp3_pp r0.y, c8, r1
					    dp3_pp r0.z, c9, r1
					    max_pp r1.xyz, r0, c4.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.x, c5.y
					    max_pp oC0.xyz, r0, c4.w
					
					// approximately 34 instruction slots used (2 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c4, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c5, 0.0671105608, 0.00583714992, 0, 0
					    def c6, 0.0241187997, 0.122817799, 0.844426632, 0.00392156886
					    def c7, 1.05499995, -0.0549999997, 0, 0
					    def c8, -1.02170002, 1.9777, 0.0439000018, 0.416666657
					    def c9, 0.265067995, 0.670234263, 0.0640915707, 52.9829178
					    def c10, 2.56509995, -1.16649997, -0.398600012, 0
					    def c11, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c5, c5.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c9.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c3.x, c3.y
					    mad_pp r0.yzw, r1.xxyz, r0, c3.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.yzw, r0, c1.x
					    dp3_pp r1.z, c6, r0.yzww
					    dp3_pp r1.x, c4, r0.yzww
					    dp3_pp r1.y, c9, r0.yzww
					    dp3_pp r0.y, c3.w, r1
					    rcp r0.y, r0.y
					    mad_pp r0.z, r1.x, -r0.y, c3.w
					    mul_pp r1.xz, r0.y, r1.xyyw
					    mad_pp r0.y, r1.y, -r0.y, r0.z
					    mul_pp r2.x, r1.y, c2.x
					    mov_pp r2.y, c4.w
					    texld_pp r2, r2, s1
					    mul_pp r0.y, r0.y, r2.x
					    rcp r0.z, r1.z
					    mul_pp r0.w, r1.x, r2.x
					    mov_pp r1.y, r2.x
					    mul_pp r1.xz, r0.z, r0.wyyw
					    dp3_pp r2.x, c10, r1
					    dp3_pp r2.y, c8, r1
					    dp3_pp r2.z, c11, r1
					    mad_pp r0.xyz, r0.x, -c6.w, r2
					    max_pp r1.xyz, r0, c10.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c8.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.x, c7.y
					    max_pp oC0.xyz, r0, c10.w
					
					// approximately 44 instruction slots used (2 texture, 42 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _MiddleGrey     c2       1
					//   _AdaptationMin  c3       1
					//   _AdaptationMax  c4       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//   _LumTex         s2       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c6, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c7, 0.265067995, 0.670234263, 0.0640915707, 0
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    def c9, 0.0241187997, 0.122817799, 0.844426632, 0.416666657
					    def c10, 2.56509995, -1.16649997, -0.398600012, 0
					    def c11, -1.02170002, 1.9777, 0.0439000018, 0
					    def c12, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    dp3_pp r1.x, c6, r0
					    dp3_pp r1.z, c9, r0
					    dp3_pp r1.y, c7, r0
					    dp3_pp r0.x, c5.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c5.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c6.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c10, r1
					    dp3_pp r0.y, c11, r1
					    dp3_pp r0.z, c12, r1
					    max_pp r1.xyz, r0, c7.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c9.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.x, c8.y
					    max_pp oC0.xyz, r0, c7.w
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c7, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c8, 0.0671105608, 0.00583714992, 0, 0
					    def c9, 0.0241187997, 0.122817799, 0.844426632, 0.00392156886
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, -1.02170002, 1.9777, 0.0439000018, 0.416666657
					    def c12, 0.265067995, 0.670234263, 0.0640915707, 52.9829178
					    def c13, 2.56509995, -1.16649997, -0.398600012, 0
					    def c14, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c8, c8.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c12.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s2
					    rcp r0.y, r1.x
					    mul_pp r0.y, r0.y, c3.x
					    min_pp r1.x, r0.y, c5.x
					    max_pp r0.y, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r2.xyz, r1, c6.x, c6.y
					    mad_pp r2.xyz, r1, r2, c6.z
					    mul_pp r1.xyz, r1, r2
					    mov_pp oC0.w, r1.w
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    mul_pp r0.yzw, r0, c1.x
					    dp3_pp r1.x, c7, r0.yzww
					    dp3_pp r1.z, c9, r0.yzww
					    dp3_pp r1.y, c12, r0.yzww
					    dp3_pp r0.y, c6.w, r1
					    rcp r0.y, r0.y
					    mad_pp r0.z, r1.x, -r0.y, c6.w
					    mul_pp r1.xz, r0.y, r1.xyyw
					    mad_pp r0.y, r1.y, -r0.y, r0.z
					    mul_pp r2.x, r1.y, c2.x
					    mov_pp r2.y, c7.w
					    texld_pp r2, r2, s1
					    mul_pp r0.y, r0.y, r2.x
					    rcp r0.z, r1.z
					    mul_pp r0.w, r1.x, r2.x
					    mov_pp r1.y, r2.x
					    mul_pp r1.xz, r0.z, r0.wyyw
					    dp3_pp r2.x, c13, r1
					    dp3_pp r2.y, c11, r1
					    dp3_pp r2.z, c14, r1
					    mad_pp r0.xyz, r0.x, -c9.w, r2
					    max_pp r1.xyz, r0, c13.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c11.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c10.x, c10.y
					    max_pp oC0.xyz, r0, c13.w
					
					// approximately 50 instruction slots used (3 texture, 47 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat3.x = _MiddleGrey / u_xlat1.x;
					    u_xlat3.x = min(u_xlat3.x, _AdaptationMax);
					    u_xlat3.x = max(u_xlat3.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat3.x = _MiddleGrey / u_xlat1.x;
					    u_xlat3.x = min(u_xlat3.x, _AdaptationMax);
					    u_xlat3.x = max(u_xlat3.x, _AdaptationMin);
					    u_xlat6.xy = vs_TEXCOORD0.xy;
					    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat3.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat3.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat3.xyz);
					    u_xlat3.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat3.xy = u_xlat1.xy / u_xlat3.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat9 = (-u_xlat3.x) + 1.0;
					    u_xlat3.z = (-u_xlat3.y) + u_xlat9;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat3.xz = u_xlat3.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat3.xz / u_xlat3.yy;
					    u_xlat2.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    u_xlat2.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    u_xlat2.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _LutParams      c2       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//   _LutTex         s2       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c4, 1, 0, 1.05499995, -0.0549999997
					    def c5, 0.0241187997, 0.122817799, 0.844426632, 0.416666657
					    def c6, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c7, 0.265067995, 0.670234263, 0.0640915707, 0
					    def c8, 2.56509995, -1.16649997, -0.398600012, 0
					    def c9, -1.02170002, 1.9777, 0.0439000018, 0
					    def c10, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    dp3_pp r1.z, c5, r0
					    dp3_pp r1.x, c6, r0
					    dp3_pp r1.y, c7, r0
					    dp3_pp r0.x, c3.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c3.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c6.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c8, r1
					    dp3_pp r0.y, c9, r1
					    dp3_pp r0.z, c10, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c6.w
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c4.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    max_pp r0.xyz, r1, c7.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c5.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c4.z, c4.w
					    max_pp oC0.xyz, r0, c7.w
					
					// approximately 48 instruction slots used (4 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _LutParams         c3       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//   _LutTex            s2       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c5, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c6, 1, 0, 0.0671105608, 0.00583714992
					    def c7, 0.0241187997, 0.122817799, 0.844426632, 0.00392156886
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    def c9, -1.02170002, 1.9777, 0.0439000018, 0.416666657
					    def c10, 0.265067995, 0.670234263, 0.0640915707, 52.9829178
					    def c11, 2.56509995, -1.16649997, -0.398600012, 0
					    def c12, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mad_pp r1.xyz, r0, r1, c4.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c1.x
					    dp3_pp r1.z, c7, r0
					    dp3_pp r1.x, c5, r0
					    dp3_pp r1.y, c10, r0
					    dp3_pp r0.x, c4.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c4.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c2.x
					    mov_pp r1.y, c5.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c11, r1
					    dp3_pp r0.y, c9, r1
					    dp3_pp r0.z, c12, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c3.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c3.z, -r0.w
					    mov r2.xy, c3
					    mul_pp r2.xz, r2.xyyw, c5.w
					    mad_pp r3.yz, r1.xzww, c3.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c3.y, r3.y
					    mad_pp r1.yz, r2.y, c6.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c3.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c6.zwzw, c6.y
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c10.w
					    frc_pp r0.x, r0.x
					    mad_pp r0.xyz, r0.x, -c7.w, r1
					    max_pp r1.xyz, r0, c11.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c9.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.x, c8.y
					    max_pp oC0.xyz, r0, c11.w
					
					// approximately 57 instruction slots used (4 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _Exposure       c0       1
					//   _ToneCurveRange c1       1
					//   _LutParams      c2       1
					//   _MiddleGrey     c3       1
					//   _AdaptationMin  c4       1
					//   _AdaptationMax  c5       1
					//   _MainTex        s0       1
					//   _ToneCurve      s1       1
					//   _LutTex         s2       1
					//   _LumTex         s3       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c7, 1, 0, 1.05499995, -0.0549999997
					    def c8, 0.0241187997, 0.122817799, 0.844426632, 0.416666657
					    def c9, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c10, 0.265067995, 0.670234263, 0.0640915707, 0
					    def c11, 2.56509995, -1.16649997, -0.398600012, 0
					    def c12, -1.02170002, 1.9777, 0.0439000018, 0
					    def c13, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s3
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c6.x, c6.y
					    mad_pp r0.yzw, r1.xxyz, r0, c6.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    dp3_pp r1.x, c9, r0
					    dp3_pp r1.z, c8, r0
					    dp3_pp r1.y, c10, r0
					    dp3_pp r0.x, c6.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c6.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c1.x
					    mov_pp r1.y, c9.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c11, r1
					    dp3_pp r0.y, c12, r1
					    dp3_pp r0.z, c13, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c9.w
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c7.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    max_pp r0.xyz, r1, c10.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c8.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.z, c7.w
					    max_pp oC0.xyz, r0, c10.w
					
					// approximately 54 instruction slots used (5 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   sampler2D _ToneCurve;
					//   float _ToneCurveRange;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _ToneCurveRange    c2       1
					//   _LutParams         c3       1
					//   _MiddleGrey        c4       1
					//   _AdaptationMin     c5       1
					//   _AdaptationMax     c6       1
					//   _MainTex           s0       1
					//   _ToneCurve         s1       1
					//   _LutTex            s2       1
					//   _LumTex            s3       1
					//
					
					    ps_3_0
					    def c7, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c8, 0.514136374, 0.323878586, 0.160363764, 0.5
					    def c9, 1, 0, 0.0671105608, 0.00583714992
					    def c10, 0.0241187997, 0.122817799, 0.844426632, 0.00392156886
					    def c11, 1.05499995, -0.0549999997, 0, 0
					    def c12, -1.02170002, 1.9777, 0.0439000018, 0.416666657
					    def c13, 0.265067995, 0.670234263, 0.0640915707, 52.9829178
					    def c14, 2.56509995, -1.16649997, -0.398600012, 0
					    def c15, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s3
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c7.x, c7.y
					    mad_pp r0.yzw, r1.xxyz, r0, c7.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c1.x
					    dp3_pp r1.x, c8, r0
					    dp3_pp r1.z, c10, r0
					    dp3_pp r1.y, c13, r0
					    dp3_pp r0.x, c7.w, r1
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, -r0.x, c7.w
					    mul_pp r0.zw, r0.x, r1.xyxy
					    mad_pp r0.x, r1.y, -r0.x, r0.y
					    mul_pp r1.x, r1.y, c2.x
					    mov_pp r1.y, c8.w
					    texld_pp r1, r1, s1
					    rcp r0.y, r0.w
					    mul_pp r0.xz, r0, r1.x
					    mov_pp r1.y, r1.x
					    mul_pp r1.xz, r0.y, r0.zyxw
					    dp3_pp r0.x, c14, r1
					    dp3_pp r0.y, c12, r1
					    dp3_pp r0.z, c15, r1
					    mov_sat_pp r1.xyz, r0.zxyw
					    mul_pp r1.yzw, r1.xxyz, c3.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c3.z, -r0.w
					    mov r2.xy, c3
					    mul_pp r2.xz, r2.xyyw, c8.w
					    mad_pp r3.yz, r1.xzww, c3.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c3.y, r3.y
					    mad_pp r1.yz, r2.y, c9.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s2
					    texld r3, r1.yzzw, s2
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c3.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c9.zwzw, c9.y
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c13.w
					    frc_pp r0.x, r0.x
					    mad_pp r0.xyz, r0.x, -c10.w, r1
					    max_pp r1.xyz, r0, c14.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c12.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c11.x, c11.y
					    max_pp oC0.xyz, r0, c14.w
					
					// approximately 63 instruction slots used (5 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						float _ToneCurveRange;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _ToneCurve;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _ToneCurveRange;
					    u_xlat8 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat8;
					    u_xlat1.y = float(0.5);
					    u_xlat9.y = float(0.0);
					    u_xlat2 = texture(_ToneCurve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat2.yy;
					    u_xlat2.xz = u_xlat0.xz / u_xlat0.yy;
					    u_xlat0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat2.xyz);
					    u_xlat0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat2.xyz);
					    u_xlat0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat1.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat1.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat9.x = _LutParams.y;
					    u_xlat1.xy = u_xlat9.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 492259
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c2, 0.0599999987, -0.0666666701, 1.37906432, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.x, c0.x, c0.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r1.xyz, r0, c1.x, c1.y
					    mad_pp r1.xyz, r0, r1, c1.z
					    mad_pp r2.xyz, r0, c1.x, c1.w
					    mad_pp r0.xyz, r0, r2, c2.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c2.y
					    mul_pp oC0.xyz, r0, c2.z
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.x = _Exposure + _Exposure;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = _Exposure + _Exposure;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c3, 0.0599999987, -0.0666666701, 52.9829178, 0.00392156886
					    def c4, 0.0671105608, 0.00583714992, 0, 1.37906432
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4, c4.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.w
					    add_pp r0.y, c1.x, c1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mad_pp r1.xyz, r0.yzww, c2.x, c2.y
					    mad_pp r1.xyz, r0.yzww, r1, c2.z
					    mad_pp r2.xyz, r0.yzww, c2.x, c2.w
					    mad_pp r0.yzw, r0, r2.xxyz, c3.x
					    rcp r2.x, r0.y
					    rcp r2.y, r0.z
					    rcp r2.z, r0.w
					    mad_pp r0.yzw, r1.xxyz, r2.xxyz, c3.y
					    mad_pp oC0.xyz, r0.yzww, c4.w, -r0.x
					
					// approximately 22 instruction slots used (1 texture, 21 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat3.x = _Exposure + _Exposure;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat3.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-u_xlat0.xxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.x = _Exposure + _Exposure;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat3.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-u_xlat0.xxx);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c5, 0.0599999987, -0.0666666701, 1.37906432, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    add_pp r0.w, c0.x, c0.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mad_pp r1.xyz, r0, r1, c4.z
					    mad_pp r2.xyz, r0, c4.x, c4.w
					    mad_pp r0.xyz, r0, r2, c5.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c5.y
					    mul_pp oC0.xyz, r0, c5.z
					
					// approximately 19 instruction slots used (2 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c6, 0.0599999987, -0.0666666701, 52.9829178, 0.00392156886
					    def c7, 0.0671105608, 0.00583714992, 0, 1.37906432
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    add_pp r0.w, c1.x, c1.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c5.x, c5.y
					    mad_pp r1.xyz, r0, r1, c5.z
					    mad_pp r2.xyz, r0, c5.x, c5.w
					    mad_pp r0.xyz, r0, r2, c6.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c6.y
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c7, c7.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.w
					    mad_pp oC0.xyz, r0, c7.w, -r0.w
					
					// approximately 28 instruction slots used (2 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-vec3(u_xlat9));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-vec3(u_xlat9));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c3, 0.0599999987, -0.0666666701, 1.37906432, 0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.x, c0.x, c0.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mad_pp r2.xyz, r0, c2.x, c2.w
					    mad_pp r0.xyz, r0, r2, c3.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c3.y
					    mul_pp r1.xyz, r0, c3.z
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c1.z, -r0.w
					    mov r3.w, c2.w
					    mul_pp r2.xy, r3.w, c1
					    mad_pp r2.yz, r2.xzww, c1.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c1.y, r2.y
					    mov r2.y, c1.y
					    mad_pp r2.yw, r2.y, c4.xxzy, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c3.z, r4
					    mad_pp oC0.xyz, c1.w, r0, r1
					
					// approximately 29 instruction slots used (3 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat10 = _Exposure + _Exposure;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat10 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat10 * _LutParams.y + u_xlat4.y;
					    u_xlat10 = u_xlat3.x * _LutParams.z + (-u_xlat10);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat0.xyw + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = _Exposure + _Exposure;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c4, 0.0599999987, -0.0666666701, 1.37906432, 52.9829178
					    def c5, 1, 0, 0.0671105608, 0.00583714992
					    def c6, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.x, c1.x, c1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mad_pp r2.xyz, r0, c3.x, c3.w
					    mad_pp r0.xyz, r0, r2, c4.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c4.y
					    mul_pp r1.xyz, r0, c4.z
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c2.z, -r0.w
					    mov r3.w, c3.w
					    mul_pp r2.xy, r3.w, c2
					    mad_pp r2.yz, r2.xzww, c2.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c2.y, r2.y
					    mov r2.y, c2.y
					    mad_pp r2.yw, r2.y, c5.xxzy, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c4.z, r4
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c5.zwzw, c5.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c4.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c6.x, r0
					
					// approximately 38 instruction slots used (3 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat10 = _Exposure + _Exposure;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat3.xyz = u_xlat2.zxy;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat10 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat10 * _LutParams.y + u_xlat4.y;
					    u_xlat10 = u_xlat3.x * _LutParams.z + (-u_xlat10);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat0.xyw + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat15 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat15 = fract(u_xlat15);
					    u_xlat15 = u_xlat15 * 52.9829178;
					    u_xlat15 = fract(u_xlat15);
					    SV_Target0.xyz = (-vec3(u_xlat15)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = _Exposure + _Exposure;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c6, 0.0599999987, -0.0666666701, 1.37906432, 0
					    def c7, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    add_pp r0.w, c0.x, c0.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c5.x, c5.y
					    mad_pp r1.xyz, r0, r1, c5.z
					    mad_pp r2.xyz, r0, c5.x, c5.w
					    mad_pp r0.xyz, r0, r2, c6.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c6.y
					    mul_pp r1.xyz, r0, c6.z
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c1.z, -r0.w
					    mov r3.w, c5.w
					    mul_pp r2.xy, r3.w, c1
					    mad_pp r2.yz, r2.xzww, c1.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c1.y, r2.y
					    mov r2.y, c1.y
					    mad_pp r2.yw, r2.y, c7.xxzy, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c6.z, r4
					    mad_pp oC0.xyz, c1.w, r0, r1
					
					// approximately 35 instruction slots used (4 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 0.150000006, 0.0500000007, 0.00400000019, 0.5
					    def c7, 0.0599999987, -0.0666666701, 1.37906432, 52.9829178
					    def c8, 1, 0, 0.0671105608, 0.00583714992
					    def c9, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    add_pp r0.w, c1.x, c1.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c6.x, c6.y
					    mad_pp r1.xyz, r0, r1, c6.z
					    mad_pp r2.xyz, r0, c6.x, c6.w
					    mad_pp r0.xyz, r0, r2, c7.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c7.y
					    mul_pp r1.xyz, r0, c7.z
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c2.z, -r0.w
					    mov r3.w, c6.w
					    mul_pp r2.xy, r3.w, c2
					    mad_pp r2.yz, r2.xzww, c2.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c2.y, r2.y
					    mov r2.y, c2.y
					    mad_pp r2.yw, r2.y, c8.xxzy, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c7.z, r4
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c8.zwzw, c8.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c9.x, r0
					
					// approximately 44 instruction slots used (4 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c2, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c3, -0.0666666701, 1.37906432, 0, 0.416666657
					    def c4, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c1.x, c1.y
					    mad_pp r1.xyz, r0, r1, c1.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add_pp r0.w, c0.x, c0.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c1.w
					    mad_pp r2.xyz, r0, c2.x, c2.z
					    mad_pp r0.xyz, r0, r2, c2.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c3.x
					    mul_pp r0.xyz, r0, c3.y
					    max_pp r1.xyz, r0, c3.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c3.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c4.x, c4.y
					    max_pp oC0.xyz, r0, c3.z
					
					// approximately 26 instruction slots used (1 texture, 25 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c3, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c4, -0.0666666701, 0.0671105608, 0.00583714992, 0
					    def c5, 52.9829178, 0.00392156886, 1.37906432, 0.416666657
					    def c6, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4.yzzw, c4.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.x
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.y
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c2.x, c2.y
					    mad_pp r0.yzw, r1.xxyz, r0, c2.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    add_pp r1.x, c1.x, c1.x
					    mul_pp r0.yzw, r0, r1.x
					    mad_pp r1.xyz, r0.yzww, c3.x, c3.y
					    mad_pp r1.xyz, r0.yzww, r1, c2.w
					    mad_pp r2.xyz, r0.yzww, c3.x, c3.z
					    mad_pp r0.yzw, r0, r2.xxyz, c3.w
					    rcp r2.x, r0.y
					    rcp r2.y, r0.z
					    rcp r2.z, r0.w
					    mad_pp r0.yzw, r1.xxyz, r2.xxyz, c4.x
					    mad_pp r0.xyz, r0.yzww, c5.z, -r0.x
					    max_pp r1.xyz, r0, c4.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c5.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.x, c6.y
					    max_pp oC0.xyz, r0, c4.w
					
					// approximately 35 instruction slots used (1 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.x = _Exposure + _Exposure;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-u_xlat0.xxx);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-vec3(u_xlat9));
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c5, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c6, -0.0666666701, 1.37906432, 0, 0.416666657
					    def c7, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c4.x, c4.y
					    mad_pp r0.yzw, r1.xxyz, r0, c4.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    add_pp r0.w, c0.x, c0.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c5.x, c5.y
					    mad_pp r1.xyz, r0, r1, c4.w
					    mad_pp r2.xyz, r0, c5.x, c5.z
					    mad_pp r0.xyz, r0, r2, c5.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c6.x
					    mul_pp r0.xyz, r0, c6.y
					    max_pp r1.xyz, r0, c6.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.x, c7.y
					    max_pp oC0.xyz, r0, c6.z
					
					// approximately 32 instruction slots used (2 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c6, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c7, -0.0666666701, 0.0671105608, 0.00583714992, 0
					    def c8, 52.9829178, 0.00392156886, 1.37906432, 0.416666657
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    add_pp r0.w, c1.x, c1.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c6.x, c6.y
					    mad_pp r1.xyz, r0, r1, c5.w
					    mad_pp r2.xyz, r0, c6.x, c6.z
					    mad_pp r0.xyz, r0, r2, c6.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c7.x
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c7.yzzw, c7.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.x
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.y
					    mad_pp r0.xyz, r0, c8.z, -r0.w
					    max_pp r1.xyz, r0, c7.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c8.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c9.x, c9.y
					    max_pp oC0.xyz, r0, c7.w
					
					// approximately 41 instruction slots used (2 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-vec3(u_xlat9));
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat9 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432) + (-vec3(u_xlat9));
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c3, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c4, -0.0666666701, 1.37906432, 1, 0
					    def c5, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add_pp r0.w, c0.x, c0.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c2.w
					    mad_pp r2.xyz, r0, c3.x, c3.z
					    mad_pp r0.xyz, r0, r2, c3.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c4.x
					    mul_pp r1.xyz, r0, c4.y
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c1.z, -r0.w
					    mov r3.z, c3.z
					    mul_pp r2.xy, r3.z, c1
					    mad_pp r2.yz, r2.xzww, c1.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c1.y, r2.y
					    mov r3.zw, c4
					    mad_pp r2.yw, c1.y, r3.xzzw, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c4.y, r4
					    mad_pp r0.xyz, c1.w, r0, r1
					    max_pp r1.xyz, r0, c4.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c5.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.y, c5.z
					    max_pp oC0.xyz, r0, c4.w
					
					// approximately 42 instruction slots used (3 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c4, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c5, -0.0666666701, 1.37906432, 1, 0
					    def c6, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c7, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add_pp r0.w, c1.x, c1.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mad_pp r1.xyz, r0, r1, c3.w
					    mad_pp r2.xyz, r0, c4.x, c4.z
					    mad_pp r0.xyz, r0, r2, c4.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c5.x
					    mul_pp r1.xyz, r0, c5.y
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c2.z, -r0.w
					    mov r3.z, c4.z
					    mul_pp r2.xy, r3.z, c2
					    mad_pp r2.yz, r2.xzww, c2.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c2.y, r2.y
					    mov r3.zw, c5
					    mad_pp r2.yw, c2.y, r3.xzzw, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c5.y, r4
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c6, c6.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c7.x, r0
					    max_pp r1.xyz, r0, c5.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.z, c7.w
					    max_pp oC0.xyz, r0, c5.w
					
					// approximately 51 instruction slots used (3 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c6, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c7, -0.0666666701, 1.37906432, 1, 0
					    def c8, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    add_pp r0.w, c0.x, c0.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c6.x, c6.y
					    mad_pp r1.xyz, r0, r1, c5.w
					    mad_pp r2.xyz, r0, c6.x, c6.z
					    mad_pp r0.xyz, r0, r2, c6.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c7.x
					    mul_pp r1.xyz, r0, c7.y
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c1.z, -r0.w
					    mov r3.z, c6.z
					    mul_pp r2.xy, r3.z, c1
					    mad_pp r2.yz, r2.xzww, c1.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c1.y, r2.y
					    mov r3.zw, c7
					    mad_pp r2.yw, c1.y, r3.xzzw, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c7.y, r4
					    mad_pp r0.xyz, c1.w, r0, r1
					    max_pp r1.xyz, r0, c7.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c8.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.y, c8.z
					    max_pp oC0.xyz, r0, c7.w
					
					// approximately 48 instruction slots used (4 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 0.00400000019
					    def c7, 0.150000006, 0.0500000007, 0.5, 0.0599999987
					    def c8, -0.0666666701, 1.37906432, 1, 0
					    def c9, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c10, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c6.x, c6.y
					    mad_pp r0.yzw, r1.xxyz, r0, c6.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    add_pp r0.w, c1.x, c1.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r1.xyz, r0, c7.x, c7.y
					    mad_pp r1.xyz, r0, r1, c6.w
					    mad_pp r2.xyz, r0, c7.x, c7.z
					    mad_pp r0.xyz, r0, r2, c7.w
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad_pp r0.xyz, r1, r2, c8.x
					    mul_pp r1.xyz, r0, c8.y
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c2.z, -r0.w
					    mov r3.z, c7.z
					    mul_pp r2.xy, r3.z, c2
					    mad_pp r2.yz, r2.xzww, c2.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c2.y, r2.y
					    mov r3.zw, c8
					    mad_pp r2.yw, c2.y, r3.xzzw, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -c8.y, r4
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c9, c9.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c9.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c10.x, r0
					    max_pp r1.xyz, r0, c8.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c10.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c10.z, c10.w
					    max_pp oC0.xyz, r0, c8.w
					
					// approximately 57 instruction slots used (4 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = _Exposure + _Exposure;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.150000006, 0.150000006, 0.150000006) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    u_xlat2.xyz = u_xlat1.zxy;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(1.37906432, 1.37906432, 1.37906432) + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 576683
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, -0.00400000019, 0, 6.19999981, 0.5
					    def c2, 6.19999981, 1.70000005, 0.0599999987, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mov r1.x, c1.x
					    mad_pp r0.xyz, r0, c0.x, r1.x
					    mov_pp oC0.w, r0.w
					    max_pp r1.xyz, r0, c1.y
					    mad_pp r0.xyz, r1, c1.z, c1.w
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c2.x, c2.y
					    mad_pp r1.xyz, r1, r2, c2.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp oC0.xyz, r0, r0
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, -0.00400000019, 0, 6.19999981, 0.5
					    def c3, 6.19999981, 1.70000005, 0.0599999987, 52.9829178
					    def c4, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4, c4.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.w
					    texld_pp r1, v0, s0
					    mov r2.x, c2.x
					    mad_pp r0.yzw, r1.xxyz, c1.x, r2.x
					    mov_pp oC0.w, r1.w
					    max_pp r1.xyz, r0.yzww, c2.y
					    mad_pp r0.yzw, r1.xxyz, c2.z, c2.w
					    mul_pp r0.yzw, r0, r1.xxyz
					    mad_pp r2.xyz, r1, c3.x, c3.y
					    mad_pp r1.xyz, r1, r2, c3.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.yzw, r0, r2.xxyz
					    mad_pp oC0.xyz, r0.yzww, r0.yzww, -r0.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat3.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat3.xyz + (-u_xlat0.xxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat3.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat3.xyz + (-u_xlat0.xxx);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, -0.00400000019, 0, 6.19999981, 0.5
					    def c5, 6.19999981, 1.70000005, 0.0599999987, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mov r1.x, c4.x
					    mad_pp r0.xyz, r0, c0.x, r1.x
					    max_pp r1.xyz, r0, c4.y
					    mad_pp r0.xyz, r1, c4.z, c4.w
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c5.x, c5.y
					    mad_pp r1.xyz, r1, r2, c5.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp oC0.xyz, r0, r0
					
					// approximately 20 instruction slots used (2 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, -0.00400000019, 0, 6.19999981, 0.5
					    def c6, 6.19999981, 1.70000005, 0.0599999987, 52.9829178
					    def c7, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mov r1.x, c5.x
					    mad_pp r0.xyz, r0, c1.x, r1.x
					    max_pp r1.xyz, r0, c5.y
					    mad_pp r0.xyz, r1, c5.z, c5.w
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c6.x, c6.y
					    mad_pp r1.xyz, r1, r2, c6.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c7, c7.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.w
					    mad_pp oC0.xyz, r0, r0, -r0.w
					
					// approximately 29 instruction slots used (2 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-vec3(u_xlat9));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-vec3(u_xlat9));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, -0.00400000019, 0, 6.19999981, 0.5
					    def c3, 6.19999981, 1.70000005, 0.0599999987, 0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mov r1.xw, c2
					    mad_pp r0.xyz, r0, c0.x, r1.x
					    mov_pp oC0.w, r0.w
					    max_pp r1.xyz, r0, c2.y
					    mad_pp r0.xyz, r1, c2.z, c2.w
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c3.x, c3.y
					    mad_pp r1.xyz, r1, r2, c3.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r2.x, r2.x, c1.z, -r0.w
					    mul_pp r3.xy, r1.w, c1
					    mad_pp r3.yz, r2.xzww, c1.xxyw, r3.xxyw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mov r2.y, c1.y
					    mad_pp r2.yz, r2.y, c4.xxyw, r3.xxzw
					    texld r3, r3.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0, r5
					    mad_pp oC0.xyz, c1.w, r0, r1
					
					// approximately 29 instruction slots used (3 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat1.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat1.xyz;
					    u_xlat3.xyz = min(u_xlat2.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat10 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat10 * _LutParams.y + u_xlat4.y;
					    u_xlat10 = u_xlat3.x * _LutParams.z + (-u_xlat10);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat0.xyw + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, -0.00400000019, 0, 6.19999981, 0.5
					    def c4, 6.19999981, 1.70000005, 0.0599999987, 52.9829178
					    def c5, 1, 0, 0.0671105608, 0.00583714992
					    def c6, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mov r1.xw, c3
					    mad_pp r0.xyz, r0, c1.x, r1.x
					    mov_pp oC0.w, r0.w
					    max_pp r1.xyz, r0, c3.y
					    mad_pp r0.xyz, r1, c3.z, c3.w
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c4.x, c4.y
					    mad_pp r1.xyz, r1, r2, c4.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r2.x, r2.x, c2.z, -r0.w
					    mul_pp r3.xy, r1.w, c2
					    mad_pp r3.yz, r2.xzww, c2.xxyw, r3.xxyw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mov r2.y, c2.y
					    mad_pp r2.yz, r2.y, c5.xxyw, r3.xxzw
					    texld r3, r3.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0, r5
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c5.zwzw, c5.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c4.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c6.x, r0
					
					// approximately 38 instruction slots used (3 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat8;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat1.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat1.xyz;
					    u_xlat3.xyz = min(u_xlat2.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat8.xyz = u_xlat3.xyz * _LutParams.zzz;
					    u_xlat10 = floor(u_xlat8.x);
					    u_xlat4.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat4.yz = u_xlat8.yz * _LutParams.xy + u_xlat4.xy;
					    u_xlat4.x = u_xlat10 * _LutParams.y + u_xlat4.y;
					    u_xlat10 = u_xlat3.x * _LutParams.z + (-u_xlat10);
					    u_xlat0.xy = u_xlat0.xy + u_xlat4.xz;
					    u_xlat3 = texture(_LutTex, u_xlat4.xz);
					    u_xlat4 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat0.xyw + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat15 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat15 = fract(u_xlat15);
					    u_xlat15 = u_xlat15 * 52.9829178;
					    u_xlat15 = fract(u_xlat15);
					    SV_Target0.xyz = (-vec3(u_xlat15)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, -0.00400000019, 0, 6.19999981, 0.5
					    def c6, 6.19999981, 1.70000005, 0.0599999987, 0
					    def c7, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mov r1.xw, c5
					    mad_pp r0.xyz, r0, c0.x, r1.x
					    max_pp r1.xyz, r0, c5.y
					    mad_pp r0.xyz, r1, c5.z, c5.w
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c6.x, c6.y
					    mad_pp r1.xyz, r1, r2, c6.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r2.x, r2.x, c1.z, -r0.w
					    mul_pp r3.xy, r1.w, c1
					    mad_pp r3.yz, r2.xzww, c1.xxyw, r3.xxyw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mov r2.y, c1.y
					    mad_pp r2.yz, r2.y, c7.xxyw, r3.xxzw
					    texld r3, r3.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0, r5
					    mad_pp oC0.xyz, c1.w, r0, r1
					
					// approximately 35 instruction slots used (4 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, -0.00400000019, 0, 6.19999981, 0.5
					    def c7, 6.19999981, 1.70000005, 0.0599999987, 52.9829178
					    def c8, 1, 0, 0.0671105608, 0.00583714992
					    def c9, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mov r1.xw, c6
					    mad_pp r0.xyz, r0, c1.x, r1.x
					    max_pp r1.xyz, r0, c6.y
					    mad_pp r0.xyz, r1, c6.z, c6.w
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c7.x, c7.y
					    mad_pp r1.xyz, r1, r2, c7.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r2.x, r2.x, c2.z, -r0.w
					    mul_pp r3.xy, r1.w, c2
					    mad_pp r3.yz, r2.xzww, c2.xxyw, r3.xxyw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mov r2.y, c2.y
					    mad_pp r2.yz, r2.y, c8.xxyw, r3.xxzw
					    texld r3, r3.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0, r5
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c8.zwzw, c8.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c9.x, r0
					
					// approximately 44 instruction slots used (4 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c2, 0, 6.19999981, 0.5, 1.70000005
					    def c3, 0.0599999987, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c1.x, c1.y
					    mad_pp r1.xyz, r0, r1, c1.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mov r0.w, c1.w
					    mad_pp r0.xyz, r0, c0.x, r0.w
					    max_pp r1.xyz, r0, c2.x
					    mad_pp r0.xyz, r1, c2.y, c2.z
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c2.y, c2.w
					    mad_pp r1.xyz, r1, r2, c3.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r0.xyz, r0, r0
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c3.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c3.z, c3.w
					    max_pp oC0.xyz, r0, c2.x
					
					// approximately 26 instruction slots used (1 texture, 25 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c3, 0, 6.19999981, 0.5, 1.70000005
					    def c4, 0.0599999987, 0.0671105608, 0.00583714992, 0
					    def c5, 52.9829178, 0.00392156886, 0.416666657, 0
					    def c6, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4.yzzw, c4.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.x
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.y
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c2.x, c2.y
					    mad_pp r0.yzw, r1.xxyz, r0, c2.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mov r1.w, c2.w
					    mad_pp r0.yzw, r0, c1.x, r1.w
					    max_pp r1.xyz, r0.yzww, c3.x
					    mad_pp r0.yzw, r1.xxyz, c3.y, c3.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mad_pp r2.xyz, r1, c3.y, c3.w
					    mad_pp r1.xyz, r1, r2, c4.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.yzw, r0, r2.xxyz
					    mad_pp r0.xyz, r0.yzww, r0.yzww, -r0.x
					    max_pp r1.xyz, r0, c3.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c5.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.x, c6.y
					    max_pp oC0.xyz, r0, c3.x
					
					// approximately 36 instruction slots used (1 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00392156886;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat3.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat3.xyz = u_xlat1.xyz / u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat3.xyz + (-u_xlat0.xxx);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-vec3(u_xlat9));
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c5, 0, 6.19999981, 0.5, 1.70000005
					    def c6, 0.0599999987, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c4.x, c4.y
					    mad_pp r0.yzw, r1.xxyz, r0, c4.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mov r0.w, c4.w
					    mad_pp r0.xyz, r0, c0.x, r0.w
					    max_pp r1.xyz, r0, c5.x
					    mad_pp r0.xyz, r1, c5.y, c5.z
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c5.y, c5.w
					    mad_pp r1.xyz, r1, r2, c6.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r0.xyz, r0, r0
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c6.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.z, c6.w
					    max_pp oC0.xyz, r0, c5.x
					
					// approximately 32 instruction slots used (2 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c6, 0, 6.19999981, 0.5, 1.70000005
					    def c7, 0.0599999987, 0.0671105608, 0.00583714992, 0
					    def c8, 52.9829178, 0.00392156886, 0.416666657, 0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mov r0.w, c5.w
					    mad_pp r0.xyz, r0, c1.x, r0.w
					    max_pp r1.xyz, r0, c6.x
					    mad_pp r0.xyz, r1, c6.y, c6.z
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c6.y, c6.w
					    mad_pp r1.xyz, r1, r2, c7.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c7.yzzw, c7.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.x
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.y
					    mad_pp r0.xyz, r0, r0, -r0.w
					    max_pp r1.xyz, r0, c6.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c8.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c9.x, c9.y
					    max_pp oC0.xyz, r0, c6.x
					
					// approximately 42 instruction slots used (2 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-vec3(u_xlat9));
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00392156886;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-vec3(u_xlat9));
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c3, 0, 6.19999981, 0.5, 1.70000005
					    def c4, 0.0599999987, 1, 0, 0.416666657
					    def c5, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mov r0.w, c2.w
					    mad_pp r0.xyz, r0, c0.x, r0.w
					    max_pp r1.xyz, r0, c3.x
					    mad_pp r0.xyz, r1, c3.y, c3.z
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c3.y, c3.w
					    mad_pp r1.xyz, r1, r2, c4.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c1.z, -r0.w
					    mov r3.z, c3.z
					    mul_pp r2.xy, r3.z, c1
					    mad_pp r2.yz, r2.xzww, c1.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c1.y, r2.y
					    mov r2.y, c1.y
					    mad_pp r2.yw, r2.y, c4.xyzz, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -r0, r4
					    mad_pp r0.xyz, c1.w, r0, r1
					    max_pp r1.xyz, r0, c3.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c4.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.x, c5.y
					    max_pp oC0.xyz, r0, c3.x
					
					// approximately 43 instruction slots used (3 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c4, 0, 6.19999981, 0.5, 1.70000005
					    def c5, 0.0599999987, 1, 0, 52.9829178
					    def c6, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c7, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mov r0.w, c3.w
					    mad_pp r0.xyz, r0, c1.x, r0.w
					    max_pp r1.xyz, r0, c4.x
					    mad_pp r0.xyz, r1, c4.y, c4.z
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c4.y, c4.w
					    mad_pp r1.xyz, r1, r2, c5.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c2.z, -r0.w
					    mov r3.z, c4.z
					    mul_pp r2.xy, r3.z, c2
					    mad_pp r2.yz, r2.xzww, c2.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c2.y, r2.y
					    mov r2.y, c2.y
					    mad_pp r2.yw, r2.y, c5.xyzz, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -r0, r4
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c6, c6.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c5.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c6.w, r0
					    max_pp r1.xyz, r0, c4.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.y, c7.z
					    max_pp oC0.xyz, r0, c4.x
					
					// approximately 52 instruction slots used (3 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c6, 0, 6.19999981, 0.5, 1.70000005
					    def c7, 0.0599999987, 1, 0, 0.416666657
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mov r0.w, c5.w
					    mad_pp r0.xyz, r0, c0.x, r0.w
					    max_pp r1.xyz, r0, c6.x
					    mad_pp r0.xyz, r1, c6.y, c6.z
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c6.y, c6.w
					    mad_pp r1.xyz, r1, r2, c7.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c1.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c1.z, -r0.w
					    mov r3.z, c6.z
					    mul_pp r2.xy, r3.z, c1
					    mad_pp r2.yz, r2.xzww, c1.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c1.y, r2.y
					    mov r2.y, c1.y
					    mad_pp r2.yw, r2.y, c7.xyzz, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -r0, r4
					    mad_pp r0.xyz, c1.w, r0, r1
					    max_pp r1.xyz, r0, c6.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.x, c8.y
					    max_pp oC0.xyz, r0, c6.x
					
					// approximately 49 instruction slots used (4 texture, 45 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, -0.00400000019
					    def c7, 0, 6.19999981, 0.5, 1.70000005
					    def c8, 0.0599999987, 1, 0, 52.9829178
					    def c9, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c10, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c6.x, c6.y
					    mad_pp r0.yzw, r1.xxyz, r0, c6.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mov r0.w, c6.w
					    mad_pp r0.xyz, r0, c1.x, r0.w
					    max_pp r1.xyz, r0, c7.x
					    mad_pp r0.xyz, r1, c7.y, c7.z
					    mul_pp r0.xyz, r0, r1
					    mad_pp r2.xyz, r1, c7.y, c7.w
					    mad_pp r1.xyz, r1, r2, c8.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    mul_pp r1.xyz, r0, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r0.w, r2.y
					    add_pp r0.w, -r0.w, r2.y
					    mad r1.w, r2.x, c2.z, -r0.w
					    mov r3.z, c7.z
					    mul_pp r2.xy, r3.z, c2
					    mad_pp r2.yz, r2.xzww, c2.xxyw, r2.xxyw
					    mad_pp r2.x, r0.w, c2.y, r2.y
					    mov r2.y, c2.y
					    mad_pp r2.yw, r2.y, c8.xyzz, r2.xxzz
					    texld r3, r2.xzzw, s1
					    texld r2, r2.ywzw, s1
					    lrp_pp r4.xyz, r1.w, r2, r3
					    mad_pp r0.xyz, r0, -r0, r4
					    mad_pp r0.xyz, c2.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c9, c9.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c9.w, r0
					    max_pp r1.xyz, r0, c7.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c10.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c10.y, c10.z
					    max_pp oC0.xyz, r0, c7.x
					
					// approximately 58 instruction slots used (4 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure) + vec3(-0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(6.19999981, 6.19999981, 6.19999981) + vec3(1.70000005, 1.70000005, 1.70000005);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = min(u_xlat1.zxy, vec3(1.0, 1.0, 1.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat12 = floor(u_xlat6.x);
					    u_xlat3.x = u_xlat12 * _LutParams.y + u_xlat3.y;
					    u_xlat12 = u_xlat2.x * _LutParams.z + (-u_xlat12);
					    u_xlat2.x = _LutParams.y;
					    u_xlat2.y = 0.0;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xz;
					    u_xlat3 = texture(_LutTex, u_xlat3.xz);
					    u_xlat2 = texture(_LutTex, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 597836
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0.x
					    mov_pp oC0.w, r0.w
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp oC0.xyz, -r1, c1.x
					
					// approximately 7 instruction slots used (1 texture, 6 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0.0671105608, 0.00583714992, 0
					    def c3, 52.9829178, 0.00392156886, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c2.yzzw, c2.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r1.xxyz, c1.x
					    mov_pp oC0.w, r1.w
					    exp_pp r1.x, -r0.y
					    exp_pp r1.y, -r0.z
					    exp_pp r1.z, -r0.w
					    add_pp r0.yzw, -r1.xxyz, c2.x
					    mad_pp oC0.xyz, r0.x, -c3.y, r0.yzww
					
					// approximately 16 instruction slots used (1 texture, 15 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = exp2((-u_xlat2.xyz));
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = exp2((-u_xlat2.xyz));
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp oC0.xyz, -r1, c4.x
					
					// approximately 13 instruction slots used (2 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, 1, 0.0671105608, 0.00583714992, 0
					    def c6, 52.9829178, 0.00392156886, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c5.yzzw, c5.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c6.x
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s1
					    rcp r0.y, r1.x
					    mul_pp r0.y, r0.y, c2.x
					    min_pp r1.x, r0.y, c4.x
					    max_pp r0.y, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.yzw, r0, c1.x
					    exp_pp r1.x, -r0.y
					    exp_pp r1.y, -r0.z
					    exp_pp r1.z, -r0.w
					    add_pp r0.yzw, -r1.xxyz, c5.x
					    mad_pp oC0.xyz, r0.x, -c6.y, r0.yzww
					
					// approximately 22 instruction slots used (2 texture, 20 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = _MiddleGrey / u_xlat1.x;
					    u_xlat2.x = min(u_xlat2.x, _AdaptationMax);
					    u_xlat2.x = max(u_xlat2.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_Exposure);
					    u_xlat2.xyz = exp2((-u_xlat2.xyz));
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    SV_Target0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0.x
					    mov_pp oC0.w, r0.w
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c2.x
					    max_pp r1.xyz, r0.zxyw, c2.y
					    mul_pp r1.yzw, r1.xxyz, c1.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mov r2.xy, c1
					    mul_pp r2.xz, r2.xyyw, c2.z
					    mad_pp r3.yz, r1.xzww, c1.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad r0.w, r1.x, c1.z, -r0.w
					    mad_pp r1.xy, r2.y, c2, r3.xzzw
					    texld r2, r3.xzzw, s1
					    texld r1, r1, s1
					    lrp_pp r3.xyz, r0.w, r1, r2
					    add_pp r1.xyz, -r0, r3
					    mad_pp oC0.xyz, c1.w, r1, r0
					
					// approximately 22 instruction slots used (3 texture, 19 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8 * _LutParams.y + u_xlat3.y;
					    u_xlat8 = u_xlat2.x * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 0.5, 52.9829178
					    def c4, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c1.x
					    mov_pp oC0.w, r0.w
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c3.x
					    max_pp r1.xyz, r0.zxyw, c3.y
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c3.z
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c3.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4, c4.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.w
					    frc_pp r0.x, r0.x
					    mad_pp oC0.xyz, r0.x, -c4.w, r1
					
					// approximately 30 instruction slots used (3 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8 * _LutParams.y + u_xlat3.y;
					    u_xlat8 = u_xlat2.x * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c5.x
					    max_pp r1.xyz, r0.zxyw, c5.y
					    mul_pp r1.yzw, r1.xxyz, c1.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c1.z, -r0.w
					    mov r2.xy, c1
					    mul_pp r2.xz, r2.xyyw, c5.z
					    mad_pp r3.yz, r1.xzww, c1.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad_pp r1.yz, r2.y, c5.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    add_pp r1.xyz, -r0, r4
					    mad_pp oC0.xyz, c1.w, r1, r0
					
					// approximately 28 instruction slots used (4 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat8 = _MiddleGrey / u_xlat1.x;
					    u_xlat8 = min(u_xlat8, _AdaptationMax);
					    u_xlat8 = max(u_xlat8, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8 * _LutParams.y + u_xlat3.y;
					    u_xlat8 = u_xlat2.x * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = max(u_xlat0.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0, 0.5, 52.9829178
					    def c7, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c1.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c6.x
					    max_pp r1.xyz, r0.zxyw, c6.y
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c6.z
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c6.xxyw, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c7, c7.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c6.w
					    frc_pp r0.x, r0.x
					    mad_pp oC0.xyz, r0.x, -c7.w, r1
					
					// approximately 36 instruction slots used (4 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat8 = _MiddleGrey / u_xlat1.x;
					    u_xlat8 = min(u_xlat8, _AdaptationMax);
					    u_xlat8 = max(u_xlat8, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8 * _LutParams.y + u_xlat3.y;
					    u_xlat8 = u_xlat2.x * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = max(u_xlat0.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c2, 0, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c1.x, c1.y
					    mad_pp r1.xyz, r0, r1, c1.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c1.w
					    max_pp r1.xyz, r0, c2.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c2.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c2.z, c2.w
					    max_pp oC0.xyz, r0, c2.x
					
					// approximately 20 instruction slots used (1 texture, 19 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c3, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c4, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c3, c3.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.w
					    frc_pp r0.x, r0.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c2.x, c2.y
					    mad_pp r0.yzw, r1.xxyz, r0, c2.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.yzw, r0, c1.x
					    exp_pp r1.x, -r0.y
					    exp_pp r1.y, -r0.z
					    exp_pp r1.z, -r0.w
					    add_pp r0.yzw, -r1.xxyz, c2.w
					    mad_pp r0.xyz, r0.x, -c4.x, r0.yzww
					    max_pp r1.xyz, r0, c3.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c4.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c4.z, c4.w
					    max_pp oC0.xyz, r0, c3.z
					
					// approximately 29 instruction slots used (1 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_Exposure);
					    u_xlat2.xyz = exp2((-u_xlat2.xyz));
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 52.9829178;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_Exposure);
					    u_xlat2.xyz = exp2((-u_xlat2.xyz));
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = (-u_xlat0.xxx) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _MiddleGrey    c1       1
					//   _AdaptationMin c2       1
					//   _AdaptationMax c3       1
					//   _MainTex       s0       1
					//   _LumTex        s1       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c5, 0, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, c3.x
					    max_pp r0.x, c2.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c4.x, c4.y
					    mad_pp r0.yzw, r1.xxyz, r0, c4.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c4.w
					    max_pp r1.xyz, r0, c5.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c5.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.z, c5.w
					    max_pp oC0.xyz, r0, c5.x
					
					// approximately 26 instruction slots used (2 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _MiddleGrey        c2       1
					//   _AdaptationMin     c3       1
					//   _AdaptationMax     c4       1
					//   _MainTex           s0       1
					//   _LumTex            s1       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c6, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c7, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c1.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c5.w
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c6, c6.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c7.x, r0
					    max_pp r1.xyz, r0, c6.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.z, c7.w
					    max_pp oC0.xyz, r0, c6.z
					
					// approximately 35 instruction slots used (2 texture, 33 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    u_xlat0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    u_xlat0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Exposure    c0       1
					//   _LutParams   c1       1
					//   _MainTex     s0       1
					//   _LutTex      s1       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c3, 1.05499995, -0.0549999997, 0, 0
					    def c4, 0, 0.5, 1, 0.416666657
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c2.w
					    max_pp r1.xyz, r0.zxyw, c4.x
					    mul_pp r1.yzw, r1.xxyz, c1.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c1.z, -r0.w
					    mov r2.xyz, c4
					    mul_pp r2.yw, r2.y, c1.xxzy
					    mad_pp r3.yz, r1.xzww, c1.xxyw, r2.xyww
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad_pp r1.yz, c1.y, r2.xzxw, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c1.w, r4, r0
					    max_pp r0.xyz, r1, c4.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c4.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c3.x, c3.y
					    max_pp oC0.xyz, r0, c4.x
					
					// approximately 34 instruction slots used (3 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8 * _LutParams.y + u_xlat3.y;
					    u_xlat8 = u_xlat2.x * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c4, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c5, 0, 0.5, 1, 52.9829178
					    def c6, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c1.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c3.w
					    max_pp r1.xyz, r0.zxyw, c5.x
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c5.y
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c5.xzxw, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4, c4.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.w
					    frc_pp r0.x, r0.x
					    mad_pp r0.xyz, r0.x, -c4.w, r1
					    max_pp r1.xyz, r0, c5.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.y, c6.z
					    max_pp oC0.xyz, r0, c5.x
					
					// approximately 43 instruction slots used (3 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8 = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8 * _LutParams.y + u_xlat3.y;
					    u_xlat8 = u_xlat2.x * _LutParams.z + (-u_xlat8);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _LutParams.y;
					    u_xlat0.y = 0.0;
					    u_xlat8.xy = vs_TEXCOORD0.xy;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_Exposure);
					    u_xlat1.xyz = exp2((-u_xlat1.xyz));
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = max(u_xlat1.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat2.xyz * _LutParams.zzz;
					    u_xlat8.x = floor(u_xlat6.x);
					    u_xlat3.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat3.yz = u_xlat6.yz * _LutParams.xy + u_xlat3.xy;
					    u_xlat3.x = u_xlat8.x * _LutParams.y + u_xlat3.y;
					    u_xlat8.x = u_xlat2.x * _LutParams.z + (-u_xlat8.x);
					    u_xlat0.xy = u_xlat0.xy + u_xlat3.xz;
					    u_xlat2 = texture(_LutTex, u_xlat3.xz);
					    u_xlat3 = texture(_LutTex, u_xlat0.xy);
					    u_xlat0.xyw = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xyw + u_xlat2.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Exposure      c0       1
					//   _LutParams     c1       1
					//   _MiddleGrey    c2       1
					//   _AdaptationMin c3       1
					//   _AdaptationMax c4       1
					//   _MainTex       s0       1
					//   _LutTex        s1       1
					//   _LumTex        s2       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c6, 1.05499995, -0.0549999997, 0, 0
					    def c7, 0, 0.5, 1, 0.416666657
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c5.w
					    max_pp r1.xyz, r0.zxyw, c7.x
					    mul_pp r1.yzw, r1.xxyz, c1.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c1.z, -r0.w
					    mov r2.xyz, c7
					    mul_pp r2.yw, r2.y, c1.xxzy
					    mad_pp r3.yz, r1.xzww, c1.xxyw, r2.xyww
					    mad_pp r3.x, r0.w, c1.y, r3.y
					    mad_pp r1.yz, c1.y, r2.xzxw, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c1.w, r4, r0
					    max_pp r0.xyz, r1, c7.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c7.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.x, c6.y
					    max_pp oC0.xyz, r0, c7.x
					
					// approximately 40 instruction slots used (4 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 unused_0_2[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = max(u_xlat0.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = max(u_xlat0.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Exposure          c1       1
					//   _LutParams         c2       1
					//   _MiddleGrey        c3       1
					//   _AdaptationMin     c4       1
					//   _AdaptationMax     c5       1
					//   _MainTex           s0       1
					//   _LutTex            s1       1
					//   _LumTex            s2       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c7, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c8, 0, 0.5, 1, 52.9829178
					    def c9, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c6.x, c6.y
					    mad_pp r0.yzw, r1.xxyz, r0, c6.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c1.x
					    exp_pp r1.x, -r0.x
					    exp_pp r1.y, -r0.y
					    exp_pp r1.z, -r0.z
					    add_pp r0.xyz, -r1, c6.w
					    max_pp r1.xyz, r0.zxyw, c8.x
					    mul_pp r1.yzw, r1.xxyz, c2.z
					    frc_pp r0.w, r1.y
					    add_pp r0.w, -r0.w, r1.y
					    mad r1.x, r1.x, c2.z, -r0.w
					    mov r2.xy, c2
					    mul_pp r2.xz, r2.xyyw, c8.y
					    mad_pp r3.yz, r1.xzww, c2.xxyw, r2.xxzw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r1.yz, r2.y, c8.xzxw, r3.xxzw
					    texld r2, r3.xzzw, s1
					    texld r3, r1.yzzw, s1
					    lrp_pp r4.xyz, r1.x, r3, r2
					    lrp_pp r1.xyz, c2.w, r4, r0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c7, c7.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c8.w
					    frc_pp r0.x, r0.x
					    mad_pp r0.xyz, r0.x, -c7.w, r1
					    max_pp r1.xyz, r0, c8.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c9.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c9.y, c9.z
					    max_pp oC0.xyz, r0, c8.x
					
					// approximately 49 instruction slots used (4 texture, 45 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_3[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = max(u_xlat0.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat0.xyz = exp2((-u_xlat0.xyz));
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = max(u_xlat0.zxy, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 705727
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    mov r2.x, c1.x
					    mad_pp r1.y, r1.x, r2.x, c2.x
					    rcp r1.y, r1.y
					    mul_pp r1.z, r1.x, c1.x
					    rcp r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.z
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 18 instruction slots used (1 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat3 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat3 = sqrt(u_xlat3);
					    u_xlat3 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat3));
					    u_xlat1.x = u_xlat3 + u_xlat1.x;
					    u_xlat3 = u_xlat1.x * _Exposure;
					    u_xlat5 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat3 = u_xlat3 / u_xlat5;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat3 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat3 = sqrt(u_xlat3);
					    u_xlat3 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat3));
					    u_xlat1.x = u_xlat3 + u_xlat1.x;
					    u_xlat3 = u_xlat1.x * _Exposure;
					    u_xlat5 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat3 = u_xlat3 / u_xlat5;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0.0671105608, 0.00583714992, 0
					    def c4, 52.9829178, 0.00392156886, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c1.x
					    rcp r0.y, c1.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c3.yzzw, c3.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.y
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r1.xxyz, c0.xxyz
					    add_pp r0.yw, r0.xzzw, r0.y
					    mul_pp r0.z, r0.w, r0.z
					    mad_pp r0.y, r1.z, c0.z, r0.y
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    dp2add_pp r0.y, c0.w, r0.z, r0.y
					    mov r2.x, c3.x
					    mad_pp r0.z, r0.y, c2.x, r2.x
					    rcp r0.z, r0.z
					    mul_pp r0.w, r0.y, c2.x
					    rcp r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r1.xyz, r0.z, r1
					    mov_pp oC0.w, r1.w
					    mad_pp oC0.xyz, r1, r0.y, -r0.x
					
					// approximately 27 instruction slots used (1 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat3 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat3 = sqrt(u_xlat3);
					    u_xlat3 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat3));
					    u_xlat1.x = u_xlat3 + u_xlat1.x;
					    u_xlat3 = u_xlat1.x * _Exposure;
					    u_xlat5 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat3 = u_xlat3 / u_xlat5;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    SV_Target0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat3 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat3 = sqrt(u_xlat3);
					    u_xlat3 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat3));
					    u_xlat1.x = u_xlat3 + u_xlat1.x;
					    u_xlat3 = u_xlat1.x * _Exposure;
					    u_xlat5 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat3 = u_xlat3 / u_xlat5;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    SV_Target0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _MiddleGrey               c2       1
					//   _AdaptationMin            c3       1
					//   _AdaptationMax            c4       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.x, c1.x
					    mad_pp r1.x, r0.w, r1.x, c5.x
					    rcp r1.x, r1.x
					    mul_pp r1.y, r0.w, c1.x
					    rcp r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.y
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 24 instruction slots used (2 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _MiddleGrey               c3       1
					//   _AdaptationMin            c4       1
					//   _AdaptationMax            c5       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0.0671105608, 0.00583714992, 0
					    def c7, 52.9829178, 0.00392156886, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c1.x
					    rcp r0.y, c1.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c6.yzzw, c6.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c7.x
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c7.y
					    texld_pp r1, v0, s1
					    rcp r0.y, r1.x
					    mul_pp r0.y, r0.y, c3.x
					    min_pp r1.x, r0.y, c5.x
					    max_pp r0.y, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0.yzww, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.w, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    mov r2.x, c6.x
					    mad_pp r1.y, r1.x, c2.x, r2.x
					    rcp r1.y, r1.y
					    mul_pp r1.z, r1.x, c2.x
					    rcp r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.z
					    mul_pp r0.yzw, r0, r1.y
					    mad_pp oC0.xyz, r0.yzww, r1.x, -r0.x
					
					// approximately 33 instruction slots used (2 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    SV_Target0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    SV_Target0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _LutParams                c2       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.5, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    mov r2.xyz, c3
					    mad_pp r1.y, r1.x, c1.x, r2.x
					    rcp r1.y, r1.y
					    mul_pp r1.z, r1.x, c1.x
					    rcp r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.z
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r1.yzw, r1.x, r0.xxyz
					    mov_sat_pp r3.xyz, r1.wyzw
					    mul_pp r3.yzw, r3.xxyz, c2.z
					    frc_pp r0.w, r3.y
					    add_pp r0.w, -r0.w, r3.y
					    mad r2.w, r3.x, c2.z, -r0.w
					    mul_pp r3.xy, r2.y, c2
					    mad_pp r3.yz, r3.xzww, c2.xxyw, r3.xxyw
					    mad_pp r3.x, r0.w, c2.y, r3.y
					    mad_pp r2.xy, c2.y, r2.xzzw, r3.xzzw
					    texld r3, r3.xzzw, s1
					    texld r4, r2, s1
					    lrp_pp r5.xyz, r2.w, r4, r3
					    mad_pp r0.xyz, r0, -r1.x, r5
					    mad_pp oC0.xyz, c2.w, r0, r1.yzww
					
					// approximately 32 instruction slots used (3 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.x = u_xlat1.x * _Exposure;
					    u_xlat7 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat4.x = u_xlat4.x / u_xlat7;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xxx;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						vec4 unused_0_8;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.x = u_xlat1.x * _Exposure;
					    u_xlat7 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat4.x = u_xlat4.x / u_xlat7;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xxx;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _LutParams                c3       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c4, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c5, 1, 0.5, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    mov r2.xyz, c5
					    mad_pp r1.y, r1.x, c2.x, r2.x
					    rcp r1.y, r1.y
					    mul_pp r1.z, r1.x, c2.x
					    rcp r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.z
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r1.yzw, r1.x, r0.xxyz
					    mov_sat_pp r3.xyz, r1.wyzw
					    mul_pp r3.yzw, r3.xxyz, c3.z
					    frc_pp r0.w, r3.y
					    add_pp r0.w, -r0.w, r3.y
					    mad r2.w, r3.x, c3.z, -r0.w
					    mul_pp r3.xy, r2.y, c3
					    mad_pp r3.yz, r3.xzww, c3.xxyw, r3.xxyw
					    mad_pp r3.x, r0.w, c3.y, r3.y
					    mad_pp r2.xy, c3.y, r2.xzzw, r3.xzzw
					    texld r3, r3.xzzw, s1
					    texld r4, r2, s1
					    lrp_pp r5.xyz, r2.w, r4, r3
					    mad_pp r0.xyz, r0, -r1.x, r5
					    mad_pp r0.xyz, c3.w, r0, r1.yzww
					    rcp r1.x, c1.x
					    rcp r1.y, c1.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c4, c4.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c5.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c4.w, r0
					
					// approximately 41 instruction slots used (3 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.x = u_xlat1.x * _Exposure;
					    u_xlat7 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat4.x = u_xlat4.x / u_xlat7;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xxx;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						vec4 unused_0_8;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.x = u_xlat1.x * _Exposure;
					    u_xlat7 = u_xlat1.x * _Exposure + 1.0;
					    u_xlat4.x = u_xlat4.x / u_xlat7;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xxx;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _LutParams                c2       1
					//   _MiddleGrey               c3       1
					//   _AdaptationMin            c4       1
					//   _AdaptationMax            c5       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.5, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.xyz, c6
					    mad_pp r1.w, r0.w, c1.x, r1.x
					    rcp r1.w, r1.w
					    mul_pp r2.x, r0.w, c1.x
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.xyz, r0, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mov_sat_pp r3.xyz, r2.zxyw
					    mul_pp r3.yzw, r3.xxyz, c2.z
					    frc_pp r1.w, r3.y
					    add_pp r1.w, -r1.w, r3.y
					    mad r2.w, r3.x, c2.z, -r1.w
					    mul_pp r3.xy, r1.y, c2
					    mad_pp r3.yz, r3.xzww, c2.xxyw, r3.xxyw
					    mad_pp r3.x, r1.w, c2.y, r3.y
					    mad_pp r1.xy, c2.y, r1.xzzw, r3.xzzw
					    texld r3, r3.xzzw, s1
					    texld r1, r1, s1
					    lrp_pp r4.xyz, r2.w, r1, r3
					    mad_pp r0.xyz, r0, -r0.w, r4
					    mad_pp oC0.xyz, c2.w, r0, r2
					
					// approximately 38 instruction slots used (4 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _LutParams                c3       1
					//   _MiddleGrey               c4       1
					//   _AdaptationMin            c5       1
					//   _AdaptationMax            c6       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c7, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c8, 1, 0.5, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.xyz, c8
					    mad_pp r1.w, r0.w, c2.x, r1.x
					    rcp r1.w, r1.w
					    mul_pp r2.x, r0.w, c2.x
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.xyz, r0, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mov_sat_pp r3.xyz, r2.zxyw
					    mul_pp r3.yzw, r3.xxyz, c3.z
					    frc_pp r1.w, r3.y
					    add_pp r1.w, -r1.w, r3.y
					    mad r2.w, r3.x, c3.z, -r1.w
					    mul_pp r3.xy, r1.y, c3
					    mad_pp r3.yz, r3.xzww, c3.xxyw, r3.xxyw
					    mad_pp r3.x, r1.w, c3.y, r3.y
					    mad_pp r1.xy, c3.y, r1.xzzw, r3.xzzw
					    texld r3, r3.xzzw, s1
					    texld r1, r1, s1
					    lrp_pp r4.xyz, r2.w, r1, r3
					    mad_pp r0.xyz, r0, -r0.w, r4
					    mad_pp r0.xyz, c3.w, r0, r2
					    rcp r1.x, c1.x
					    rcp r1.y, c1.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c7, c7.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c7.w, r0
					
					// approximately 47 instruction slots used (4 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    SV_Target0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c2, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c3, 0, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c2.x, c2.y
					    mad_pp r1.xyz, r0, r1, c2.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.w, c2.w
					    mad_pp r1.x, r0.w, c1.x, r1.w
					    rcp r1.x, r1.x
					    mul_pp r1.y, r0.w, c1.x
					    rcp r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.y
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0.w, r0
					    max_pp r1.xyz, r0, c3.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c3.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c3.z, c3.w
					    max_pp oC0.xyz, r0, c3.x
					
					// approximately 31 instruction slots used (1 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c4, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c5, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c1.x
					    rcp r0.y, c1.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c4, c4.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c3.x, c3.y
					    mad_pp r0.yzw, r1.xxyz, r0, c3.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0.yzww, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.w, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    mov r1.w, c3.w
					    mad_pp r1.y, r1.x, c2.x, r1.w
					    rcp r1.y, r1.y
					    mul_pp r1.z, r1.x, c2.x
					    rcp r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.z
					    mul_pp r0.yzw, r0, r1.y
					    mad_pp r0.xyz, r0.yzww, r1.x, -r0.x
					    max_pp r1.xyz, r0, c4.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c5.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.z, c5.w
					    max_pp oC0.xyz, r0, c4.z
					
					// approximately 40 instruction slots used (1 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    u_xlat0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    u_xlat0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _MiddleGrey               c2       1
					//   _AdaptationMin            c3       1
					//   _AdaptationMax            c4       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c6, 0, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c2.x
					    min_pp r1.x, r0.x, c4.x
					    max_pp r0.x, c3.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c5.x, c5.y
					    mad_pp r0.yzw, r1.xxyz, r0, c5.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.w, c5.w
					    mad_pp r1.x, r0.w, c1.x, r1.w
					    rcp r1.x, r1.x
					    mul_pp r1.y, r0.w, c1.x
					    rcp r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.y
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0.w, r0
					    max_pp r1.xyz, r0, c6.x
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.z, c6.w
					    max_pp oC0.xyz, r0, c6.x
					
					// approximately 37 instruction slots used (2 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _MiddleGrey               c3       1
					//   _AdaptationMin            c4       1
					//   _AdaptationMax            c5       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c7, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c8, 0.00392156886, 0.416666657, 1.05499995, -0.0549999997
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c1.x
					    rcp r0.y, c1.y
					    mul_pp r0.xy, r0, v0
					    dp2add_pp r0.x, r0, c7, c7.z
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c7.w
					    frc_pp r0.x, r0.x
					    mul_pp r0.x, r0.x, c8.x
					    texld_pp r1, v0, s1
					    rcp r0.y, r1.x
					    mul_pp r0.y, r0.y, c3.x
					    min_pp r1.x, r0.y, c5.x
					    max_pp r0.y, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r2.xyz, r1, c6.x, c6.y
					    mad_pp r2.xyz, r1, r2, c6.z
					    mul_pp r1.xyz, r1, r2
					    mov_pp oC0.w, r1.w
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    mul_pp r1.xyz, r0.yzww, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.w, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    mov r1.w, c6.w
					    mad_pp r1.y, r1.x, c2.x, r1.w
					    rcp r1.y, r1.y
					    mul_pp r1.z, r1.x, c2.x
					    rcp r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.z
					    mul_pp r0.yzw, r0, r1.y
					    mad_pp r0.xyz, r0.yzww, r1.x, -r0.x
					    max_pp r1.xyz, r0, c7.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c8.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.z, c8.w
					    max_pp oC0.xyz, r0, c7.z
					
					// approximately 46 instruction slots used (2 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    u_xlat0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[3];
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat2.xy = vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat6 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat6 = u_xlat6 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * _Exposure;
					    u_xlat3 = u_xlat6 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat3;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat6);
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat6 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat6 = fract(u_xlat6);
					    u_xlat6 = u_xlat6 * 52.9829178;
					    u_xlat6 = fract(u_xlat6);
					    u_xlat0.xyz = (-vec3(u_xlat6)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _LutParams                c2       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c4, 1.05499995, -0.0549999997, 0, 0
					    def c5, 0.5, 1, 0, 0.416666657
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.w, c3.w
					    mad_pp r1.x, r0.w, c1.x, r1.w
					    rcp r1.x, r1.x
					    mul_pp r1.y, r0.w, c1.x
					    rcp r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.y
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c2.z, -r1.w
					    mov r3.xy, c2
					    mul_pp r3.xz, r3.xyyw, c5.x
					    mad_pp r4.yz, r2.xzww, c2.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c2.y, r4.y
					    mad_pp r2.yz, r3.y, c5, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c2.w, r0, r1
					    max_pp r1.xyz, r0, c5.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c5.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c4.x, c4.y
					    max_pp oC0.xyz, r0, c5.z
					
					// approximately 46 instruction slots used (3 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						vec4 unused_0_8;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _LutParams                c3       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c5, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c6, 0.5, 1, 0, 52.9829178
					    def c7, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mad_pp r1.xyz, r0, r1, c4.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.w, c4.w
					    mad_pp r1.x, r0.w, c2.x, r1.w
					    rcp r1.x, r1.x
					    mul_pp r1.y, r0.w, c2.x
					    rcp r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.y
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c3.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c3.z, -r1.w
					    mov r3.xy, c3
					    mul_pp r3.xz, r3.xyyw, c6.x
					    mad_pp r4.yz, r2.xzww, c3.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c3.y, r4.y
					    mad_pp r2.yz, r3.y, c6, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c3.w, r0, r1
					    rcp r1.x, c1.x
					    rcp r1.y, c1.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c5, c5.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c5.w, r0
					    max_pp r1.xyz, r0, c6.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.y, c7.z
					    max_pp oC0.xyz, r0, c6.z
					
					// approximately 55 instruction slots used (3 texture, 52 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						vec4 unused_0_8;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _Exposure                 c1       1
					//   _LutParams                c2       1
					//   _MiddleGrey               c3       1
					//   _AdaptationMin            c4       1
					//   _AdaptationMax            c5       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c7, 1.05499995, -0.0549999997, 0, 0
					    def c8, 0.5, 1, 0, 0.416666657
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c6.x, c6.y
					    mad_pp r0.yzw, r1.xxyz, r0, c6.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.w, c6.w
					    mad_pp r1.x, r0.w, c1.x, r1.w
					    rcp r1.x, r1.x
					    mul_pp r1.y, r0.w, c1.x
					    rcp r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.y
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c2.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c2.z, -r1.w
					    mov r3.xy, c2
					    mul_pp r3.xz, r3.xyyw, c8.x
					    mad_pp r4.yz, r2.xzww, c2.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c2.y, r4.y
					    mad_pp r2.yz, r3.y, c8, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c2.w, r0, r1
					    max_pp r1.xyz, r0, c8.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c8.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.x, c7.y
					    max_pp oC0.xyz, r0, c8.z
					
					// approximately 52 instruction slots used (4 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Exposure;
						vec4 unused_0_4[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 unused_0_4;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _Exposure                 c2       1
					//   _LutParams                c3       1
					//   _MiddleGrey               c4       1
					//   _AdaptationMin            c5       1
					//   _AdaptationMax            c6       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c7, 0.305306017, 0.682171106, 0.0125228781, 1
					    def c8, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c9, 0.5, 1, 0, 52.9829178
					    def c10, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c7.x, c7.y
					    mad_pp r0.yzw, r1.xxyz, r0, c7.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r0.w, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.w, c0.w, r0.w, r1.x
					    mov r1.w, c7.w
					    mad_pp r1.x, r0.w, c2.x, r1.w
					    rcp r1.x, r1.x
					    mul_pp r1.y, r0.w, c2.x
					    rcp r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.y
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c3.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c3.z, -r1.w
					    mov r3.xy, c3
					    mul_pp r3.xz, r3.xyyw, c9.x
					    mad_pp r4.yz, r2.xzww, c3.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c3.y, r4.y
					    mad_pp r2.yz, r3.y, c9, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c3.w, r0, r1
					    rcp r1.x, c1.x
					    rcp r1.y, c1.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c8, c8.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c9.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c8.w, r0
					    max_pp r1.xyz, r0, c9.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c10.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c10.y, c10.z
					    max_pp oC0.xyz, r0, c9.z
					
					// approximately 61 instruction slots used (4 texture, 57 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_5[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 unused_0_6[2];
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat3.xy = vs_TEXCOORD0.xy;
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.x = u_xlat9 * _Exposure;
					    u_xlat4.x = u_xlat9 * _Exposure + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat4.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat9 = floor(u_xlat4.x);
					    u_xlat2.x = u_xlat9 * _LutParams.y + u_xlat2.y;
					    u_xlat9 = u_xlat1.x * _LutParams.z + (-u_xlat9);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat9 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat9 = fract(u_xlat9);
					    u_xlat9 = u_xlat9 * 52.9829178;
					    u_xlat9 = fract(u_xlat9);
					    u_xlat0.xyz = (-vec3(u_xlat9)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 738677
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c2.y
					    mul_pp r0.x, r0.x, c2.x
					    mov r1.xyw, c1
					    mad_pp r0.y, r1.x, c2.z, r1.y
					    mul_pp r0.zw, r1.w, c2.xyxy
					    mad_pp r0.y, c2.z, r0.y, r0.w
					    rcp r0.y, r0.y
					    mul_pp r1.y, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r1.y
					    mad_pp r1.x, c2.z, r1.x, r0.z
					    mad_pp r0.y, r1.x, r0.y, -r0.x
					    rcp_pp r0.y, r0.y
					    texld_pp r2, v0, s0
					    mul_pp r1.xzw, r2.xyyz, c0.x
					    mov_pp oC0.w, r2.w
					    mul_pp r1.xzw, r0.y, r1
					    mad_pp r2.xyz, c1.x, r1.xzww, r1.y
					    mad_pp r2.xyz, r1.xzww, r2, r0.z
					    mad_pp r3.xyz, c1.x, r1.xzww, c1.y
					    mad_pp r1.xyz, r1.xzww, r3, r0.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    mad_pp r0.xzw, r2.xyyz, r3.xyyz, -r0.x
					    mul_pp r0.xyz, r0.y, r0.xzww
					    rcp r0.w, c2.w
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 27 instruction slots used (1 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_4[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0.x = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat4 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat0.x;
					    u_xlat8.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat4 = _NeutralTonemapperParams2.z * u_xlat4 + u_xlat8.x;
					    u_xlat1 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat1 = _NeutralTonemapperParams2.z * u_xlat1 + u_xlat8.y;
					    u_xlat4 = u_xlat4 / u_xlat1;
					    u_xlat1 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat4 = u_xlat4 + (-u_xlat1);
					    u_xlat4 = float(1.0) / u_xlat4;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat5.xyz = vec3(u_xlat4) * u_xlat5.xyz;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat2.xyz + u_xlat8.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat3.xyz + u_xlat8.yyy;
					    u_xlat0.xzw = u_xlat2.xyz / u_xlat0.xzw;
					    u_xlat0.xzw = (-vec3(u_xlat1)) + u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1 = _NeutralTonemapperParams2.z * u_xlat1 + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1 = u_xlat1 / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1 = (-u_xlat13) + u_xlat1;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1);
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c4, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c5, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c3.y
					    mul_pp r0.x, r0.x, c3.x
					    mov r1.xyw, c2
					    mad_pp r0.y, r1.x, c3.z, r1.y
					    mul_pp r0.zw, r1.w, c3.xyxy
					    mad_pp r0.y, c3.z, r0.y, r0.w
					    rcp r0.y, r0.y
					    mul_pp r1.y, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r1.y
					    mad_pp r1.x, c3.z, r1.x, r0.z
					    mad_pp r0.y, r1.x, r0.y, -r0.x
					    rcp_pp r0.y, r0.y
					    texld_pp r2, v0, s0
					    mul_pp r1.xzw, r2.xyyz, c1.x
					    mov_pp oC0.w, r2.w
					    mul_pp r1.xzw, r0.y, r1
					    mad_pp r2.xyz, c2.x, r1.xzww, r1.y
					    mad_pp r2.xyz, r1.xzww, r2, r0.z
					    mad_pp r3.xyz, c2.x, r1.xzww, c2.y
					    mad_pp r1.xyz, r1.xzww, r3, r0.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    mad_pp r0.xzw, r2.xyyz, r3.xyyz, -r0.x
					    mul_pp r0.xyz, r0.y, r0.xzww
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c4, c4.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c4.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c5.x
					    rcp r1.x, c3.w
					    mad_pp oC0.xyz, r0, r1.x, -r0.w
					
					// approximately 36 instruction slots used (1 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_5[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat4 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat0.x;
					    u_xlat8.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat4 = _NeutralTonemapperParams2.z * u_xlat4 + u_xlat8.x;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat8.y;
					    u_xlat4 = u_xlat4 / u_xlat1.x;
					    u_xlat1.x = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat4 = u_xlat4 + (-u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat4;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat5.xyz = vec3(u_xlat4) * u_xlat5.xyz;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat2.xyz + u_xlat8.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat3.xyz + u_xlat8.yyy;
					    u_xlat0.xzw = u_xlat2.xyz / u_xlat0.xzw;
					    u_xlat0.xzw = (-u_xlat1.xxx) + u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _MiddleGrey               c3       1
					//   _AdaptationMin            c4       1
					//   _AdaptationMax            c5       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    rcp r0.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mov r1.xyw, c1
					    mad_pp r1.y, r1.x, c2.z, r1.y
					    mul_pp r1.zw, r1.w, c2.xyxy
					    mad_pp r1.y, c2.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r2.x
					    mad_pp r1.x, c2.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c1.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c1.x, r0, c1.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c2.w
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 33 instruction slots used (2 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_4;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _MiddleGrey               c4       1
					//   _AdaptationMin            c5       1
					//   _AdaptationMax            c6       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    def c7, 0.0671105608, 0.00583714992, 0, 52.9829178
					    def c8, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c1.x
					    rcp r0.w, c3.y
					    mul_pp r0.w, r0.w, c3.x
					    mov r1.xyw, c2
					    mad_pp r1.y, r1.x, c3.z, r1.y
					    mul_pp r1.zw, r1.w, c3.xyxy
					    mad_pp r1.y, c3.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r2.x
					    mad_pp r1.x, c3.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c2.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c2.x, r0, c2.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c7, c7.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.x
					    rcp r1.x, c3.w
					    mad_pp oC0.xyz, r0, r1.x, -r0.w
					
					// approximately 42 instruction slots used (2 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_5;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _LutParams                c3       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c4, 0.5, 1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c2.y
					    mul_pp r0.x, r0.x, c2.x
					    mov r1.xyw, c1
					    mad_pp r0.y, r1.x, c2.z, r1.y
					    mul_pp r0.zw, r1.w, c2.xyxy
					    mad_pp r0.y, c2.z, r0.y, r0.w
					    rcp r0.y, r0.y
					    mul_pp r1.y, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r1.y
					    mad_pp r1.x, c2.z, r1.x, r0.z
					    mad_pp r0.y, r1.x, r0.y, -r0.x
					    rcp_pp r0.y, r0.y
					    texld_pp r2, v0, s0
					    mul_pp r1.xzw, r2.xyyz, c0.x
					    mov_pp oC0.w, r2.w
					    mul_pp r1.xzw, r0.y, r1
					    mad_pp r2.xyz, c1.x, r1.xzww, r1.y
					    mad_pp r2.xyz, r1.xzww, r2, r0.z
					    mad_pp r3.xyz, c1.x, r1.xzww, c1.y
					    mad_pp r1.xyz, r1.xzww, r3, r0.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    mad_pp r0.xzw, r2.xyyz, r3.xyyz, -r0.x
					    mul_pp r0.xyz, r0.y, r0.xzww
					    rcp r0.w, c2.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c3.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c3.z, -r1.w
					    mov r3.xy, c3
					    mul_pp r3.xz, r3.xyyw, c4.x
					    mad_pp r4.yz, r2.xzww, c3.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c3.y, r4.y
					    mad_pp r2.yz, r3.y, c4, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp oC0.xyz, c3.w, r0, r1
					
					// approximately 42 instruction slots used (3 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat4 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat0.x;
					    u_xlat8.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat4 = _NeutralTonemapperParams2.z * u_xlat4 + u_xlat8.x;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat8.y;
					    u_xlat4 = u_xlat4 / u_xlat1.x;
					    u_xlat1.x = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat4 = u_xlat4 + (-u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat4;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat5.xyz = vec3(u_xlat4) * u_xlat5.xyz;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat2.xyz + u_xlat8.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat3.xyz + u_xlat8.yyy;
					    u_xlat0.xzw = u_xlat2.xyz / u_xlat0.xzw;
					    u_xlat0.xzw = (-u_xlat1.xxx) + u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _LutParams                c4       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c5, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c6, 0.5, 1, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c3.y
					    mul_pp r0.x, r0.x, c3.x
					    mov r1.xyw, c2
					    mad_pp r0.y, r1.x, c3.z, r1.y
					    mul_pp r0.zw, r1.w, c3.xyxy
					    mad_pp r0.y, c3.z, r0.y, r0.w
					    rcp r0.y, r0.y
					    mul_pp r1.y, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r1.y
					    mad_pp r1.x, c3.z, r1.x, r0.z
					    mad_pp r0.y, r1.x, r0.y, -r0.x
					    rcp_pp r0.y, r0.y
					    texld_pp r2, v0, s0
					    mul_pp r1.xzw, r2.xyyz, c1.x
					    mov_pp oC0.w, r2.w
					    mul_pp r1.xzw, r0.y, r1
					    mad_pp r2.xyz, c2.x, r1.xzww, r1.y
					    mad_pp r2.xyz, r1.xzww, r2, r0.z
					    mad_pp r3.xyz, c2.x, r1.xzww, c2.y
					    mad_pp r1.xyz, r1.xzww, r3, r0.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    mad_pp r0.xzw, r2.xyyz, r3.xyyz, -r0.x
					    mul_pp r0.xyz, r0.y, r0.xzww
					    rcp r0.w, c3.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c4.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c4.z, -r1.w
					    mov r3.xy, c4
					    mul_pp r3.xz, r3.xyyw, c6.x
					    mad_pp r4.yz, r2.xzww, c4.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c4.y, r4.y
					    mad_pp r2.yz, r3.y, c6, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c4.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c5, c5.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c6.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c5.w, r0
					
					// approximately 51 instruction slots used (3 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat4 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat0.x;
					    u_xlat8.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat4 = _NeutralTonemapperParams2.z * u_xlat4 + u_xlat8.x;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat8.y;
					    u_xlat4 = u_xlat4 / u_xlat1.x;
					    u_xlat1.x = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat4 = u_xlat4 + (-u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat4;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat5.xyz = vec3(u_xlat4) * u_xlat5.xyz;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + u_xlat0.xxx;
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat2.xyz + u_xlat8.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat5.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat3.xyz + u_xlat8.yyy;
					    u_xlat0.xzw = u_xlat2.xyz / u_xlat0.xzw;
					    u_xlat0.xzw = (-u_xlat1.xxx) + u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _LutParams                c3       1
					//   _MiddleGrey               c4       1
					//   _AdaptationMin            c5       1
					//   _AdaptationMax            c6       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c7, 0.5, 1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c0.x
					    rcp r0.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mov r1.xyw, c1
					    mad_pp r1.y, r1.x, c2.z, r1.y
					    mul_pp r1.zw, r1.w, c2.xyxy
					    mad_pp r1.y, c2.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r2.x
					    mad_pp r1.x, c2.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c1.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c1.x, r0, c1.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c2.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c3.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c3.z, -r1.w
					    mov r3.xy, c3
					    mul_pp r3.xz, r3.xyyw, c7.x
					    mad_pp r4.yz, r2.xzww, c3.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c3.y, r4.y
					    mad_pp r2.yz, r3.y, c7, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp oC0.xyz, c3.w, r0, r1
					
					// approximately 48 instruction slots used (4 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _LutParams                c4       1
					//   _MiddleGrey               c5       1
					//   _AdaptationMin            c6       1
					//   _AdaptationMax            c7       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c8, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c9, 0.5, 1, 0, 52.9829178
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.x
					    min_pp r1.x, r0.x, c7.x
					    max_pp r0.x, c6.x, r1.x
					    texld_pp r1, v0, s0
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, c1.x
					    rcp r0.w, c3.y
					    mul_pp r0.w, r0.w, c3.x
					    mov r1.xyw, c2
					    mad_pp r1.y, r1.x, c3.z, r1.y
					    mul_pp r1.zw, r1.w, c3.xyxy
					    mad_pp r1.y, c3.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r2.x
					    mad_pp r1.x, c3.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c2.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c2.x, r0, c2.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c3.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c4.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c4.z, -r1.w
					    mov r3.xy, c4
					    mul_pp r3.xz, r3.xyyw, c9.x
					    mad_pp r4.yz, r2.xzww, c4.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c4.y, r4.y
					    mad_pp r2.yz, r3.y, c9, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c4.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c8, c8.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c9.w
					    frc_pp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, -c8.w, r0
					
					// approximately 57 instruction slots used (4 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c3, 0.305306017, 0.682171106, 0.0125228781, 0
					    def c4, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c3.x, c3.y
					    mad_pp r1.xyz, r0, r1, c3.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    rcp r0.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mov r1.xyw, c1
					    mad_pp r1.y, r1.x, c2.z, r1.y
					    mul_pp r1.zw, r1.w, c2.xyxy
					    mad_pp r1.y, c2.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r2.x
					    mad_pp r1.x, c2.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c1.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c1.x, r0, c1.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c2.w
					    mul_pp r0.xyz, r0.w, r0
					    max_pp r1.xyz, r0, c3.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c4.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c4.y, c4.z
					    max_pp oC0.xyz, r0, c3.w
					
					// approximately 40 instruction slots used (1 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_4[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 52.9829178
					    def c5, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c6, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mad_pp r1.xyz, r0, r1, c4.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c1.x
					    rcp r0.w, c3.y
					    mul_pp r0.w, r0.w, c3.x
					    mov r1.xyw, c2
					    mad_pp r1.y, r1.x, c3.z, r1.y
					    mul_pp r1.zw, r1.w, c3.xyxy
					    mad_pp r1.y, c3.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r2.x
					    mad_pp r1.x, c3.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c2.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c2.x, r0, c2.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c5, c5.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c4.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c5.w
					    rcp r1.x, c3.w
					    mad_pp r0.xyz, r0, r1.x, -r0.w
					    max_pp r1.xyz, r0, c5.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c6.y, c6.z
					    max_pp oC0.xyz, r0, c5.z
					
					// approximately 49 instruction slots used (1 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_5[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _MiddleGrey               c3       1
					//   _AdaptationMin            c4       1
					//   _AdaptationMax            c5       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    def c6, 0.305306017, 0.682171106, 0.0125228781, 0
					    def c7, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c3.x
					    min_pp r1.x, r0.x, c5.x
					    max_pp r0.x, c4.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c6.x, c6.y
					    mad_pp r0.yzw, r1.xxyz, r0, c6.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    rcp r0.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mov r1.xyw, c1
					    mad_pp r1.y, r1.x, c2.z, r1.y
					    mul_pp r1.zw, r1.w, c2.xyxy
					    mad_pp r1.y, c2.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r2.x
					    mad_pp r1.x, c2.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c1.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c1.x, r0, c1.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c2.w
					    mul_pp r0.xyz, r0.w, r0
					    max_pp r1.xyz, r0, c6.w
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c7.y, c7.z
					    max_pp oC0.xyz, r0, c6.w
					
					// approximately 46 instruction slots used (2 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_4;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _MiddleGrey               c4       1
					//   _AdaptationMin            c5       1
					//   _AdaptationMax            c6       1
					//   _MainTex                  s0       1
					//   _LumTex                   s1       1
					//
					
					    ps_3_0
					    def c7, 0.305306017, 0.682171106, 0.0125228781, 52.9829178
					    def c8, 0.0671105608, 0.00583714992, 0, 0.00392156886
					    def c9, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c7.x, c7.y
					    mad_pp r0.yzw, r1.xxyz, r0, c7.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c1.x
					    rcp r0.w, c3.y
					    mul_pp r0.w, r0.w, c3.x
					    mov r1.xyw, c2
					    mad_pp r1.y, r1.x, c3.z, r1.y
					    mul_pp r1.zw, r1.w, c3.xyxy
					    mad_pp r1.y, c3.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r2.x
					    mad_pp r1.x, c3.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c2.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c2.x, r0, c2.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c8, c8.z
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.w
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c8.w
					    rcp r1.x, c3.w
					    mad_pp r0.xyz, r0, r1.x, -r0.w
					    max_pp r1.xyz, r0, c8.z
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c9.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c9.y, c9.z
					    max_pp oC0.xyz, r0, c8.z
					
					// approximately 55 instruction slots used (2 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_5;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 unused_0_6;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _LutParams                c3       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c4, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c5, 1.05499995, -0.0549999997, 0, 0
					    def c6, 1, 0, 0.416666657, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c4.x, c4.y
					    mad_pp r1.xyz, r0, r1, c4.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c0.x
					    rcp r0.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mov r1.xyw, c1
					    mad_pp r1.y, r1.x, c2.z, r1.y
					    mul_pp r1.zw, r1.w, c2.xyxy
					    mad_pp r1.y, c2.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r2.x
					    mad_pp r1.x, c2.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c1.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c1.x, r0, c1.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c2.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c3.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c3.z, -r1.w
					    mov r3.xy, c3
					    mul_pp r3.xz, r3.xyyw, c4.w
					    mad_pp r4.yz, r2.xzww, c3.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c3.y, r4.y
					    mad_pp r2.yz, r3.y, c6.xxyw, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c3.w, r0, r1
					    max_pp r1.xyz, r0, c6.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c6.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.x, c5.y
					    max_pp oC0.xyz, r0, c6.y
					
					// approximately 55 instruction slots used (3 texture, 52 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Exposure;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _LutParams                c4       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//
					
					    ps_3_0
					    def c5, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c6, 1, 0, 0.0671105608, 0.00583714992
					    def c7, 52.9829178, 0.00392156886, 0.416666657, 0
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xyz, r0, c5.x, c5.y
					    mad_pp r1.xyz, r0, r1, c5.z
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, c1.x
					    rcp r0.w, c3.y
					    mul_pp r0.w, r0.w, c3.x
					    mov r1.xyw, c2
					    mad_pp r1.y, r1.x, c3.z, r1.y
					    mul_pp r1.zw, r1.w, c3.xyxy
					    mad_pp r1.y, c3.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r2.x
					    mad_pp r1.x, c3.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c2.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c2.x, r0, c2.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c3.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c4.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c4.z, -r1.w
					    mov r3.xy, c4
					    mul_pp r3.xz, r3.xyyw, c5.w
					    mad_pp r4.yz, r2.xzww, c4.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c4.y, r4.y
					    mad_pp r2.yz, r3.y, c6.xxyw, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c4.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c6.zwzw, c6.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c7.x
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c7.y, r0
					    max_pp r1.xyz, r0, c6.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c7.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.x, c8.y
					    max_pp oC0.xyz, r0, c6.y
					
					// approximately 64 instruction slots used (3 texture, 61 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Exposure                 c0       1
					//   _NeutralTonemapperParams1 c1       1
					//   _NeutralTonemapperParams2 c2       1
					//   _LutParams                c3       1
					//   _MiddleGrey               c4       1
					//   _AdaptationMin            c5       1
					//   _AdaptationMax            c6       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c7, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    def c9, 1, 0, 0.416666657, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c4.x
					    min_pp r1.x, r0.x, c6.x
					    max_pp r0.x, c5.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c7.x, c7.y
					    mad_pp r0.yzw, r1.xxyz, r0, c7.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c0.x
					    rcp r0.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mov r1.xyw, c1
					    mad_pp r1.y, r1.x, c2.z, r1.y
					    mul_pp r1.zw, r1.w, c2.xyxy
					    mad_pp r1.y, c2.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c1.y, c1.z
					    mad_pp r1.x, r1.x, c2.z, r2.x
					    mad_pp r1.x, c2.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c1.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c1.x, r0, c1.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c2.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c3.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c3.z, -r1.w
					    mov r3.xy, c3
					    mul_pp r3.xz, r3.xyyw, c7.w
					    mad_pp r4.yz, r2.xzww, c3.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c3.y, r4.y
					    mad_pp r2.yz, r3.y, c9.xxyw, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c3.w, r0, r1
					    max_pp r1.xyz, r0, c9.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c9.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c8.x, c8.y
					    max_pp oC0.xyz, r0, c9.y
					
					// approximately 61 instruction slots used (4 texture, 57 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptationMax;
					//   float _AdaptationMin;
					//   float _Exposure;
					//   sampler2D _LumTex;
					//   float4 _LutParams;
					//   sampler2D _LutTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MiddleGrey;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex_TexelSize        c0       1
					//   _Exposure                 c1       1
					//   _NeutralTonemapperParams1 c2       1
					//   _NeutralTonemapperParams2 c3       1
					//   _LutParams                c4       1
					//   _MiddleGrey               c5       1
					//   _AdaptationMin            c6       1
					//   _AdaptationMax            c7       1
					//   _MainTex                  s0       1
					//   _LutTex                   s1       1
					//   _LumTex                   s2       1
					//
					
					    ps_3_0
					    def c8, 0.305306017, 0.682171106, 0.0125228781, 0.5
					    def c9, 1, 0, 0.0671105608, 0.00583714992
					    def c10, 52.9829178, 0.00392156886, 0.416666657, 0
					    def c11, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s2
					    rcp r0.x, r0.x
					    mul_pp r0.x, r0.x, c5.x
					    min_pp r1.x, r0.x, c7.x
					    max_pp r0.x, c6.x, r1.x
					    texld_pp r1, v0, s0
					    mad_pp r0.yzw, r1.xxyz, c8.x, c8.y
					    mad_pp r0.yzw, r1.xxyz, r0, c8.z
					    mul_pp r0.yzw, r0, r1.xxyz
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp r0.xyz, r0, c1.x
					    rcp r0.w, c3.y
					    mul_pp r0.w, r0.w, c3.x
					    mov r1.xyw, c2
					    mad_pp r1.y, r1.x, c3.z, r1.y
					    mul_pp r1.zw, r1.w, c3.xyxy
					    mad_pp r1.y, c3.z, r1.y, r1.w
					    rcp r1.y, r1.y
					    mul_pp r2.x, c2.y, c2.z
					    mad_pp r1.x, r1.x, c3.z, r2.x
					    mad_pp r1.x, c3.z, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, -r0.w
					    rcp_pp r1.x, r1.x
					    mul_pp r0.xyz, r0, r1.x
					    mad_pp r2.xyz, c2.x, r0, r2.x
					    mad_pp r2.xyz, r0, r2, r1.z
					    mad_pp r3.xyz, c2.x, r0, c2.y
					    mad_pp r0.xyz, r0, r3, r1.w
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    mad_pp r0.xyz, r2, r3, -r0.w
					    mul_pp r0.xyz, r1.x, r0
					    rcp r0.w, c3.w
					    mul_pp r1.xyz, r0.w, r0
					    mov_sat_pp r2.xyz, r1.zxyw
					    mul_pp r2.yzw, r2.xxyz, c4.z
					    frc_pp r1.w, r2.y
					    add_pp r1.w, -r1.w, r2.y
					    mad r2.x, r2.x, c4.z, -r1.w
					    mov r3.xy, c4
					    mul_pp r3.xz, r3.xyyw, c8.w
					    mad_pp r4.yz, r2.xzww, c4.xxyw, r3.xxzw
					    mad_pp r4.x, r1.w, c4.y, r4.y
					    mad_pp r2.yz, r3.y, c9.xxyw, r4.xxzw
					    texld r3, r4.xzzw, s1
					    texld r4, r2.yzzw, s1
					    lrp_pp r5.xyz, r2.x, r4, r3
					    mad_pp r0.xyz, r0, -r0.w, r5
					    mad_pp r0.xyz, c4.w, r0, r1
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul_pp r1.xy, r1, v0
					    dp2add_pp r0.w, r1, c9.zwzw, c9.y
					    frc_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c10.x
					    frc_pp r0.w, r0.w
					    mad_pp r0.xyz, r0.w, -c10.y, r0
					    max_pp r1.xyz, r0, c9.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c10.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c11.x, c11.y
					    max_pp oC0.xyz, r0, c9.y
					
					// approximately 70 instruction slots used (4 texture, 66 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNITY_COLORSPACE_GAMMA" "ENABLE_COLOR_GRADING" "ENABLE_DITHERING" "ENABLE_EYE_ADAPTATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _MainTex_TexelSize;
						float _Exposure;
						vec4 _NeutralTonemapperParams1;
						vec4 _NeutralTonemapperParams2;
						vec4 _LutParams;
						float _MiddleGrey;
						float _AdaptationMin;
						float _AdaptationMax;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LumTex;
					uniform  sampler2D _LutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_LumTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MiddleGrey / u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, _AdaptationMax);
					    u_xlat0.x = max(u_xlat0.x, _AdaptationMin);
					    u_xlat4.xy = vs_TEXCOORD0.xy;
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Exposure);
					    u_xlat12 = _NeutralTonemapperParams1.y * _NeutralTonemapperParams1.z;
					    u_xlat1.x = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + u_xlat12;
					    u_xlat5.xy = _NeutralTonemapperParams1.ww * _NeutralTonemapperParams2.xy;
					    u_xlat1.x = _NeutralTonemapperParams2.z * u_xlat1.x + u_xlat5.x;
					    u_xlat13 = _NeutralTonemapperParams1.x * _NeutralTonemapperParams2.z + _NeutralTonemapperParams1.y;
					    u_xlat13 = _NeutralTonemapperParams2.z * u_xlat13 + u_xlat5.y;
					    u_xlat1.x = u_xlat1.x / u_xlat13;
					    u_xlat13 = _NeutralTonemapperParams2.x / _NeutralTonemapperParams2.y;
					    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xxx;
					    u_xlat3.xyz = _NeutralTonemapperParams1.xxx * u_xlat0.xyz + _NeutralTonemapperParams1.yyy;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat5.yyy;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / _NeutralTonemapperParams2.www;
					    u_xlat1.xyz = u_xlat0.zxy;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat1.xyz * _LutParams.zzz;
					    u_xlat2.xy = _LutParams.xy * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat5.yz * _LutParams.xy + u_xlat2.xy;
					    u_xlat12 = floor(u_xlat5.x);
					    u_xlat2.x = u_xlat12 * _LutParams.y + u_xlat2.y;
					    u_xlat12 = u_xlat1.x * _LutParams.z + (-u_xlat12);
					    u_xlat1.x = _LutParams.y;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_LutTex, u_xlat2.xz);
					    u_xlat1 = texture(_LutTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = _LutParams.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy / _MainTex_TexelSize.xy;
					    u_xlat12 = dot(u_xlat1.xy, vec2(0.0671105608, 0.00583714992));
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * 52.9829178;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat0.xyz = (-vec3(u_xlat12)) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 832690
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 256, 1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mul_pp r0.x, r0.x, c0.x
					    frc_pp r0.y, r0.x
					    add r0.x, -r0.y, r0.x
					    mul_pp r0.y, c0.x, v0.x
					    frc_pp r0.z, r0.y
					    add r0.y, -r0.z, r0.y
					    add r0.x, -r0.y, r0.x
					    cmp_pp oC0.xyz, -r0_abs.x, c0.yzzw, v0.x
					    mov_pp oC0.w, c0.y
					
					// approximately 10 instruction slots used (1 texture, 9 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * 256.0;
					    u_xlat0.x = floor(u_xlat0.x);
					    u_xlat1.x = vs_TEXCOORD0.x * 256.0;
					    u_xlat0.y = floor(u_xlat1.x);
					    u_xlati0.xy = ivec2(u_xlat0.xy);
					    u_xlatb0 = u_xlati0.y==u_xlati0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-vs_TEXCOORD0.xxx) + vec3(1.0, 0.0, 0.0);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD0.xxx;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * 256.0;
					    u_xlat0.x = floor(u_xlat0.x);
					    u_xlat1.x = vs_TEXCOORD0.x * 256.0;
					    u_xlat0.y = floor(u_xlat1.x);
					    u_xlati0.xy = ivec2(u_xlat0.xy);
					    u_xlatb0 = u_xlati0.y==u_xlati0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-vs_TEXCOORD0.xxx) + vec3(1.0, 0.0, 0.0);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD0.xxx;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
}
}