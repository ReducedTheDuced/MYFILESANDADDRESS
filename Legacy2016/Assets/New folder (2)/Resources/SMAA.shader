Shader "Hidden/Subpixel Morphological Anti-aliasing" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 25619
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					    ps_3_0
					    def c0, 0, 0, 0, 0
					    mov oC0, c0.x
					
					// approximately 1 instruction slot used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 89894
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Metrics;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Metrics           c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0, c6
					    slt r1.x, c4.y, r0.x
					    mad r1.y, v1.y, c6.y, c6.z
					    mad r1.y, r1.x, r1.y, v1.y
					    mov r1.x, v1.x
					    mad o2, c5.xyxy, r0.wxxw, r1.xyxy
					    mad o3, c5.xyxy, r0.zxxz, r1.xyxy
					    mad o4, c5.xyxy, r0.yxxy, r1.xyxy
					    mov o1.xy, r1
					
					// approximately 13 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_PREDICATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Metrics;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Metrics           c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0, c6
					    slt r1.x, c4.y, r0.x
					    mad r1.y, v1.y, c6.y, c6.z
					    mad r1.y, r1.x, r1.y, v1.y
					    mov r1.x, v1.x
					    mad o2, c5.xyxy, r0.wxxw, r1.xyxy
					    mad o3, c5.xyxy, r0.zxxz, r1.xyxy
					    mad o4, c5.xyxy, r0.yxxy, r1.xyxy
					    mov o1.xy, r1
					
					// approximately 13 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_PREDICATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_PREDICATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _Params1;
					//   float2 _Params2;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Params1     c0       1
					//   _Params2     c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 0.212599993, 0.715200007, 0.0722000003, 0
					    def c3, 1, 0, -1, -0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_2d s0
					    texld r0, v0, s0
					    dp3 r0.x, r0, c2
					    texld r1, v1, s0
					    dp3 r1.x, r1, c2
					    texld r2, v1.zwzw, s0
					    dp3 r1.y, r2, c2
					    add r0.yz, r0.x, -r1.xxyw
					    add r1.zw, r0_abs.xyyz, -c0.x
					    cmp r1.zw, r1, c3.x, c3.y
					    dp2add r0.w, r1.zwzw, c3.x, c3.y
					    cmp r2, -r0.w, c3.z, c3.w
					    texkill r2
					    texld r2, v2, s0
					    dp3 r2.x, r2, c2
					    texld r3, v2.zwzw, s0
					    dp3 r2.y, r3, c2
					    add r0.xw, r0.x, -r2.xyzy
					    max r2.xy, r0_abs.yzzw, r0_abs.xwzw
					    texld r3, v3, s0
					    dp3 r3.x, r3, c2
					    texld r4, v3.zwzw, s0
					    dp3 r3.y, r4, c2
					    add r0.xw, r1.xyzy, -r3.xyzy
					    max r1.xy, r2, r0_abs.xwzw
					    max r0.x, r1.x, r1.y
					    mad r0.xy, c1.y, r0_abs.yzzw, -r0.x
					    cmp r0.xy, r0, r1.zwzw, c2.w
					    mov oC0.xy, r0
					    mov oC0.zw, c2.w
					
					// approximately 30 instruction slots used (7 texture, 23 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec4 unused_0_3[12];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat1.y = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat4.xy = u_xlat0.xx + (-u_xlat1.xy);
					    u_xlatb9.xy = greaterThanEqual(abs(u_xlat4.xyxy), _Params1.xxxx).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat12 = dot(u_xlat9.xy, vec2(1.0, 1.0));
					    u_xlatb12 = u_xlat12==0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat0.xw = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlat0.xw = max(abs(u_xlat0.xw), abs(u_xlat4.xy));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
					    u_xlat0.xw = max(u_xlat0.xw, abs(u_xlat1.xy));
					    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
					    u_xlat4.xy = abs(u_xlat4.xy) * _Params2.yy;
					    u_xlatb0.xy = greaterThanEqual(u_xlat4.xyxx, u_xlat0.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat0.xy * u_xlat9.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec4 unused_0_3[12];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat1.y = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat4.xy = u_xlat0.xx + (-u_xlat1.xy);
					    u_xlatb9.xy = greaterThanEqual(abs(u_xlat4.xyxy), _Params1.xxxx).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat12 = dot(u_xlat9.xy, vec2(1.0, 1.0));
					    u_xlatb12 = u_xlat12==0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat0.xw = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlat0.xw = max(abs(u_xlat0.xw), abs(u_xlat4.xy));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
					    u_xlat0.xw = max(u_xlat0.xw, abs(u_xlat1.xy));
					    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
					    u_xlat4.xy = abs(u_xlat4.xy) * _Params2.yy;
					    u_xlatb0.xy = greaterThanEqual(u_xlat4.xyxx, u_xlat0.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat0.xy * u_xlat9.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_PREDICATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _Params1;
					//   float2 _Params2;
					//   float3 _Params3;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _Params1            c0       1
					//   _Params2            c1       1
					//   _Params3            c2       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.212599993, 0.715200007, 0.0722000003
					    def c4, 1, 0, -1, -0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    texld r1, v1, s1
					    texld r2, v1.zwzw, s1
					    mov r1.y, r2.x
					    add r0.xy, r0.x, -r1
					    add r0.xy, r0_abs, -c2.x
					    mov r1.yz, c2
					    mul r0.z, r1.y, c0.x
					    add r0.w, -r1.z, c3.x
					    cmp r0.xy, r0, r0.w, c3.x
					    texld r1, v0, s0
					    dp3 r0.w, r1, c3.yzww
					    texld r1, v1, s0
					    dp3 r1.x, r1, c3.yzww
					    texld r2, v1.zwzw, s0
					    dp3 r1.y, r2, c3.yzww
					    add r1.zw, r0.w, -r1.xyxy
					    mad r0.xy, r0.z, -r0, r1_abs.zwzw
					    cmp r0.xy, r0, c4.x, c4.y
					    dp2add r0.z, r0, c4.x, c4.y
					    cmp r2, -r0.z, c4.z, c4.w
					    texkill r2
					    texld r2, v2, s0
					    dp3 r2.x, r2, c3.yzww
					    texld r3, v2.zwzw, s0
					    dp3 r2.y, r3, c3.yzww
					    add r0.zw, r0.w, -r2.xyxy
					    max r2.xy, r1_abs.zwzw, r0_abs.zwzw
					    texld r3, v3, s0
					    dp3 r3.x, r3, c3.yzww
					    texld r4, v3.zwzw, s0
					    dp3 r3.y, r4, c3.yzww
					    add r0.zw, r1.xyxy, -r3.xyxy
					    max r1.xy, r2, r0_abs.zwzw
					    max r0.z, r1.x, r1.y
					    mad r0.zw, c1.y, r1_abs, -r0.z
					    cmp r0.xy, r0.zwzw, r0, c4.y
					    mov oC0.xy, r0
					    mov oC0.zw, c4.y
					
					// approximately 40 instruction slots used (10 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_PREDICATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec3 _Params3;
						vec4 unused_0_4[11];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					bvec2 u_xlatb8;
					vec2 u_xlat9;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = texture(_CameraDepthTexture, vs_TEXCOORD1.zw).yxzw;
					    u_xlat2.x = u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat0.xyxx), _Params3.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat8.x = _Params1.x * _Params3.y;
					    u_xlat0.xy = (-_Params3.zz) * u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat8.xx;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.x = dot(u_xlat1.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat1.y = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat9.xy = u_xlat8.xx + (-u_xlat1.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat9.xyxx), u_xlat0.xyxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat12 = dot(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlatb12 = u_xlat12==0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat8.xy = u_xlat8.xx + (-u_xlat2.xy);
					    u_xlat8.xy = max(abs(u_xlat8.xy), abs(u_xlat9.xy));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
					    u_xlat8.xy = max(u_xlat8.xy, abs(u_xlat1.xy));
					    u_xlat8.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat1.xy = abs(u_xlat9.xy) * _Params2.yy;
					    u_xlatb8.xy = greaterThanEqual(u_xlat1.xyxy, u_xlat8.xxxx).xy;
					    u_xlat8.x = u_xlatb8.x ? float(1.0) : 0.0;
					    u_xlat8.y = u_xlatb8.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_PREDICATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec3 _Params3;
						vec4 unused_0_4[11];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					bvec2 u_xlatb8;
					vec2 u_xlat9;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = texture(_CameraDepthTexture, vs_TEXCOORD1.zw).yxzw;
					    u_xlat2.x = u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat0.xyxx), _Params3.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat8.x = _Params1.x * _Params3.y;
					    u_xlat0.xy = (-_Params3.zz) * u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat8.xx;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.x = dot(u_xlat1.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat1.y = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat9.xy = u_xlat8.xx + (-u_xlat1.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat9.xyxx), u_xlat0.xyxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat12 = dot(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlatb12 = u_xlat12==0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat8.xy = u_xlat8.xx + (-u_xlat2.xy);
					    u_xlat8.xy = max(abs(u_xlat8.xy), abs(u_xlat9.xy));
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat2.x = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat2.y = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
					    u_xlat8.xy = max(u_xlat8.xy, abs(u_xlat1.xy));
					    u_xlat8.x = max(u_xlat8.y, u_xlat8.x);
					    u_xlat1.xy = abs(u_xlat9.xy) * _Params2.yy;
					    u_xlatb8.xy = greaterThanEqual(u_xlat1.xyxy, u_xlat8.xxxx).xy;
					    u_xlat8.x = u_xlatb8.x ? float(1.0) : 0.0;
					    u_xlat8.y = u_xlatb8.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 168787
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Metrics;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Metrics           c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0, c6
					    slt r1.x, c4.y, r0.x
					    mad r1.y, v1.y, c6.y, c6.z
					    mad r1.y, r1.x, r1.y, v1.y
					    mov r1.x, v1.x
					    mad o2, c5.xyxy, r0.wxxw, r1.xyxy
					    mad o3, c5.xyxy, r0.zxxz, r1.xyxy
					    mad o4, c5.xyxy, r0.yxxy, r1.xyxy
					    mov o1.xy, r1
					
					// approximately 13 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_PREDICATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Metrics;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Metrics           c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0, c6
					    slt r1.x, c4.y, r0.x
					    mad r1.y, v1.y, c6.y, c6.z
					    mad r1.y, r1.x, r1.y, v1.y
					    mov r1.x, v1.x
					    mad o2, c5.xyxy, r0.wxxw, r1.xyxy
					    mad o3, c5.xyxy, r0.zxxz, r1.xyxy
					    mad o4, c5.xyxy, r0.yxxy, r1.xyxy
					    mov o1.xy, r1
					
					// approximately 13 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_PREDICATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_PREDICATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _Params1;
					//   float2 _Params2;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Params1     c0       1
					//   _Params2     c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, -1, -0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_2d s0
					    texld r0, v0, s0
					    texld r1, v1, s0
					    add r1.xyz, r0, -r1
					    max r0.w, r1_abs.x, r1_abs.y
					    max r2.x, r0.w, r1_abs.z
					    texld r1, v1.zwzw, s0
					    add r1.xyz, r0, -r1
					    max r0.w, r1_abs.x, r1_abs.y
					    max r2.y, r0.w, r1_abs.z
					    add r1.xy, r2, -c0.x
					    cmp r1.xy, r1, c2.x, c2.y
					    dp2add r0.w, r1, c2.x, c2.y
					    cmp r3, -r0.w, c2.z, c2.w
					    texkill r3
					    texld r3, v2, s0
					    add r3.xyz, r0, -r3
					    max r0.w, r3_abs.x, r3_abs.y
					    max r4.x, r0.w, r3_abs.z
					    texld r3, v2.zwzw, s0
					    add r3.xyz, r0, -r3
					    max r0.w, r3_abs.x, r3_abs.y
					    max r4.y, r0.w, r3_abs.z
					    max r1.zw, r2.xyxy, r4.xyxy
					    texld r3, v3, s0
					    add r3.xyz, r0, -r3
					    max r0.w, r3_abs.x, r3_abs.y
					    max r4.x, r0.w, r3_abs.z
					    texld r3, v3.zwzw, s0
					    add r0.xyz, r0, -r3
					    max r2.z, r0_abs.x, r0_abs.y
					    max r4.y, r2.z, r0_abs.z
					    max r0.xy, r1.zwzw, r4
					    max r1.z, r0.x, r0.y
					    mad r0.xy, c1.y, r2, -r1.z
					    cmp r0.xy, r0, r1, c2.y
					    mov oC0.xy, r0
					    mov oC0.zw, c2.y
					
					// approximately 38 instruction slots used (7 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec4 unused_0_3[12];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat11;
					bvec2 u_xlatb11;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat1.x = max(abs(u_xlat1.z), u_xlat15);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = max(abs(u_xlat2.y), abs(u_xlat2.x));
					    u_xlat1.y = max(abs(u_xlat2.z), u_xlat15);
					    u_xlatb11.xy = greaterThanEqual(u_xlat1.xyxy, _Params1.xxxx).xy;
					    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
					    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
					;
					    u_xlat15 = dot(u_xlat11.xy, vec2(1.0, 1.0));
					    u_xlatb15 = u_xlat15==0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = max(abs(u_xlat2.y), abs(u_xlat2.x));
					    u_xlat2.x = max(abs(u_xlat2.z), u_xlat15);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat3.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat15 = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat2.y = max(abs(u_xlat3.z), u_xlat15);
					    u_xlat2.xy = max(u_xlat1.xy, u_xlat2.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat3.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat15 = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat3.x = max(abs(u_xlat3.z), u_xlat15);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.x = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat3.y = max(abs(u_xlat0.z), u_xlat0.x);
					    u_xlat0.xy = max(u_xlat2.xy, u_xlat3.xy);
					    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
					    u_xlat5.xy = u_xlat1.xy * _Params2.yy;
					    u_xlatb0.xy = greaterThanEqual(u_xlat5.xyxx, u_xlat0.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat0.xy * u_xlat11.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec4 unused_0_3[12];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat11;
					bvec2 u_xlatb11;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat1.x = max(abs(u_xlat1.z), u_xlat15);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = max(abs(u_xlat2.y), abs(u_xlat2.x));
					    u_xlat1.y = max(abs(u_xlat2.z), u_xlat15);
					    u_xlatb11.xy = greaterThanEqual(u_xlat1.xyxy, _Params1.xxxx).xy;
					    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
					    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
					;
					    u_xlat15 = dot(u_xlat11.xy, vec2(1.0, 1.0));
					    u_xlatb15 = u_xlat15==0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = max(abs(u_xlat2.y), abs(u_xlat2.x));
					    u_xlat2.x = max(abs(u_xlat2.z), u_xlat15);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat3.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat15 = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat2.y = max(abs(u_xlat3.z), u_xlat15);
					    u_xlat2.xy = max(u_xlat1.xy, u_xlat2.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat3.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat15 = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat3.x = max(abs(u_xlat3.z), u_xlat15);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.x = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat3.y = max(abs(u_xlat0.z), u_xlat0.x);
					    u_xlat0.xy = max(u_xlat2.xy, u_xlat3.xy);
					    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
					    u_xlat5.xy = u_xlat1.xy * _Params2.yy;
					    u_xlatb0.xy = greaterThanEqual(u_xlat5.xyxx, u_xlat0.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat0.xy * u_xlat11.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_PREDICATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _Params1;
					//   float2 _Params2;
					//   float3 _Params3;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _Params1            c0       1
					//   _Params2            c1       1
					//   _Params3            c2       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1, -0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    texld r1, v1, s1
					    texld r2, v1.zwzw, s1
					    mov r1.y, r2.x
					    add r0.xy, r0.x, -r1
					    add r0.xy, r0_abs, -c2.x
					    mov r1.yz, c2
					    mul r0.z, r1.y, c0.x
					    add r0.w, -r1.z, c3.x
					    cmp r0.xy, r0, r0.w, c3.x
					    texld r1, v0, s0
					    texld r2, v1, s0
					    add r2.xyz, r1, -r2
					    max r0.w, r2_abs.x, r2_abs.y
					    max r3.x, r0.w, r2_abs.z
					    texld r2, v1.zwzw, s0
					    add r2.xyz, r1, -r2
					    max r0.w, r2_abs.x, r2_abs.y
					    max r3.y, r0.w, r2_abs.z
					    mad r0.xy, r0.z, -r0, r3
					    cmp r0.xy, r0, c3.x, c3.y
					    dp2add r0.z, r0, c3.x, c3.y
					    cmp r2, -r0.z, c3.z, c3.w
					    texkill r2
					    texld r2, v2, s0
					    add r2.xyz, r1, -r2
					    max r0.z, r2_abs.x, r2_abs.y
					    max r4.x, r0.z, r2_abs.z
					    texld r2, v2.zwzw, s0
					    add r2.xyz, r1, -r2
					    max r0.z, r2_abs.x, r2_abs.y
					    max r4.y, r0.z, r2_abs.z
					    max r0.zw, r3.xyxy, r4.xyxy
					    texld r2, v3, s0
					    add r2.xyz, r1, -r2
					    max r1.w, r2_abs.x, r2_abs.y
					    max r4.x, r1.w, r2_abs.z
					    texld r2, v3.zwzw, s0
					    add r1.xyz, r1, -r2
					    max r2.x, r1_abs.x, r1_abs.y
					    max r4.y, r2.x, r1_abs.z
					    max r1.xy, r0.zwzw, r4
					    max r0.z, r1.x, r1.y
					    mad r0.zw, c1.y, r3.xyxy, -r0.z
					    cmp r0.xy, r0.zwzw, r0, c3.y
					    mov oC0.xy, r0
					    mov oC0.zw, c3.y
					
					// approximately 48 instruction slots used (10 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_PREDICATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec3 _Params3;
						vec4 unused_0_4[11];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = texture(_CameraDepthTexture, vs_TEXCOORD1.zw).yxzw;
					    u_xlat2.x = u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat0.xyxx), _Params3.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat10.x = _Params1.x * _Params3.y;
					    u_xlat0.xy = (-_Params3.zz) * u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat10.xx;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat10.x = max(abs(u_xlat2.y), abs(u_xlat2.x));
					    u_xlat2.x = max(abs(u_xlat2.z), u_xlat10.x);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat10.x = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat2.y = max(abs(u_xlat3.z), u_xlat10.x);
					    u_xlatb0.xy = greaterThanEqual(u_xlat2.xyxx, u_xlat0.xyxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat10.x = dot(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlatb10.x = u_xlat10.x==0.0;
					    if(((int(u_xlatb10.x) * int(0xffffffffu)))!=0){discard;}
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat10.x = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat3.x = max(abs(u_xlat3.z), u_xlat10.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat4.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat10.x = max(abs(u_xlat4.y), abs(u_xlat4.x));
					    u_xlat3.y = max(abs(u_xlat4.z), u_xlat10.x);
					    u_xlat10.xy = max(u_xlat2.xy, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat16 = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat3.x = max(abs(u_xlat3.z), u_xlat16);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat1.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat3.y = max(abs(u_xlat1.z), u_xlat1.x);
					    u_xlat10.xy = max(u_xlat10.xy, u_xlat3.xy);
					    u_xlat10.x = max(u_xlat10.y, u_xlat10.x);
					    u_xlat1.xy = u_xlat2.xy * _Params2.yy;
					    u_xlatb10.xy = greaterThanEqual(u_xlat1.xyxy, u_xlat10.xxxx).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_PREDICATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec2 _Params2;
						vec3 _Params3;
						vec4 unused_0_4[11];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = texture(_CameraDepthTexture, vs_TEXCOORD1.zw).yxzw;
					    u_xlat2.x = u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat0.xyxx), _Params3.xxxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat10.x = _Params1.x * _Params3.y;
					    u_xlat0.xy = (-_Params3.zz) * u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat10.xx;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat10.x = max(abs(u_xlat2.y), abs(u_xlat2.x));
					    u_xlat2.x = max(abs(u_xlat2.z), u_xlat10.x);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat10.x = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat2.y = max(abs(u_xlat3.z), u_xlat10.x);
					    u_xlatb0.xy = greaterThanEqual(u_xlat2.xyxx, u_xlat0.xyxx).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat10.x = dot(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlatb10.x = u_xlat10.x==0.0;
					    if(((int(u_xlatb10.x) * int(0xffffffffu)))!=0){discard;}
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat10.x = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat3.x = max(abs(u_xlat3.z), u_xlat10.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat4.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat10.x = max(abs(u_xlat4.y), abs(u_xlat4.x));
					    u_xlat3.y = max(abs(u_xlat4.z), u_xlat10.x);
					    u_xlat10.xy = max(u_xlat2.xy, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat16 = max(abs(u_xlat3.y), abs(u_xlat3.x));
					    u_xlat3.x = max(abs(u_xlat3.z), u_xlat16);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat1.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat3.y = max(abs(u_xlat1.z), u_xlat1.x);
					    u_xlat10.xy = max(u_xlat10.xy, u_xlat3.xy);
					    u_xlat10.x = max(u_xlat10.y, u_xlat10.x);
					    u_xlat1.xy = u_xlat2.xy * _Params2.yy;
					    u_xlatb10.xy = greaterThanEqual(u_xlat1.xyxy, u_xlat10.xxxx).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 260530
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Metrics;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Metrics           c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0, c6
					    slt r1.x, c4.y, r0.x
					    mad r1.y, v1.y, c6.y, c6.z
					    mad r1.y, r1.x, r1.y, v1.y
					    mov r1.x, v1.x
					    mad o2, c5.xyxy, r0.wxxw, r1.xyxy
					    mad o3, c5.xyxy, r0.zxxz, r1.xyxy
					    mad o4, c5.xyxy, r0.yxxy, r1.xyxy
					    mov o1.xy, r1
					
					// approximately 13 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 _MainTex_TexelSize;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD2 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + u_xlat0.xyxy;
					    vs_TEXCOORD3 = _Metrics.xyxy * vec4(-2.0, 0.0, 0.0, -2.0) + u_xlat0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _Params1;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _Params1            c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0, -1, -0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    texld r0, v0, s0
					    texld r1, v1, s0
					    texld r2, v1.zwzw, s0
					    mov r1.y, r2.x
					    add r0.xy, r0.x, -r1
					    add r0.xy, r0_abs, -c0.y
					    cmp r0.xy, r0, c1.x, c1.y
					    dp2add r0.z, r0, c1.x, c1.y
					    cmp r1, -r0.z, c1.z, c1.w
					    texkill r1
					    mov oC0.xy, r0
					    mov oC0.zw, c1.y
					
					// approximately 13 instruction slots used (3 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec4 unused_0_2[13];
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = texture(_CameraDepthTexture, vs_TEXCOORD1.zw).yxzw;
					    u_xlat2.x = u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat0.xyxx), _Params1.yyyy).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat6 = dot(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlatb6 = u_xlat6==0.0;
					    if(((int(u_xlatb6) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _Params1;
						vec4 unused_0_2[13];
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = texture(_CameraDepthTexture, vs_TEXCOORD1.zw).yxzw;
					    u_xlat2.x = u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + (-u_xlat2.xy);
					    u_xlatb0.xy = greaterThanEqual(abs(u_xlat0.xyxx), _Params1.yyyy).xy;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
					;
					    u_xlat6 = dot(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlatb6 = u_xlat6==0.0;
					    if(((int(u_xlatb6) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xy = u_xlat0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 272272
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Metrics;
					//   float4 _Params1;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Metrics           c4       1
					//   _Params1           c5       1
					//
					
					    vs_3_0
					    def c6, -0.25, -0.125, 1.25, 0
					    def c7, -2, 2, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mul o2.xy, c4.zwzw, v1
					    mov r0.xy, c4
					    mul r1, r0.xxyy, c5.z
					    mad r2, r0.xxyy, c6.xzyy, v1.xxyy
					    mov o3, r2.xzyw
					    mad r0, r0.xyxy, c6.yxyz, v1.xyxy
					    mov r2.zw, r0.xyyw
					    mov o4, r0
					    mad o5, r1, c7.xyxy, r2
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_CORNER_DETECTION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Metrics;
					//   float4 _Params1;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Metrics           c4       1
					//   _Params1           c5       1
					//
					
					    vs_3_0
					    def c6, -0.25, -0.125, 1.25, 0
					    def c7, -2, 2, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mul o2.xy, c4.zwzw, v1
					    mov r0.xy, c4
					    mul r1, r0.xxyy, c5.z
					    mad r2, r0.xxyy, c6.xzyy, v1.xxyy
					    mov o3, r2.xzyw
					    mad r0, r0.xyxy, c6.yxyz, v1.xyxy
					    mov r2.zw, r0.xyyw
					    mov o4, r0
					    mad o5, r1, c7.xyxy, r2
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_CORNER_DETECTION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_CORNER_DETECTION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_DIAG_SEARCH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Metrics;
					//   float4 _Params1;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Metrics           c4       1
					//   _Params1           c5       1
					//
					
					    vs_3_0
					    def c6, -0.25, -0.125, 1.25, 0
					    def c7, -2, 2, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mul o2.xy, c4.zwzw, v1
					    mov r0.xy, c4
					    mul r1, r0.xxyy, c5.z
					    mad r2, r0.xxyy, c6.xzyy, v1.xxyy
					    mov o3, r2.xzyw
					    mad r0, r0.xyxy, c6.yxyz, v1.xyxy
					    mov r2.zw, r0.xyyw
					    mov o4, r0
					    mad o5, r1, c7.xyxy, r2
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_DIAG_SEARCH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_DIAG_SEARCH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_CORNER_DETECTION" "USE_DIAG_SEARCH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Metrics;
					//   float4 _Params1;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Metrics           c4       1
					//   _Params1           c5       1
					//
					
					    vs_3_0
					    def c6, -0.25, -0.125, 1.25, 0
					    def c7, -2, 2, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mul o2.xy, c4.zwzw, v1
					    mov r0.xy, c4
					    mul r1, r0.xxyy, c5.z
					    mad r2, r0.xxyy, c6.xzyy, v1.xxyy
					    mov o3, r2.xzyw
					    mad r0, r0.xyxy, c6.yxyz, v1.xyxy
					    mov r2.zw, r0.xyyw
					    mov o4, r0
					    mad o5, r1, c7.xyxy, r2
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_CORNER_DETECTION" "USE_DIAG_SEARCH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_CORNER_DETECTION" "USE_DIAG_SEARCH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[13];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Metrics.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Metrics.xxyy * vec4(-0.25, 1.25, -0.125, -0.125) + in_TEXCOORD0.xxyy;
					    vs_TEXCOORD2 = u_xlat0.xzyw;
					    u_xlat1 = _Metrics.xyxy * vec4(-0.125, -0.25, -0.125, 1.25) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat1;
					    u_xlat0.zw = u_xlat1.yw;
					    u_xlat1 = _Metrics.xxyy * _Params1.zzzz;
					    vs_TEXCOORD4 = u_xlat1 * vec4(-2.0, 2.0, -2.0, 2.0) + u_xlat0;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _AreaTex;
					//   sampler2D _MainTex;
					//   float4 _Metrics;
					//   sampler2D _SearchTex;
					//   float4 _SubsampleIndices;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Metrics          c0       1
					//   _SubsampleIndices c1       1
					//   _MainTex          s0       1
					//   _AreaTex          s1       1
					//   _SearchTex        s2       1
					//
					
					    ps_3_0
					    def c2, 0.5, -2, 0.0078125, 2.03125
					    def c3, 0.00625000009, 0.0017857143, 0.00312500005, 0.000892857148
					    def c4, 0, 0, 1, 0.828100026
					    def c5, 0.5, -2, 0.5234375, 2.03125
					    def c6, -2, -0, -2.00787401, 3.25
					    def c7, 4, 0.5, 16, 0.142857149
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    if_lt -r0.y, c4.x
					      mov r1.xy, v2
					      mov r1.z, c4.z
					      mov r2.x, c4.x
					      rep i0
					        add r0.y, -r1.x, v4.x
					        add r0.z, -r1.z, c4.w
					        cmp r0.w, -r2_abs.x, -c4.z, -c4.x
					        cmp r0.z, r0.z, c4.x, r0.w
					        cmp r0.y, r0.y, c4.x, r0.z
					        cmp r0.y, r0.y, c4.z, c4.x
					        break_ne r0.y, -r0.y
					        mul r3, r1.xyxx, c4.zzxx
					        texldl r2, r3, s0
					        mov r3.xy, c0
					        mad r1.xy, r3, c6, r1
					        mov r1.z, r2.y
					      endrep
					      mov r2.yz, r1.xxzw
					      mad r1.xy, r2.xzzw, c2, c2.zwzw
					      mov r1.zw, c4.x
					      texldl r1, r1, s2
					      mad r0.y, r1.w, c6.z, c6.w
					      mad r1.x, c0.x, r0.y, r2.y
					      mul r1.yz, c4.xzxw, v3.y
					      texldl r2, r1.xyzz, s0
					      mov r3.xy, v2.zwzw
					      mov r3.z, c4.z
					      mov r4.x, c4.x
					      rep i0
					        add r0.y, r3.x, -v4.y
					        add r0.z, -r3.z, c4.w
					        cmp r0.w, -r4_abs.x, -c4.z, -c4.x
					        cmp r0.z, r0.z, c4.x, r0.w
					        cmp r0.y, r0.y, c4.x, r0.z
					        cmp r0.y, r0.y, c4.z, c4.x
					        break_ne r0.y, -r0.y
					        mul r5, r3.xyxx, c4.zzxx
					        texldl r4, r5, s0
					        mov r5.xy, c0
					        mad r3.xy, r5, -c6, r3
					        mov r3.z, r4.y
					      endrep
					      mov r4.yz, r3.xxzw
					      mad r3.xy, r4.xzzw, c5, c5.zwzw
					      mov r3.zw, c4.x
					      texldl r3, r3, s2
					      mad r0.y, r3.w, c6.z, c6.w
					      mad r1.w, -c0.x, r0.y, r4.y
					      mad r0.yz, c0.z, r1.xxww, -v1.x
					      add r0.yz, r0, c2.x
					      frc r1.xz, r0.yyzw
					      add r0.yz, r0, -r1.xxzw
					      rsq r0.y, r0_abs.y
					      rsq r0.z, r0_abs.z
					      rcp r3.x, r0.y
					      rcp r3.y, r0.z
					      mov r1.xz, c4
					      mad r1.xy, c0, r1.zxzw, r1.wyzw
					      mov r1.zw, c4.x
					      texldl r1, r1, s0
					      mov r2.y, r1.x
					      mad r0.yz, r2.xxyw, c7.x, c7.y
					      frc r1.xy, r0.yzzw
					      add r0.yz, r0, -r1.xxyw
					      mad r0.yz, r0, c7.z, r3.xxyw
					      mad r1.xy, r0.yzzw, c3, c3.zwzw
					      mov r0.w, c7.w
					      mad r1.z, c1.y, r0.w, r1.y
					      mov r1.w, c4.x
					      texldl r1, r1.xzww, s1
					      mov oC0.xy, r1
					    else
					      mov oC0.xy, c4.x
					    endif
					    if_lt -r0.x, c4.x
					      mov r0.xy, v3
					      mov r0.z, c4.z
					      mov r1.x, c4.x
					      rep i0
					        add r0.w, -r0.y, v4.z
					        add r1.w, -r0.z, c4.w
					        cmp r2.x, -r1_abs.x, -c4.z, -c4.x
					        cmp r1.w, r1.w, c4.x, r2.x
					        cmp r0.w, r0.w, c4.x, r1.w
					        cmp r0.w, r0.w, c4.z, c4.x
					        break_ne r0.w, -r0.w
					        mul r2, r0.xyxx, c4.zzxx
					        texldl r2, r2, s0
					        mov r3.xy, c0
					        mad r0.xy, r3, c6.yxzw, r0
					        mov r0.z, r2.x
					        mov r1.x, r2.y
					      endrep
					      mov r1.yz, r0
					      mad r0.xy, r1.xzzw, c2, c2.zwzw
					      mov r0.zw, c4.x
					      texldl r0, r0, s2
					      mad r0.x, r0.w, c6.z, c6.w
					      mad r0.x, c0.y, r0.x, r1.y
					      mul r0.yz, c4.xzxw, v2.x
					      texldl r1, r0.yxzz, s0
					      mov r2.xy, v3.zwzw
					      mov r2.z, c4.z
					      mov r3.x, c4.x
					      rep i0
					        add r0.y, r2.y, -v4.w
					        add r0.z, -r2.z, c4.w
					        cmp r1.x, -r3_abs.x, -c4.z, -c4.x
					        cmp r0.z, r0.z, c4.x, r1.x
					        cmp r0.y, r0.y, c4.x, r0.z
					        cmp r0.y, r0.y, c4.z, c4.x
					        break_ne r0.y, -r0.y
					        mul r4, r2.xyxx, c4.zzxx
					        texldl r4, r4, s0
					        mov r5.xy, c0
					        mad r2.xy, r5, -c6.yxzw, r2
					        mov r2.z, r4.x
					        mov r3.x, r4.y
					      endrep
					      mov r3.yz, r2
					      mad r2.xy, r3.xzzw, c5, c5.zwzw
					      mov r2.zw, c4.x
					      texldl r2, r2, s2
					      mad r0.y, r2.w, c6.z, c6.w
					      mad r0.w, -c0.y, r0.y, r3.y
					      mad r0.xy, c0.w, r0.xwzw, -v1.y
					      add r0.xy, r0, c2.x
					      frc r1.xz, r0.xyyw
					      add r0.xy, r0, -r1.xzzw
					      rsq r0.x, r0_abs.x
					      rsq r0.y, r0_abs.y
					      rcp r2.x, r0.x
					      rcp r2.y, r0.y
					      mov r0.x, c0.y
					      add r0.y, r0.x, r0.w
					      mul r0.zw, c4.xyzx, v2.x
					      texldl r0, r0.zyww, s0
					      mov r0.x, r1.y
					      mad r0.xy, r0, c7.x, c7.y
					      frc r0.zw, r0.xyxy
					      add r0.xy, -r0.zwzw, r0
					      mad r0.xy, r0, c7.z, r2
					      mad r0.xy, r0, c3, c3.zwzw
					      mov r1.w, c7.w
					      mad r0.z, c1.x, r1.w, r0.y
					      mov r0.w, c4.x
					      texldl r0, r0.xzww, s1
					      mov oC0.zw, r0.xyxy
					    else
					      mov oC0.zw, c4.x
					    endif
					
					// approximately 191 instruction slots used (29 texture, 162 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[7];
						vec4 _SubsampleIndices;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SearchTex;
					uniform  sampler2D _AreaTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb0.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.yxyy).xy;
					    if(u_xlatb0.x){
					        u_xlat1.xy = vs_TEXCOORD2.xy;
					        u_xlat1.z = 1.0;
					        u_xlat2.x = 0.0;
					        while(true){
					            u_xlatb0.x = vs_TEXCOORD4.x<u_xlat1.x;
					            u_xlatb10 = 0.828100026<u_xlat1.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat2.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					            u_xlat1.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat1.xy;
					            u_xlat1.z = u_xlat2.y;
					        }
					        u_xlat2.yz = u_xlat1.xz;
					        u_xlat0.xz = u_xlat2.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat1 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat1.w * -2.00787401 + 3.25;
					        u_xlat1.x = _Metrics.x * u_xlat0.x + u_xlat2.y;
					        u_xlat1.y = vs_TEXCOORD3.y;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat3.xy = vs_TEXCOORD2.zw;
					        u_xlat3.z = 1.0;
					        u_xlat4.x = 0.0;
					        while(true){
					            u_xlatb0.x = u_xlat3.x<vs_TEXCOORD4.y;
					            u_xlatb10 = 0.828100026<u_xlat3.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat4.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					            u_xlat3.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat3.xy;
					            u_xlat3.z = u_xlat4.y;
					        }
					        u_xlat4.yz = u_xlat3.xz;
					        u_xlat0.xz = u_xlat4.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat3 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat3.w * -2.00787401 + 3.25;
					        u_xlat1.z = (-_Metrics.x) * u_xlat0.x + u_xlat4.y;
					        u_xlat0.xz = _Metrics.zz * u_xlat1.xz + (-vs_TEXCOORD1.xx);
					        u_xlat0.xz = roundEven(u_xlat0.xz);
					        u_xlat0.xz = sqrt(abs(u_xlat0.xz));
					        u_xlat1.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat1.zy;
					        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0).yxzw;
					        u_xlat1.x = u_xlat2.x;
					        u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					        u_xlat1.xy = roundEven(u_xlat1.xy);
					        u_xlat0.xz = u_xlat1.xy * vec2(16.0, 16.0) + u_xlat0.xz;
					        u_xlat1.xy = u_xlat0.xz * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat1.z = _SubsampleIndices.y * 0.142857149 + u_xlat1.y;
					        u_xlat1 = textureLod(_AreaTex, u_xlat1.xz, 0.0);
					        SV_Target0.xy = u_xlat1.xy;
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    if(u_xlatb0.y){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb15 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            if(!u_xlatb15){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb15 = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb1 = 0.828100026<u_xlat2.z;
					            u_xlatb15 = u_xlatb15 && u_xlatb1;
					            u_xlatb1 = u_xlat3.x==0.0;
					            u_xlatb15 = u_xlatb15 && u_xlatb1;
					            if(!u_xlatb15){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat15 = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat15 + u_xlat3.y;
					        u_xlat0.xw = _Metrics.ww * u_xlat0.xz + (-vs_TEXCOORD1.yy);
					        u_xlat0.xw = roundEven(u_xlat0.xw);
					        u_xlat0.xw = sqrt(abs(u_xlat0.xw));
					        u_xlat5.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat2 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					        u_xlat2.x = u_xlat1.y;
					        u_xlat5.xy = u_xlat2.xy * vec2(4.0, 4.0);
					        u_xlat5.xy = roundEven(u_xlat5.xy);
					        u_xlat0.xy = u_xlat5.xy * vec2(16.0, 16.0) + u_xlat0.xw;
					        u_xlat0.xy = u_xlat0.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat0.z = _SubsampleIndices.x * 0.142857149 + u_xlat0.y;
					        u_xlat0 = textureLod(_AreaTex, u_xlat0.xz, 0.0);
					        SV_Target0.zw = u_xlat0.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[7];
						vec4 _SubsampleIndices;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SearchTex;
					uniform  sampler2D _AreaTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb0.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.yxyy).xy;
					    if(u_xlatb0.x){
					        u_xlat1.xy = vs_TEXCOORD2.xy;
					        u_xlat1.z = 1.0;
					        u_xlat2.x = 0.0;
					        while(true){
					            u_xlatb0.x = vs_TEXCOORD4.x<u_xlat1.x;
					            u_xlatb10 = 0.828100026<u_xlat1.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat2.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					            u_xlat1.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat1.xy;
					            u_xlat1.z = u_xlat2.y;
					        }
					        u_xlat2.yz = u_xlat1.xz;
					        u_xlat0.xz = u_xlat2.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat1 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat1.w * -2.00787401 + 3.25;
					        u_xlat1.x = _Metrics.x * u_xlat0.x + u_xlat2.y;
					        u_xlat1.y = vs_TEXCOORD3.y;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat3.xy = vs_TEXCOORD2.zw;
					        u_xlat3.z = 1.0;
					        u_xlat4.x = 0.0;
					        while(true){
					            u_xlatb0.x = u_xlat3.x<vs_TEXCOORD4.y;
					            u_xlatb10 = 0.828100026<u_xlat3.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat4.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					            u_xlat3.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat3.xy;
					            u_xlat3.z = u_xlat4.y;
					        }
					        u_xlat4.yz = u_xlat3.xz;
					        u_xlat0.xz = u_xlat4.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat3 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat3.w * -2.00787401 + 3.25;
					        u_xlat1.z = (-_Metrics.x) * u_xlat0.x + u_xlat4.y;
					        u_xlat0.xz = _Metrics.zz * u_xlat1.xz + (-vs_TEXCOORD1.xx);
					        u_xlat0.xz = roundEven(u_xlat0.xz);
					        u_xlat0.xz = sqrt(abs(u_xlat0.xz));
					        u_xlat1.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat1.zy;
					        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0).yxzw;
					        u_xlat1.x = u_xlat2.x;
					        u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					        u_xlat1.xy = roundEven(u_xlat1.xy);
					        u_xlat0.xz = u_xlat1.xy * vec2(16.0, 16.0) + u_xlat0.xz;
					        u_xlat1.xy = u_xlat0.xz * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat1.z = _SubsampleIndices.y * 0.142857149 + u_xlat1.y;
					        u_xlat1 = textureLod(_AreaTex, u_xlat1.xz, 0.0);
					        SV_Target0.xy = u_xlat1.xy;
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    if(u_xlatb0.y){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb15 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            if(!u_xlatb15){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb15 = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb1 = 0.828100026<u_xlat2.z;
					            u_xlatb15 = u_xlatb15 && u_xlatb1;
					            u_xlatb1 = u_xlat3.x==0.0;
					            u_xlatb15 = u_xlatb15 && u_xlatb1;
					            if(!u_xlatb15){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat15 = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat15 + u_xlat3.y;
					        u_xlat0.xw = _Metrics.ww * u_xlat0.xz + (-vs_TEXCOORD1.yy);
					        u_xlat0.xw = roundEven(u_xlat0.xw);
					        u_xlat0.xw = sqrt(abs(u_xlat0.xw));
					        u_xlat5.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat2 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					        u_xlat2.x = u_xlat1.y;
					        u_xlat5.xy = u_xlat2.xy * vec2(4.0, 4.0);
					        u_xlat5.xy = roundEven(u_xlat5.xy);
					        u_xlat0.xy = u_xlat5.xy * vec2(16.0, 16.0) + u_xlat0.xw;
					        u_xlat0.xy = u_xlat0.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat0.z = _SubsampleIndices.x * 0.142857149 + u_xlat0.y;
					        u_xlat0 = textureLod(_AreaTex, u_xlat0.xz, 0.0);
					        SV_Target0.zw = u_xlat0.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_CORNER_DETECTION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _AreaTex;
					//   sampler2D _MainTex;
					//   float4 _Metrics;
					//   float2 _Params2;
					//   sampler2D _SearchTex;
					//   float4 _SubsampleIndices;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Metrics          c0       1
					//   _Params2          c1       1
					//   _SubsampleIndices c2       1
					//   _MainTex          s0       1
					//   _AreaTex          s1       1
					//   _SearchTex        s2       1
					//
					
					    ps_3_0
					    def c3, 0.5, -2, 0.0078125, 2.03125
					    def c4, 0.00625000009, 0.0017857143, 0.00312500005, 0.000892857148
					    def c5, 0, 0, 1, 0.828100026
					    def c6, 0.5, -2, 0.5234375, 2.03125
					    def c7, -2, -0, -2.00787401, 3.25
					    def c8, 0.00999999978, 1, 0, -2
					    def c9, 4, 0.5, 16, 0.142857149
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    if_lt -r0.y, c5.x
					      mov r1.xy, v2
					      mov r1.z, c5.z
					      mov r2.x, c5.x
					      rep i0
					        add r0.y, -r1.x, v4.x
					        add r0.z, -r1.z, c5.w
					        cmp r0.w, -r2_abs.x, -c5.z, -c5.x
					        cmp r0.z, r0.z, c5.x, r0.w
					        cmp r0.y, r0.y, c5.x, r0.z
					        cmp r0.y, r0.y, c5.z, c5.x
					        break_ne r0.y, -r0.y
					        mul r3, r1.xyxx, c5.zzxx
					        texldl r2, r3, s0
					        mov r3.xy, c0
					        mad r1.xy, r3, c7, r1
					        mov r1.z, r2.y
					      endrep
					      mov r2.yz, r1.xxzw
					      mad r1.xy, r2.xzzw, c3, c3.zwzw
					      mov r1.zw, c5.x
					      texldl r1, r1, s2
					      mad r0.y, r1.w, c7.z, c7.w
					      mad r1.x, c0.x, r0.y, r2.y
					      mul r1.yw, c5.xzzx, v3.y
					      texldl r2, r1.xyww, s0
					      mov r3.xy, v2.zwzw
					      mov r3.z, c5.z
					      mov r4.x, c5.x
					      rep i0
					        add r0.y, r3.x, -v4.y
					        add r0.z, -r3.z, c5.w
					        cmp r0.w, -r4_abs.x, -c5.z, -c5.x
					        cmp r0.z, r0.z, c5.x, r0.w
					        cmp r0.y, r0.y, c5.x, r0.z
					        cmp r0.y, r0.y, c5.z, c5.x
					        break_ne r0.y, -r0.y
					        mul r5, r3.xyxx, c5.zzxx
					        texldl r4, r5, s0
					        mov r5.xy, c0
					        mad r3.xy, r5, -c7, r3
					        mov r3.z, r4.y
					      endrep
					      mov r4.yz, r3.xxzw
					      mad r3.xy, r4.xzzw, c6, c6.zwzw
					      mov r3.zw, c5.x
					      texldl r3, r3, s2
					      mad r0.y, r3.w, c7.z, c7.w
					      mad r1.z, -c0.x, r0.y, r4.y
					      mad r0.yz, c0.z, r1.xzxw, -v1.x
					      add r0.yz, r0, c3.x
					      frc r2.zw, r0.xyyz
					      add r0.yz, r0, -r2.xzww
					      rsq r0.w, r0_abs.z
					      rsq r2.z, r0_abs.y
					      rcp r3.x, r0.w
					      rcp r3.y, r2.z
					      mov r4.xz, c5
					      mad r5.xy, c0, r4.zxzw, r1.zyzw
					      mov r5.zw, c5.x
					      texldl r5, r5, s0
					      mov r2.y, r5.x
					      mad r2.xy, r2, c9.x, c9.y
					      frc r2.zw, r2.xyxy
					      add r2.xy, -r2.zwzw, r2
					      mad r2.xy, r2, c9.z, r3
					      mad r2.xy, r2, c4, c4.zwzw
					      mov r0.w, c9.w
					      mad r2.z, c2.y, r0.w, r2.y
					      mov r2.w, c5.x
					      texldl r2, r2.xzww, s1
					      add r0.yz, -r0_abs.xzyw, r0_abs
					      cmp r0.yz, r0, c5.z, c5.x
					      mov r3, c8
					      mad r0.w, c1.x, -r3.x, r3.y
					      mul r2.zw, r0.xyyz, r0.w
					      add r0.y, r0.z, r0.y
					      rcp r0.y, r0.y
					      mul r0.yz, r0.y, r2.xzww
					      mov r1.yw, v0.y
					      mad r4.xy, c0, r4.xzzw, r1
					      mov r4.zw, c5.x
					      texldl r4, r4, s0
					      mad r0.w, r0.y, -r4.x, c5.z
					      add r4.xy, r1.zwzw, c0
					      mov r4.zw, c5.x
					      texldl r4, r4, s0
					      mad_sat r4.x, r0.z, -r4.x, r0.w
					      mad r5.xy, c0, r3.zwzw, r1
					      mov r5.zw, c5.x
					      texldl r5, r5, s0
					      mad r0.y, r0.y, -r5.x, c5.z
					      mad r1.xy, c0, r3.ywzw, r1.zwzw
					      mov r1.zw, c5.x
					      texldl r1, r1, s0
					      mad_sat r4.y, r0.z, -r1.x, r0.y
					      mul oC0.xy, r2, r4
					    else
					      mov oC0.xy, c5.x
					    endif
					    if_lt -r0.x, c5.x
					      mov r0.xy, v3
					      mov r0.z, c5.z
					      mov r1.x, c5.x
					      rep i0
					        add r0.w, -r0.y, v4.z
					        add r1.w, -r0.z, c5.w
					        cmp r2.x, -r1_abs.x, -c5.z, -c5.x
					        cmp r1.w, r1.w, c5.x, r2.x
					        cmp r0.w, r0.w, c5.x, r1.w
					        cmp r0.w, r0.w, c5.z, c5.x
					        break_ne r0.w, -r0.w
					        mul r2, r0.xyxx, c5.zzxx
					        texldl r2, r2, s0
					        mov r3.xy, c0
					        mad r0.xy, r3, c7.yxzw, r0
					        mov r0.z, r2.x
					        mov r1.x, r2.y
					      endrep
					      mov r1.yz, r0
					      mad r0.xy, r1.xzzw, c3, c3.zwzw
					      mov r0.zw, c5.x
					      texldl r0, r0, s2
					      mad r0.x, r0.w, c7.z, c7.w
					      mad r0.y, c0.y, r0.x, r1.y
					      mul r0.xz, c5.zyxw, v2.x
					      texldl r1, r0.xyzz, s0
					      mov r2.xy, v3.zwzw
					      mov r2.z, c5.z
					      mov r3.x, c5.x
					      rep i0
					        add r1.x, r2.y, -v4.w
					        add r1.z, -r2.z, c5.w
					        cmp r1.w, -r3_abs.x, -c5.z, -c5.x
					        cmp r1.z, r1.z, c5.x, r1.w
					        cmp r1.x, r1.x, c5.x, r1.z
					        cmp r1.x, r1.x, c5.z, c5.x
					        break_ne r1.x, -r1.x
					        mul r4, r2.xyxx, c5.zzxx
					        texldl r4, r4, s0
					        mov r5.xy, c0
					        mad r2.xy, r5, -c7.yxzw, r2
					        mov r2.z, r4.x
					        mov r3.x, r4.y
					      endrep
					      mov r3.yz, r2
					      mad r2.xy, r3.xzzw, c6, c6.zwzw
					      mov r2.zw, c5.x
					      texldl r2, r2, s2
					      mad r1.x, r2.w, c7.z, c7.w
					      mad r0.w, -c0.y, r1.x, r3.y
					      mad r1.xz, c0.w, r0.wyyw, -v1.y
					      add r1.xz, r1, c3.x
					      frc r2.xy, r1.xzzw
					      add r1.xz, r1, -r2.xyyw
					      rsq r1.w, r1_abs.z
					      rsq r2.x, r1_abs.x
					      rcp r3.x, r1.w
					      rcp r3.y, r2.x
					      mov r2.xz, c5
					      mad r4.y, c0.y, r2.z, r0.w
					      mul r4.zw, c5.xyzx, v2.x
					      texldl r4, r4.zyww, s0
					      mov r4.x, r1.y
					      mad r1.yw, r4.xxzy, c9.x, c9.y
					      frc r2.yw, r1
					      add r1.yw, r1, -r2
					      mad r1.yw, r1, c9.z, r3.xxzy
					      mad r3.xy, r1.ywzw, c4, c4.zwzw
					      mov r1.w, c9.w
					      mad r3.z, c2.x, r1.w, r3.y
					      mov r3.w, c5.x
					      texldl r3, r3.xzww, s1
					      add r1.xy, -r1_abs.zxzw, r1_abs.xzzw
					      cmp r1.xy, r1, c5.z, c5.x
					      mov r4, c8
					      mad r1.z, c1.x, -r4.x, r4.y
					      mul r1.zw, r1.xyxy, r1.z
					      add r1.x, r1.y, r1.x
					      rcp r1.x, r1.x
					      mul r1.xy, r1.x, r1.zwzw
					      mov r0.xz, v0.x
					      mad r2.xy, c0, r2.zxzw, r0
					      mov r2.zw, c5.x
					      texldl r2, r2, s0
					      mad r1.z, r1.x, -r2.y, c5.z
					      add r2.xy, r0.zwzw, c0
					      mov r2.zw, c5.x
					      texldl r2, r2, s0
					      mad_sat r1.z, r1.y, -r2.y, r1.z
					      mad r2.xy, c0, r4.wzzw, r0
					      mov r2.zw, c5.x
					      texldl r2, r2, s0
					      mad r0.x, r1.x, -r2.y, c5.z
					      mad r2.xy, c0, r4.wyzw, r0.zwzw
					      mov r2.zw, c5.x
					      texldl r2, r2, s0
					      mad_sat r1.w, r1.y, -r2.y, r0.x
					      mul oC0.zw, r1, r3.xyxy
					    else
					      mov oC0.zw, c5.x
					    endif
					
					// approximately 249 instruction slots used (45 texture, 204 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_CORNER_DETECTION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2;
						vec2 _Params2;
						vec4 unused_0_4[5];
						vec4 _SubsampleIndices;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SearchTex;
					uniform  sampler2D _AreaTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec2 u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb10;
					vec2 u_xlat11;
					bool u_xlatb11;
					vec2 u_xlat12;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb0.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.yxyy).xy;
					    if(u_xlatb0.x){
					        u_xlat1.xy = vs_TEXCOORD2.xy;
					        u_xlat1.z = 1.0;
					        u_xlat2.x = 0.0;
					        while(true){
					            u_xlatb0.x = vs_TEXCOORD4.x<u_xlat1.x;
					            u_xlatb10 = 0.828100026<u_xlat1.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat2.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					            u_xlat1.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat1.xy;
					            u_xlat1.z = u_xlat2.y;
					        }
					        u_xlat2.yz = u_xlat1.xz;
					        u_xlat0.xz = u_xlat2.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat1 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat1.w * -2.00787401 + 3.25;
					        u_xlat1.x = _Metrics.x * u_xlat0.x + u_xlat2.y;
					        u_xlat1.y = vs_TEXCOORD3.y;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat3.xy = vs_TEXCOORD2.zw;
					        u_xlat3.z = 1.0;
					        u_xlat4.x = 0.0;
					        while(true){
					            u_xlatb0.x = u_xlat3.x<vs_TEXCOORD4.y;
					            u_xlatb10 = 0.828100026<u_xlat3.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat4.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					            u_xlat3.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat3.xy;
					            u_xlat3.z = u_xlat4.y;
					        }
					        u_xlat4.yz = u_xlat3.xz;
					        u_xlat0.xz = u_xlat4.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat3 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat3.w * -2.00787401 + 3.25;
					        u_xlat1.z = (-_Metrics.x) * u_xlat0.x + u_xlat4.y;
					        u_xlat0.xz = _Metrics.zz * u_xlat1.zx + (-vs_TEXCOORD1.xx);
					        u_xlat0.xz = roundEven(u_xlat0.xz);
					        u_xlat7.xy = sqrt(abs(u_xlat0.zx));
					        u_xlat3.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat1.zy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0).yxzw;
					        u_xlat3.x = u_xlat2.x;
					        u_xlat2.xw = u_xlat3.xy * vec2(4.0, 4.0);
					        u_xlat2.xw = roundEven(u_xlat2.xw);
					        u_xlat2.xy = u_xlat2.xw * vec2(16.0, 16.0) + u_xlat7.xy;
					        u_xlat2.xy = u_xlat2.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat2.z = _SubsampleIndices.y * 0.142857149 + u_xlat2.y;
					        u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					        u_xlatb0.xz = greaterThanEqual(abs(u_xlat0.xxzx), abs(u_xlat0.zzxz)).xz;
					        u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					        u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
					;
					        u_xlat15 = (-_Params2.x) * 0.00999999978 + 1.0;
					        u_xlat12.xy = u_xlat0.xz * vec2(u_xlat15);
					        u_xlat0.x = u_xlat0.z + u_xlat0.x;
					        u_xlat0.xz = u_xlat12.xy / u_xlat0.xx;
					        u_xlat1.w = vs_TEXCOORD0.y;
					        u_xlat12.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat1.xw;
					        u_xlat3 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat15 = (-u_xlat0.x) * u_xlat3.x + 1.0;
					        u_xlat12.xy = u_xlat1.zw + _Metrics.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat3.x = (-u_xlat0.z) * u_xlat3.x + u_xlat15;
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat1 = _Metrics.xyxy * vec4(0.0, -2.0, 1.0, -2.0) + u_xlat1.xwzw;
					        u_xlat4 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat0.x = (-u_xlat0.x) * u_xlat4.x + 1.0;
					        u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					        u_xlat3.y = (-u_xlat0.z) * u_xlat1.x + u_xlat0.x;
					        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
					        SV_Target0.xy = u_xlat2.xy * u_xlat3.xy;
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    if(u_xlatb0.y){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb15 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            if(!u_xlatb15){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb1.x = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb11 = 0.828100026<u_xlat2.z;
					            u_xlatb1.x = u_xlatb11 && u_xlatb1.x;
					            u_xlatb11 = u_xlat3.x==0.0;
					            u_xlatb1.x = u_xlatb11 && u_xlatb1.x;
					            if(!u_xlatb1.x){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat1.x = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat1.x + u_xlat3.y;
					        u_xlat1.xz = _Metrics.ww * u_xlat0.zx + (-vs_TEXCOORD1.yy);
					        u_xlat1.xz = roundEven(u_xlat1.xz);
					        u_xlat2.xy = sqrt(abs(u_xlat1.zx));
					        u_xlat12.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat3 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat3.x = u_xlat1.y;
					        u_xlat6.xz = u_xlat3.xy * vec2(4.0, 4.0);
					        u_xlat6.xz = roundEven(u_xlat6.xz);
					        u_xlat6.xz = u_xlat6.xz * vec2(16.0, 16.0) + u_xlat2.xy;
					        u_xlat2.xy = u_xlat6.xz * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat2.z = _SubsampleIndices.x * 0.142857149 + u_xlat2.y;
					        u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					        u_xlatb1.xy = greaterThanEqual(abs(u_xlat1.xzxx), abs(u_xlat1.zxzz)).xy;
					        u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					        u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					;
					        u_xlat5 = (-_Params2.x) * 0.00999999978 + 1.0;
					        u_xlat11.xy = u_xlat1.xy * vec2(u_xlat5);
					        u_xlat5 = u_xlat1.y + u_xlat1.x;
					        u_xlat1.xy = u_xlat11.xy / vec2(u_xlat5);
					        u_xlat0.w = vs_TEXCOORD0.x;
					        u_xlat11.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat0.wx;
					        u_xlat3 = textureLod(_MainTex, u_xlat11.xy, 0.0);
					        u_xlat5 = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat11.xy = u_xlat0.wz + _Metrics.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat11.xy, 0.0);
					        u_xlat11.x = (-u_xlat1.y) * u_xlat3.y + u_xlat5;
					        u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					        u_xlat0 = _Metrics.xyxy * vec4(-2.0, 0.0, -2.0, 1.0) + u_xlat0.wxwz;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					        u_xlat11.y = (-u_xlat1.y) * u_xlat3.y + u_xlat0.x;
					        u_xlat11.y = clamp(u_xlat11.y, 0.0, 1.0);
					        SV_Target0.zw = u_xlat11.xy * u_xlat2.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_CORNER_DETECTION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2;
						vec2 _Params2;
						vec4 unused_0_4[5];
						vec4 _SubsampleIndices;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SearchTex;
					uniform  sampler2D _AreaTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec2 u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb10;
					vec2 u_xlat11;
					bool u_xlatb11;
					vec2 u_xlat12;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb0.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.yxyy).xy;
					    if(u_xlatb0.x){
					        u_xlat1.xy = vs_TEXCOORD2.xy;
					        u_xlat1.z = 1.0;
					        u_xlat2.x = 0.0;
					        while(true){
					            u_xlatb0.x = vs_TEXCOORD4.x<u_xlat1.x;
					            u_xlatb10 = 0.828100026<u_xlat1.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat2.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					            u_xlat1.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat1.xy;
					            u_xlat1.z = u_xlat2.y;
					        }
					        u_xlat2.yz = u_xlat1.xz;
					        u_xlat0.xz = u_xlat2.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat1 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat1.w * -2.00787401 + 3.25;
					        u_xlat1.x = _Metrics.x * u_xlat0.x + u_xlat2.y;
					        u_xlat1.y = vs_TEXCOORD3.y;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat3.xy = vs_TEXCOORD2.zw;
					        u_xlat3.z = 1.0;
					        u_xlat4.x = 0.0;
					        while(true){
					            u_xlatb0.x = u_xlat3.x<vs_TEXCOORD4.y;
					            u_xlatb10 = 0.828100026<u_xlat3.z;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            u_xlatb10 = u_xlat4.x==0.0;
					            u_xlatb0.x = u_xlatb10 && u_xlatb0.x;
					            if(!u_xlatb0.x){break;}
					            u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					            u_xlat3.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat3.xy;
					            u_xlat3.z = u_xlat4.y;
					        }
					        u_xlat4.yz = u_xlat3.xz;
					        u_xlat0.xz = u_xlat4.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat3 = textureLod(_SearchTex, u_xlat0.xz, 0.0);
					        u_xlat0.x = u_xlat3.w * -2.00787401 + 3.25;
					        u_xlat1.z = (-_Metrics.x) * u_xlat0.x + u_xlat4.y;
					        u_xlat0.xz = _Metrics.zz * u_xlat1.zx + (-vs_TEXCOORD1.xx);
					        u_xlat0.xz = roundEven(u_xlat0.xz);
					        u_xlat7.xy = sqrt(abs(u_xlat0.zx));
					        u_xlat3.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat1.zy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0).yxzw;
					        u_xlat3.x = u_xlat2.x;
					        u_xlat2.xw = u_xlat3.xy * vec2(4.0, 4.0);
					        u_xlat2.xw = roundEven(u_xlat2.xw);
					        u_xlat2.xy = u_xlat2.xw * vec2(16.0, 16.0) + u_xlat7.xy;
					        u_xlat2.xy = u_xlat2.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat2.z = _SubsampleIndices.y * 0.142857149 + u_xlat2.y;
					        u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					        u_xlatb0.xz = greaterThanEqual(abs(u_xlat0.xxzx), abs(u_xlat0.zzxz)).xz;
					        u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					        u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
					;
					        u_xlat15 = (-_Params2.x) * 0.00999999978 + 1.0;
					        u_xlat12.xy = u_xlat0.xz * vec2(u_xlat15);
					        u_xlat0.x = u_xlat0.z + u_xlat0.x;
					        u_xlat0.xz = u_xlat12.xy / u_xlat0.xx;
					        u_xlat1.w = vs_TEXCOORD0.y;
					        u_xlat12.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat1.xw;
					        u_xlat3 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat15 = (-u_xlat0.x) * u_xlat3.x + 1.0;
					        u_xlat12.xy = u_xlat1.zw + _Metrics.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat3.x = (-u_xlat0.z) * u_xlat3.x + u_xlat15;
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat1 = _Metrics.xyxy * vec4(0.0, -2.0, 1.0, -2.0) + u_xlat1.xwzw;
					        u_xlat4 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat0.x = (-u_xlat0.x) * u_xlat4.x + 1.0;
					        u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					        u_xlat3.y = (-u_xlat0.z) * u_xlat1.x + u_xlat0.x;
					        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
					        SV_Target0.xy = u_xlat2.xy * u_xlat3.xy;
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    if(u_xlatb0.y){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb15 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb15 = u_xlatb15 && u_xlatb2;
					            if(!u_xlatb15){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb1.x = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb11 = 0.828100026<u_xlat2.z;
					            u_xlatb1.x = u_xlatb11 && u_xlatb1.x;
					            u_xlatb11 = u_xlat3.x==0.0;
					            u_xlatb1.x = u_xlatb11 && u_xlatb1.x;
					            if(!u_xlatb1.x){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat1.x = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat1.x + u_xlat3.y;
					        u_xlat1.xz = _Metrics.ww * u_xlat0.zx + (-vs_TEXCOORD1.yy);
					        u_xlat1.xz = roundEven(u_xlat1.xz);
					        u_xlat2.xy = sqrt(abs(u_xlat1.zx));
					        u_xlat12.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat3 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat3.x = u_xlat1.y;
					        u_xlat6.xz = u_xlat3.xy * vec2(4.0, 4.0);
					        u_xlat6.xz = roundEven(u_xlat6.xz);
					        u_xlat6.xz = u_xlat6.xz * vec2(16.0, 16.0) + u_xlat2.xy;
					        u_xlat2.xy = u_xlat6.xz * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat2.z = _SubsampleIndices.x * 0.142857149 + u_xlat2.y;
					        u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					        u_xlatb1.xy = greaterThanEqual(abs(u_xlat1.xzxx), abs(u_xlat1.zxzz)).xy;
					        u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					        u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					;
					        u_xlat5 = (-_Params2.x) * 0.00999999978 + 1.0;
					        u_xlat11.xy = u_xlat1.xy * vec2(u_xlat5);
					        u_xlat5 = u_xlat1.y + u_xlat1.x;
					        u_xlat1.xy = u_xlat11.xy / vec2(u_xlat5);
					        u_xlat0.w = vs_TEXCOORD0.x;
					        u_xlat11.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat0.wx;
					        u_xlat3 = textureLod(_MainTex, u_xlat11.xy, 0.0);
					        u_xlat5 = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat11.xy = u_xlat0.wz + _Metrics.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat11.xy, 0.0);
					        u_xlat11.x = (-u_xlat1.y) * u_xlat3.y + u_xlat5;
					        u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					        u_xlat0 = _Metrics.xyxy * vec4(-2.0, 0.0, -2.0, 1.0) + u_xlat0.wxwz;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					        u_xlat11.y = (-u_xlat1.y) * u_xlat3.y + u_xlat0.x;
					        u_xlat11.y = clamp(u_xlat11.y, 0.0, 1.0);
					        SV_Target0.zw = u_xlat11.xy * u_xlat2.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_DIAG_SEARCH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _AreaTex;
					//   sampler2D _MainTex;
					//   float4 _Metrics;
					//   float4 _Params1;
					//   sampler2D _SearchTex;
					//   float4 _SubsampleIndices;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Metrics          c0       1
					//   _Params1          c1       1
					//   _SubsampleIndices c2       1
					//   _MainTex          s0       1
					//   _AreaTex          s1       1
					//   _SearchTex        s2       1
					//
					
					    ps_3_0
					    def c3, 5, -3.75, 20, 0.142857149
					    def c4, 0.00625000009, 0.0017857143, 0.00312500005, 0.000892857148
					    def c5, 0.0017857143, 0.00625000009, 0.000892857148, 0.503125012
					    def c6, 0.25, -1, 1, -0
					    def c7, 0.899999976, 0.5, 0, 2
					    def c8, 0.828100026, -2.00787401, 3.25, 16
					    def c9, 0.5, -2, 0.0078125, 2.03125
					    def c10, 0.5, -2, 0.5234375, 2.03125
					    def c11, 4, 0.5, 0, 0
					    def c12, 0, -1, 1, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    if_lt -r0.y, c12.x
					      if_lt -r0.x, c12.x
					        mov r1.xyz, c12
					        add r0.y, r1.y, c1.w
					        mad r1.xyz, c0.xyxw, r1.yzxw, r1.xxzw
					        mov r2.w, c12.x
					        mov r2.xy, v0
					        mov r0.z, c12.x
					        mov r2.z, c12.y
					        mov r3.x, c12.z
					        rep i0
					          add r0.w, -r0.y, r2.z
					          add r1.w, -r3.x, c7.x
					          cmp r1.w, r1.w, -c12.x, -c12.z
					          cmp r0.w, r0.w, c12.x, r1.w
					          cmp r0.w, r0.w, c12.z, c12.x
					          break_ne r0.w, -r0.w
					          add r2.xyz, r1, r2
					          texldl r4, r2.xyww, s0
					          dp2add r3.x, r4, c7.y, c7.z
					          mov r0.z, r4.y
					        endrep
					        add r0.y, -r0.z, c7.x
					        cmp r0.y, r0.y, c12.x, c12.z
					        add r1.x, r0.y, r2.z
					      else
					        mov r1.x, c12.x
					        mov r3.x, c12.x
					      endif
					      mov r2.xyz, c12
					      add r0.y, r2.y, c1.w
					      mad r4.xyz, c0.xyxw, r2.zyxw, r2.xxzw
					      mov r5.w, c12.x
					      mov r5.yz, v0.xxyw
					      mov r5.x, c12.y
					      mov r3.y, c12.z
					      rep i0
					        add r0.z, -r0.y, r5.x
					        add r0.w, -r3.y, c7.x
					        cmp r0.w, r0.w, -c12.x, -c12.z
					        cmp r0.z, r0.z, c12.x, r0.w
					        cmp r0.z, r0.z, c12.z, c12.x
					        break_ne r0.z, -r0.z
					        add r5.xyz, r4.zxyw, r5
					        texldl r6, r5.yzww, s0
					        dp2add r3.y, r6, c7.y, c7.z
					      endrep
					      add r0.z, r1.x, r5.x
					      if_lt c7.w, r0.z
					        add r1.y, -r1.x, c6.x
					        mad r1.zw, r5.x, -c6.xyyz, -c6.xywx
					        mad r4, r1.yxzw, c0.xyxy, v0.xyxy
					        mad r4, c0.xyxy, r2.yxzx, r4
					        mul r5, r4.xyxx, c12.zzxx
					        texldl r5, r5, s0
					        mul r4, r4.zwxx, c12.zzxx
					        texldl r4, r4, s0
					        mov r5.zw, r4.xyxy
					        mad r0.zw, r5.xyxz, c3.x, c3.y
					        mul r5.xz, r0_abs.zyww, r5
					        add r4, r5, c7.y
					        frc r5, r4
					        add r4, r4, -r5
					        mad r0.zw, r4.xywy, c7.w, r4.xyzx
					        add r1.yw, r3.xyzx, -c7.x
					        cmp r0.zw, r1.xyyw, c12.x, r0
					        mad r0.zw, r0, c3.z, r1.xyzx
					        mad r1.xy, r0.zwzw, c5, c5.zwzw
					        mov r0.w, c3.w
					        mad r1.z, c2.z, r0.w, r1.x
					        mov r1.w, c12.x
					        texldl r1, r1.yzww, s1
					      else
					        mov r1.xy, c12.x
					      endif
					      mov r3.xy, c0
					      mad r0.z, r3.x, c6.x, v0.x
					      mad r4.xyz, c0.xyxw, r2.yyxw, r2.xxzw
					      mov r5.w, c12.x
					      mov r5.y, r0.z
					      mov r5.z, v0.y
					      mov r5.x, c12.y
					      mov r6.x, c12.z
					      rep i0
					        add r0.w, -r0.y, r5.x
					        add r1.z, -r6.x, c7.x
					        cmp r1.z, r1.z, -c12.x, -c12.z
					        cmp r0.w, r0.w, c12.x, r1.z
					        cmp r0.w, r0.w, c12.z, c12.x
					        break_ne r0.w, -r0.w
					        add r5.xyz, r4.zxyw, r5
					        texldl r7, r5.yzww, s0
					        mad r0.w, r7.x, c3.x, c3.y
					        mul r7.x, r0_abs.w, r7.x
					        add r1.zw, r7.xyxy, c7.y
					        frc r3.zw, r1
					        add r1.zw, r1, -r3
					        dp2add r6.x, r1.zwzw, c7.y, c7.z
					      endrep
					      mad r4.xy, c0, r2.zxzw, v0
					      mov r4.zw, c12.x
					      texldl r4, r4, s0
					      if_lt -r4.x, c12.x
					        mad r4.xyz, c0.xyxw, r2.zzxw, r2.xxzw
					        mov r7.w, c12.x
					        mov r7.x, r0.z
					        mov r7.y, v0.y
					        mov r1.z, c12.x
					        mov r7.z, c12.y
					        mov r6.y, c12.z
					        rep i0
					          add r0.w, -r0.y, r7.z
					          add r2.w, -r6.y, c7.x
					          cmp r2.w, r2.w, -c12.x, -c12.z
					          cmp r0.w, r0.w, c12.x, r2.w
					          cmp r0.w, r0.w, c12.z, c12.x
					          break_ne r0.w, -r0.w
					          add r7.xyz, r4, r7
					          texldl r8, r7.xyww, s0
					          mad r0.w, r8.x, c3.x, c3.y
					          mul r8.x, r0_abs.w, r8.x
					          add r3.zw, r8.xyxy, c7.y
					          frc r6.zw, r3
					          add r1.zw, r3.xywz, -r6.xywz
					          dp2add r6.y, r1.wzzw, c7.y, c7.z
					        endrep
					        add r0.y, -r1.z, c7.x
					        cmp r0.y, r0.y, c12.x, c12.z
					        add r5.z, r0.y, r7.z
					      else
					        mov r5.z, c12.x
					        mov r6.y, c12.x
					      endif
					      add r0.y, r5.z, r5.x
					      if_lt c7.w, r0.y
					        mov r5.y, -r5.x
					        mad r4, r5.yyzz, c0.xyxy, v0.xyxy
					        mad r7, c0.xyxy, r2.yxxy, r4.xyxy
					        mul r8, r7.xyxx, c12.zzxx
					        texldl r8, r8, s0
					        mul r7, r7.zwxx, c12.zzxx
					        texldl r7, r7, s0
					        mad r4.xy, c0, r2.zxzw, r4.zwzw
					        mov r4.zw, c12.x
					        texldl r4, r4, s0
					        mov r8.xz, r4.yyxw
					        mov r8.w, r7.x
					        mad r0.yz, r8.xxyw, c7.w, r8.xzww
					        add r1.zw, r6.xyyx, -c7.x
					        cmp r0.yz, r1.xzww, c12.x, r0
					        mad r0.yz, r0, c3.z, r5.xzxw
					        mad r4.xy, r0.yzzw, c5, c5.zwzw
					        mov r0.w, c3.w
					        mad r4.z, c2.w, r0.w, r4.x
					        mov r4.w, c12.x
					        texldl r4, r4.yzww, s1
					        add r1.xy, r1, r4.yxzw
					      endif
					      if_eq r1.x, -r1.y
					        mov r4.xy, v2
					        mov r4.z, c12.z
					        mov r5.x, c12.x
					        rep i0
					          add r0.y, -r4.x, v4.x
					          add r0.z, -r4.z, c8.x
					          cmp r0.w, -r5_abs.x, -c12.z, -c12.x
					          cmp r0.z, r0.z, c12.x, r0.w
					          cmp r0.y, r0.y, c12.x, r0.z
					          cmp r0.y, r0.y, c12.z, c12.x
					          break_ne r0.y, -r0.y
					          mul r6, r4.xyxx, c12.zzxx
					          texldl r5, r6, s0
					          mad r4.xy, r3, -c7.wzzw, r4
					          mov r4.z, r5.y
					        endrep
					        mov r5.yz, r4.xxzw
					        mad r4.xy, r5.xzzw, c9, c9.zwzw
					        mov r4.zw, c12.x
					        texldl r4, r4, s2
					        mad r0.y, r4.w, c8.y, c8.z
					        mad r4.x, c0.x, r0.y, r5.y
					        mul r4.yz, c12.xzxw, v3.y
					        texldl r5, r4.xyzz, s0
					        mov r6.xy, v2.zwzw
					        mov r6.z, c12.z
					        mov r7.x, c12.x
					        rep i0
					          add r0.y, r6.x, -v4.y
					          add r0.z, -r6.z, c8.x
					          cmp r0.w, -r7_abs.x, -c12.z, -c12.x
					          cmp r0.z, r0.z, c12.x, r0.w
					          cmp r0.y, r0.y, c12.x, r0.z
					          cmp r0.y, r0.y, c12.z, c12.x
					          break_ne r0.y, -r0.y
					          mul r8, r6.xyxx, c12.zzxx
					          texldl r7, r8, s0
					          mad r6.xy, r3, c7.wzzw, r6
					          mov r6.z, r7.y
					        endrep
					        mov r7.yz, r6.xxzw
					        mad r3.xy, r7.xzzw, c10, c10.zwzw
					        mov r3.zw, c12.x
					        texldl r3, r3, s2
					        mad r0.y, r3.w, c8.y, c8.z
					        mad r4.w, -c0.x, r0.y, r7.y
					        mad r0.yz, c0.z, r4.xxww, -v1.x
					        add r0.yz, r0, c7.y
					        frc r1.zw, r0.xyyz
					        add r0.yz, r0, -r1.xzww
					        rsq r0.y, r0_abs.y
					        rsq r0.z, r0_abs.z
					        rcp r3.x, r0.y
					        rcp r3.y, r0.z
					        mad r2.xy, c0, r2.zxzw, r4.wyzw
					        mov r2.zw, c12.x
					        texldl r2, r2, s0
					        mov r5.y, r2.x
					        mad r0.yz, r5.xxyw, c11.x, c11.y
					        frc r1.zw, r0.xyyz
					        add r0.yz, r0, -r1.xzww
					        mad r0.yz, r0, c8.w, r3.xxyw
					        mad r2.xy, r0.yzzw, c4, c4.zwzw
					        mov r0.w, c3.w
					        mad r2.z, c2.y, r0.w, r2.y
					        mov r2.w, c12.x
					        texldl r2, r2.xzww, s1
					        mov oC0.xy, r2
					      else
					        mov oC0.xy, r1
					        mov r0.x, c12.x
					      endif
					    else
					      mov oC0.xy, c12.x
					    endif
					    if_lt -r0.x, c12.x
					      mov r0.xy, v3
					      mov r0.z, c12.z
					      mov r1.x, c12.x
					      rep i0
					        add r0.w, -r0.y, v4.z
					        add r1.w, -r0.z, c8.x
					        cmp r2.x, -r1_abs.x, -c12.z, -c12.x
					        cmp r1.w, r1.w, c12.x, r2.x
					        cmp r0.w, r0.w, c12.x, r1.w
					        cmp r0.w, r0.w, c12.z, c12.x
					        break_ne r0.w, -r0.w
					        mul r2, r0.xyxx, c12.zzxx
					        texldl r2, r2, s0
					        mov r3.xy, c0
					        mad r0.xy, r3, -c7.zwzw, r0
					        mov r0.z, r2.x
					        mov r1.x, r2.y
					      endrep
					      mov r1.yz, r0
					      mad r0.xy, r1.xzzw, c9, c9.zwzw
					      mov r0.zw, c12.x
					      texldl r0, r0, s2
					      mad r0.x, r0.w, c8.y, c8.z
					      mad r0.x, c0.y, r0.x, r1.y
					      mul r0.yz, c12.xzxw, v2.x
					      texldl r1, r0.yxzz, s0
					      mov r2.xy, v3.zwzw
					      mov r2.z, c12.z
					      mov r3.x, c12.x
					      rep i0
					        add r0.y, r2.y, -v4.w
					        add r0.z, -r2.z, c8.x
					        cmp r1.x, -r3_abs.x, -c12.z, -c12.x
					        cmp r0.z, r0.z, c12.x, r1.x
					        cmp r0.y, r0.y, c12.x, r0.z
					        cmp r0.y, r0.y, c12.z, c12.x
					        break_ne r0.y, -r0.y
					        mul r4, r2.xyxx, c12.zzxx
					        texldl r4, r4, s0
					        mov r5.xy, c0
					        mad r2.xy, r5, c7.zwzw, r2
					        mov r2.z, r4.x
					        mov r3.x, r4.y
					      endrep
					      mov r3.yz, r2
					      mad r2.xy, r3.xzzw, c10, c10.zwzw
					      mov r2.zw, c12.x
					      texldl r2, r2, s2
					      mad r0.y, r2.w, c8.y, c8.z
					      mad r0.w, -c0.y, r0.y, r3.y
					      mad r0.xy, c0.w, r0.xwzw, -v1.y
					      add r0.xy, r0, c7.y
					      frc r1.xz, r0.xyyw
					      add r0.xy, r0, -r1.xzzw
					      rsq r0.x, r0_abs.x
					      rsq r0.y, r0_abs.y
					      rcp r2.x, r0.x
					      rcp r2.y, r0.y
					      mov r0.x, c0.y
					      add r0.y, r0.x, r0.w
					      mul r0.zw, c12.xyzx, v2.x
					      texldl r0, r0.zyww, s0
					      mov r0.x, r1.y
					      mad r0.xy, r0, c11.x, c11.y
					      frc r0.zw, r0.xyxy
					      add r0.xy, -r0.zwzw, r0
					      mad r0.xy, r0, c8.w, r2
					      mad r0.xy, r0, c4, c4.zwzw
					      mov r1.w, c3.w
					      mad r0.z, c2.x, r1.w, r0.y
					      mov r0.w, c12.x
					      texldl r0, r0.xzww, s1
					      mov oC0.zw, r0.xyxy
					    else
					      mov oC0.zw, c12.x
					    endif
					
					// approximately 396 instruction slots used (53 texture, 343 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_DIAG_SEARCH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[6];
						vec4 _SubsampleIndices;
						vec4 unused_0_5[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AreaTex;
					uniform  sampler2D _SearchTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec2 u_xlat14;
					bool u_xlatb14;
					vec2 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.0<u_xlat0.y;
					    if(u_xlatb7){
					        u_xlatb7 = 0.0<u_xlat0.x;
					        if(u_xlatb7){
					            u_xlat7.x = _Params1.w + -1.0;
					            u_xlat1.xy = _Metrics.xy * vec2(-1.0, 1.0);
					            u_xlat1.z = 1.0;
					            u_xlat2.xy = vs_TEXCOORD0.xy;
					            u_xlat3.x = 0.0;
					            u_xlat2.z = -1.0;
					            u_xlat4.x = 1.0;
					            while(true){
					                u_xlatb14 = u_xlat2.z<u_xlat7.x;
					                u_xlatb21 = 0.899999976<u_xlat4.x;
					                u_xlatb14 = u_xlatb21 && u_xlatb14;
					                if(!u_xlatb14){break;}
					                u_xlat2.xyz = u_xlat1.xyz + u_xlat2.xyz;
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					                u_xlat4.x = dot(u_xlat3.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7 = 0.899999976<u_xlat3.x;
					            u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					            u_xlat1.x = u_xlat7.x + u_xlat2.z;
					        } else {
					            u_xlat1.x = 0.0;
					            u_xlat4.x = 0.0;
					        }
					        u_xlat7.x = _Params1.w + -1.0;
					        u_xlat9.xy = _Metrics.xy * vec2(1.0, -1.0);
					        u_xlat9.z = 1.0;
					        u_xlat3.yz = vs_TEXCOORD0.xy;
					        u_xlat3.x = float(-1.0);
					        u_xlat24 = float(1.0);
					        while(true){
					            u_xlatb14 = u_xlat3.x<u_xlat7.x;
					            u_xlatb21 = 0.899999976<u_xlat24;
					            u_xlatb14 = u_xlatb21 && u_xlatb14;
					            if(!u_xlatb14){break;}
					            u_xlat3.xyz = u_xlat9.zxy + u_xlat3.xyz;
					            u_xlat5 = textureLod(_MainTex, u_xlat3.yz, 0.0);
					            u_xlat24 = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat4.y = u_xlat24;
					        u_xlat14.x = u_xlat1.x + u_xlat3.x;
					        u_xlatb14 = 2.0<u_xlat14.x;
					        if(u_xlatb14){
					            u_xlat1.y = (-u_xlat1.x) + 0.25;
					            u_xlat1.zw = u_xlat3.xx * vec2(1.0, -1.0) + vec2(0.0, -0.25);
					            u_xlat2 = u_xlat1.yxzw * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat2 = _Metrics.xyxy * vec4(-1.0, 0.0, 1.0, 0.0) + u_xlat2;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					            u_xlat3.z = u_xlat2.x;
					            u_xlat14.xy = u_xlat3.zx * vec2(5.0, 5.0) + vec2(-3.75, -3.75);
					            u_xlat14.xy = abs(u_xlat14.xy) * u_xlat3.zx;
					            u_xlat14.xy = roundEven(u_xlat14.xy);
					            u_xlat8.x = roundEven(u_xlat3.y);
					            u_xlat8.z = roundEven(u_xlat2.y);
					            u_xlat14.xy = u_xlat8.zx * vec2(2.0, 2.0) + u_xlat14.xy;
					            u_xlatb8.xz = greaterThanEqual(u_xlat4.yyxx, vec4(0.899999976, 0.0, 0.899999976, 0.899999976)).xz;
					            {
					                vec2 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb8.x) ? float(0.0) : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb8.z) ? float(0.0) : u_xlat14.y;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat14.xy = u_xlat14.xy * vec2(20.0, 20.0) + u_xlat1.zx;
					            u_xlat1.xy = u_xlat14.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat1.z = _SubsampleIndices.z * 0.142857149 + u_xlat1.x;
					            u_xlat1 = textureLod(_AreaTex, u_xlat1.yz, 0.0);
					        } else {
					            u_xlat1.x = float(0.0);
					            u_xlat1.y = float(0.0);
					        }
					        u_xlat14.x = _Metrics.x * 0.25 + vs_TEXCOORD0.x;
					        u_xlat2.xy = (-_Metrics.xy);
					        u_xlat2.z = 1.0;
					        u_xlat10.x = u_xlat14.x;
					        u_xlat10.y = vs_TEXCOORD0.y;
					        u_xlat3.x = float(1.0);
					        u_xlat10.z = float(-1.0);
					        while(true){
					            u_xlatb21 = u_xlat10.z<u_xlat7.x;
					            u_xlatb15.x = 0.899999976<u_xlat3.x;
					            u_xlatb21 = u_xlatb21 && u_xlatb15.x;
					            if(!u_xlatb21){break;}
					            u_xlat10.xyz = u_xlat2.xyz + u_xlat10.xyz;
					            u_xlat4 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					            u_xlat21 = u_xlat4.x * 5.0 + -3.75;
					            u_xlat21 = abs(u_xlat21) * u_xlat4.x;
					            u_xlat5.x = roundEven(u_xlat21);
					            u_xlat5.y = roundEven(u_xlat4.y);
					            u_xlat3.x = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat2.x = u_xlat10.z;
					        u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlatb21 = 0.0<u_xlat4.x;
					        if(u_xlatb21){
					            u_xlat4.xy = _Metrics.xy;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = u_xlat14.x;
					            u_xlat5.y = vs_TEXCOORD0.y;
					            u_xlat15.x = 0.0;
					            u_xlat5.z = -1.0;
					            u_xlat3.y = 1.0;
					            while(true){
					                u_xlatb21 = u_xlat5.z<u_xlat7.x;
					                u_xlatb23 = 0.899999976<u_xlat3.y;
					                u_xlatb21 = u_xlatb21 && u_xlatb23;
					                if(!u_xlatb21){break;}
					                u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
					                u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					                u_xlat21 = u_xlat6.x * 5.0 + -3.75;
					                u_xlat21 = abs(u_xlat21) * u_xlat6.x;
					                u_xlat15.y = roundEven(u_xlat21);
					                u_xlat15.x = roundEven(u_xlat6.y);
					                u_xlat3.y = dot(u_xlat15.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7 = 0.899999976<u_xlat15.x;
					            u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					            u_xlat2.z = u_xlat7.x + u_xlat5.z;
					        } else {
					            u_xlat2.z = 0.0;
					            u_xlat3.y = 0.0;
					        }
					        u_xlat7.x = u_xlat2.z + u_xlat2.x;
					        u_xlatb7 = 2.0<u_xlat7.x;
					        if(u_xlatb7){
					            u_xlat2.y = (-u_xlat2.x);
					            u_xlat4 = u_xlat2.yyzz * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat5 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat4.xyxy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5 = textureLod(_MainTex, u_xlat5.zw, 0.0).yzwx;
					            u_xlat7.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat4.zw;
					            u_xlat4 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat5.y = u_xlat6.y;
					            u_xlat5.xz = u_xlat4.yx;
					            u_xlat7.xy = u_xlat5.xy * vec2(2.0, 2.0) + u_xlat5.zw;
					            u_xlatb15.xy = greaterThanEqual(u_xlat3.yxyx, vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976)).xy;
					            {
					                vec2 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? float(0.0) : u_xlat7.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? float(0.0) : u_xlat7.y;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat7.xy = u_xlat7.xy * vec2(20.0, 20.0) + u_xlat2.zx;
					            u_xlat2.xy = u_xlat7.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat2.z = _SubsampleIndices.w * 0.142857149 + u_xlat2.x;
					            u_xlat2 = textureLod(_AreaTex, u_xlat2.yz, 0.0);
					            u_xlat1.xy = u_xlat1.xy + u_xlat2.yx;
					        }
					        u_xlatb7 = (-u_xlat1.y)==u_xlat1.x;
					        if(u_xlatb7){
					            u_xlat2.xy = vs_TEXCOORD2.xy;
					            u_xlat2.z = 1.0;
					            u_xlat3.x = 0.0;
					            while(true){
					                u_xlatb7 = vs_TEXCOORD4.x<u_xlat2.x;
					                u_xlatb14 = 0.828100026<u_xlat2.z;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                u_xlatb14 = u_xlat3.x==0.0;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                if(!u_xlatb7){break;}
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					                u_xlat2.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat2.xy;
					                u_xlat2.z = u_xlat3.y;
					            }
					            u_xlat3.yz = u_xlat2.xz;
					            u_xlat7.xy = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					            u_xlat2 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat2.w * -2.00787401 + 3.25;
					            u_xlat2.x = _Metrics.x * u_xlat7.x + u_xlat3.y;
					            u_xlat2.y = vs_TEXCOORD3.y;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat4.xy = vs_TEXCOORD2.zw;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = 0.0;
					            while(true){
					                u_xlatb7 = u_xlat4.x<vs_TEXCOORD4.y;
					                u_xlatb14 = 0.828100026<u_xlat4.z;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                u_xlatb14 = u_xlat5.x==0.0;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                if(!u_xlatb7){break;}
					                u_xlat5 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					                u_xlat4.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat4.xy;
					                u_xlat4.z = u_xlat5.y;
					            }
					            u_xlat5.yz = u_xlat4.xz;
					            u_xlat7.xy = u_xlat5.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					            u_xlat4 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat4.w * -2.00787401 + 3.25;
					            u_xlat2.z = (-_Metrics.x) * u_xlat7.x + u_xlat5.y;
					            u_xlat7.xy = _Metrics.zz * u_xlat2.xz + (-vs_TEXCOORD1.xx);
					            u_xlat7.xy = roundEven(u_xlat7.xy);
					            u_xlat7.xy = sqrt(abs(u_xlat7.xy));
					            u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat2.zy;
					            u_xlat2 = textureLod(_MainTex, u_xlat15.xy, 0.0).yxzw;
					            u_xlat2.x = u_xlat3.x;
					            u_xlat15.xy = u_xlat2.xy * vec2(4.0, 4.0);
					            u_xlat15.xy = roundEven(u_xlat15.xy);
					            u_xlat7.xy = u_xlat15.xy * vec2(16.0, 16.0) + u_xlat7.xy;
					            u_xlat2.xy = u_xlat7.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					            u_xlat2.z = _SubsampleIndices.y * 0.142857149 + u_xlat2.y;
					            u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					            SV_Target0.xy = u_xlat2.xy;
					        } else {
					            SV_Target0.xy = u_xlat1.xy;
					            u_xlat0.x = 0.0;
					        }
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    u_xlatb0 = 0.0<u_xlat0.x;
					    if(u_xlatb0){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb21 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            if(!u_xlatb21){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb21 = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb1 = 0.828100026<u_xlat2.z;
					            u_xlatb21 = u_xlatb21 && u_xlatb1;
					            u_xlatb1 = u_xlat3.x==0.0;
					            u_xlatb21 = u_xlatb21 && u_xlatb1;
					            if(!u_xlatb21){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat21 = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat21 + u_xlat3.y;
					        u_xlat0.xw = _Metrics.ww * u_xlat0.xz + (-vs_TEXCOORD1.yy);
					        u_xlat0.xw = roundEven(u_xlat0.xw);
					        u_xlat0.xw = sqrt(abs(u_xlat0.xw));
					        u_xlat7.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat2 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					        u_xlat2.x = u_xlat1.y;
					        u_xlat7.xy = u_xlat2.xy * vec2(4.0, 4.0);
					        u_xlat7.xy = roundEven(u_xlat7.xy);
					        u_xlat0.xy = u_xlat7.xy * vec2(16.0, 16.0) + u_xlat0.xw;
					        u_xlat0.xy = u_xlat0.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat0.z = _SubsampleIndices.x * 0.142857149 + u_xlat0.y;
					        u_xlat0 = textureLod(_AreaTex, u_xlat0.xz, 0.0);
					        SV_Target0.zw = u_xlat0.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_DIAG_SEARCH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec4 unused_0_3[6];
						vec4 _SubsampleIndices;
						vec4 unused_0_5[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AreaTex;
					uniform  sampler2D _SearchTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec2 u_xlat14;
					bool u_xlatb14;
					vec2 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.0<u_xlat0.y;
					    if(u_xlatb7){
					        u_xlatb7 = 0.0<u_xlat0.x;
					        if(u_xlatb7){
					            u_xlat7.x = _Params1.w + -1.0;
					            u_xlat1.xy = _Metrics.xy * vec2(-1.0, 1.0);
					            u_xlat1.z = 1.0;
					            u_xlat2.xy = vs_TEXCOORD0.xy;
					            u_xlat3.x = 0.0;
					            u_xlat2.z = -1.0;
					            u_xlat4.x = 1.0;
					            while(true){
					                u_xlatb14 = u_xlat2.z<u_xlat7.x;
					                u_xlatb21 = 0.899999976<u_xlat4.x;
					                u_xlatb14 = u_xlatb21 && u_xlatb14;
					                if(!u_xlatb14){break;}
					                u_xlat2.xyz = u_xlat1.xyz + u_xlat2.xyz;
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					                u_xlat4.x = dot(u_xlat3.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7 = 0.899999976<u_xlat3.x;
					            u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					            u_xlat1.x = u_xlat7.x + u_xlat2.z;
					        } else {
					            u_xlat1.x = 0.0;
					            u_xlat4.x = 0.0;
					        }
					        u_xlat7.x = _Params1.w + -1.0;
					        u_xlat9.xy = _Metrics.xy * vec2(1.0, -1.0);
					        u_xlat9.z = 1.0;
					        u_xlat3.yz = vs_TEXCOORD0.xy;
					        u_xlat3.x = float(-1.0);
					        u_xlat24 = float(1.0);
					        while(true){
					            u_xlatb14 = u_xlat3.x<u_xlat7.x;
					            u_xlatb21 = 0.899999976<u_xlat24;
					            u_xlatb14 = u_xlatb21 && u_xlatb14;
					            if(!u_xlatb14){break;}
					            u_xlat3.xyz = u_xlat9.zxy + u_xlat3.xyz;
					            u_xlat5 = textureLod(_MainTex, u_xlat3.yz, 0.0);
					            u_xlat24 = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat4.y = u_xlat24;
					        u_xlat14.x = u_xlat1.x + u_xlat3.x;
					        u_xlatb14 = 2.0<u_xlat14.x;
					        if(u_xlatb14){
					            u_xlat1.y = (-u_xlat1.x) + 0.25;
					            u_xlat1.zw = u_xlat3.xx * vec2(1.0, -1.0) + vec2(0.0, -0.25);
					            u_xlat2 = u_xlat1.yxzw * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat2 = _Metrics.xyxy * vec4(-1.0, 0.0, 1.0, 0.0) + u_xlat2;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					            u_xlat3.z = u_xlat2.x;
					            u_xlat14.xy = u_xlat3.zx * vec2(5.0, 5.0) + vec2(-3.75, -3.75);
					            u_xlat14.xy = abs(u_xlat14.xy) * u_xlat3.zx;
					            u_xlat14.xy = roundEven(u_xlat14.xy);
					            u_xlat8.x = roundEven(u_xlat3.y);
					            u_xlat8.z = roundEven(u_xlat2.y);
					            u_xlat14.xy = u_xlat8.zx * vec2(2.0, 2.0) + u_xlat14.xy;
					            u_xlatb8.xz = greaterThanEqual(u_xlat4.yyxx, vec4(0.899999976, 0.0, 0.899999976, 0.899999976)).xz;
					            {
					                vec2 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb8.x) ? float(0.0) : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb8.z) ? float(0.0) : u_xlat14.y;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat14.xy = u_xlat14.xy * vec2(20.0, 20.0) + u_xlat1.zx;
					            u_xlat1.xy = u_xlat14.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat1.z = _SubsampleIndices.z * 0.142857149 + u_xlat1.x;
					            u_xlat1 = textureLod(_AreaTex, u_xlat1.yz, 0.0);
					        } else {
					            u_xlat1.x = float(0.0);
					            u_xlat1.y = float(0.0);
					        }
					        u_xlat14.x = _Metrics.x * 0.25 + vs_TEXCOORD0.x;
					        u_xlat2.xy = (-_Metrics.xy);
					        u_xlat2.z = 1.0;
					        u_xlat10.x = u_xlat14.x;
					        u_xlat10.y = vs_TEXCOORD0.y;
					        u_xlat3.x = float(1.0);
					        u_xlat10.z = float(-1.0);
					        while(true){
					            u_xlatb21 = u_xlat10.z<u_xlat7.x;
					            u_xlatb15.x = 0.899999976<u_xlat3.x;
					            u_xlatb21 = u_xlatb21 && u_xlatb15.x;
					            if(!u_xlatb21){break;}
					            u_xlat10.xyz = u_xlat2.xyz + u_xlat10.xyz;
					            u_xlat4 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					            u_xlat21 = u_xlat4.x * 5.0 + -3.75;
					            u_xlat21 = abs(u_xlat21) * u_xlat4.x;
					            u_xlat5.x = roundEven(u_xlat21);
					            u_xlat5.y = roundEven(u_xlat4.y);
					            u_xlat3.x = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat2.x = u_xlat10.z;
					        u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlatb21 = 0.0<u_xlat4.x;
					        if(u_xlatb21){
					            u_xlat4.xy = _Metrics.xy;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = u_xlat14.x;
					            u_xlat5.y = vs_TEXCOORD0.y;
					            u_xlat15.x = 0.0;
					            u_xlat5.z = -1.0;
					            u_xlat3.y = 1.0;
					            while(true){
					                u_xlatb21 = u_xlat5.z<u_xlat7.x;
					                u_xlatb23 = 0.899999976<u_xlat3.y;
					                u_xlatb21 = u_xlatb21 && u_xlatb23;
					                if(!u_xlatb21){break;}
					                u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
					                u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					                u_xlat21 = u_xlat6.x * 5.0 + -3.75;
					                u_xlat21 = abs(u_xlat21) * u_xlat6.x;
					                u_xlat15.y = roundEven(u_xlat21);
					                u_xlat15.x = roundEven(u_xlat6.y);
					                u_xlat3.y = dot(u_xlat15.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7 = 0.899999976<u_xlat15.x;
					            u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					            u_xlat2.z = u_xlat7.x + u_xlat5.z;
					        } else {
					            u_xlat2.z = 0.0;
					            u_xlat3.y = 0.0;
					        }
					        u_xlat7.x = u_xlat2.z + u_xlat2.x;
					        u_xlatb7 = 2.0<u_xlat7.x;
					        if(u_xlatb7){
					            u_xlat2.y = (-u_xlat2.x);
					            u_xlat4 = u_xlat2.yyzz * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat5 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat4.xyxy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5 = textureLod(_MainTex, u_xlat5.zw, 0.0).yzwx;
					            u_xlat7.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat4.zw;
					            u_xlat4 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat5.y = u_xlat6.y;
					            u_xlat5.xz = u_xlat4.yx;
					            u_xlat7.xy = u_xlat5.xy * vec2(2.0, 2.0) + u_xlat5.zw;
					            u_xlatb15.xy = greaterThanEqual(u_xlat3.yxyx, vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976)).xy;
					            {
					                vec2 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? float(0.0) : u_xlat7.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? float(0.0) : u_xlat7.y;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat7.xy = u_xlat7.xy * vec2(20.0, 20.0) + u_xlat2.zx;
					            u_xlat2.xy = u_xlat7.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat2.z = _SubsampleIndices.w * 0.142857149 + u_xlat2.x;
					            u_xlat2 = textureLod(_AreaTex, u_xlat2.yz, 0.0);
					            u_xlat1.xy = u_xlat1.xy + u_xlat2.yx;
					        }
					        u_xlatb7 = (-u_xlat1.y)==u_xlat1.x;
					        if(u_xlatb7){
					            u_xlat2.xy = vs_TEXCOORD2.xy;
					            u_xlat2.z = 1.0;
					            u_xlat3.x = 0.0;
					            while(true){
					                u_xlatb7 = vs_TEXCOORD4.x<u_xlat2.x;
					                u_xlatb14 = 0.828100026<u_xlat2.z;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                u_xlatb14 = u_xlat3.x==0.0;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                if(!u_xlatb7){break;}
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					                u_xlat2.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat2.xy;
					                u_xlat2.z = u_xlat3.y;
					            }
					            u_xlat3.yz = u_xlat2.xz;
					            u_xlat7.xy = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					            u_xlat2 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat2.w * -2.00787401 + 3.25;
					            u_xlat2.x = _Metrics.x * u_xlat7.x + u_xlat3.y;
					            u_xlat2.y = vs_TEXCOORD3.y;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat4.xy = vs_TEXCOORD2.zw;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = 0.0;
					            while(true){
					                u_xlatb7 = u_xlat4.x<vs_TEXCOORD4.y;
					                u_xlatb14 = 0.828100026<u_xlat4.z;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                u_xlatb14 = u_xlat5.x==0.0;
					                u_xlatb7 = u_xlatb14 && u_xlatb7;
					                if(!u_xlatb7){break;}
					                u_xlat5 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					                u_xlat4.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat4.xy;
					                u_xlat4.z = u_xlat5.y;
					            }
					            u_xlat5.yz = u_xlat4.xz;
					            u_xlat7.xy = u_xlat5.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					            u_xlat4 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat4.w * -2.00787401 + 3.25;
					            u_xlat2.z = (-_Metrics.x) * u_xlat7.x + u_xlat5.y;
					            u_xlat7.xy = _Metrics.zz * u_xlat2.xz + (-vs_TEXCOORD1.xx);
					            u_xlat7.xy = roundEven(u_xlat7.xy);
					            u_xlat7.xy = sqrt(abs(u_xlat7.xy));
					            u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat2.zy;
					            u_xlat2 = textureLod(_MainTex, u_xlat15.xy, 0.0).yxzw;
					            u_xlat2.x = u_xlat3.x;
					            u_xlat15.xy = u_xlat2.xy * vec2(4.0, 4.0);
					            u_xlat15.xy = roundEven(u_xlat15.xy);
					            u_xlat7.xy = u_xlat15.xy * vec2(16.0, 16.0) + u_xlat7.xy;
					            u_xlat2.xy = u_xlat7.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					            u_xlat2.z = _SubsampleIndices.y * 0.142857149 + u_xlat2.y;
					            u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					            SV_Target0.xy = u_xlat2.xy;
					        } else {
					            SV_Target0.xy = u_xlat1.xy;
					            u_xlat0.x = 0.0;
					        }
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    u_xlatb0 = 0.0<u_xlat0.x;
					    if(u_xlatb0){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb21 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            if(!u_xlatb21){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb21 = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb1 = 0.828100026<u_xlat2.z;
					            u_xlatb21 = u_xlatb21 && u_xlatb1;
					            u_xlatb1 = u_xlat3.x==0.0;
					            u_xlatb21 = u_xlatb21 && u_xlatb1;
					            if(!u_xlatb21){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat21 = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat21 + u_xlat3.y;
					        u_xlat0.xw = _Metrics.ww * u_xlat0.xz + (-vs_TEXCOORD1.yy);
					        u_xlat0.xw = roundEven(u_xlat0.xw);
					        u_xlat0.xw = sqrt(abs(u_xlat0.xw));
					        u_xlat7.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat2 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					        u_xlat2.x = u_xlat1.y;
					        u_xlat7.xy = u_xlat2.xy * vec2(4.0, 4.0);
					        u_xlat7.xy = roundEven(u_xlat7.xy);
					        u_xlat0.xy = u_xlat7.xy * vec2(16.0, 16.0) + u_xlat0.xw;
					        u_xlat0.xy = u_xlat0.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat0.z = _SubsampleIndices.x * 0.142857149 + u_xlat0.y;
					        u_xlat0 = textureLod(_AreaTex, u_xlat0.xz, 0.0);
					        SV_Target0.zw = u_xlat0.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_CORNER_DETECTION" "USE_DIAG_SEARCH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _AreaTex;
					//   sampler2D _MainTex;
					//   float4 _Metrics;
					//   float4 _Params1;
					//   float2 _Params2;
					//   sampler2D _SearchTex;
					//   float4 _SubsampleIndices;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Metrics          c0       1
					//   _Params1          c1       1
					//   _Params2          c2       1
					//   _SubsampleIndices c3       1
					//   _MainTex          s0       1
					//   _AreaTex          s1       1
					//   _SearchTex        s2       1
					//
					
					    ps_3_0
					    def c4, 0.00625000009, 0.0017857143, 0.00312500005, 0.000892857148
					    def c5, 0.0017857143, 0.00625000009, 0.000892857148, 0.503125012
					    def c6, 5, -3.75, 20, 0.142857149
					    def c7, 0.899999976, 0.5, 0, 2
					    def c8, 0.828100026, -2.00787401, 3.25, 16
					    def c9, 0.5, -2, 0.0078125, 2.03125
					    def c10, 4, 0.5, 0.00999999978, 1
					    def c11, 0.5, -2, 0.5234375, 2.03125
					    def c12, 0.25, -1, 1, -0
					    def c13, 0, -1, 1, 0
					    def c14, 0, -2, 1, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    if_lt -r0.y, c13.x
					      if_lt -r0.x, c13.x
					        mov r1.xyz, c13
					        add r0.y, r1.y, c1.w
					        mad r1.xyz, c0.xyxw, r1.yzxw, r1.xxzw
					        mov r2.w, c13.x
					        mov r2.xy, v0
					        mov r0.z, c13.x
					        mov r2.z, c13.y
					        mov r3.x, c13.z
					        rep i0
					          add r0.w, -r0.y, r2.z
					          add r1.w, -r3.x, c7.x
					          cmp r1.w, r1.w, -c13.x, -c13.z
					          cmp r0.w, r0.w, c13.x, r1.w
					          cmp r0.w, r0.w, c13.z, c13.x
					          break_ne r0.w, -r0.w
					          add r2.xyz, r1, r2
					          texldl r4, r2.xyww, s0
					          dp2add r3.x, r4, c7.y, c7.z
					          mov r0.z, r4.y
					        endrep
					        add r0.y, -r0.z, c7.x
					        cmp r0.y, r0.y, c13.x, c13.z
					        add r1.x, r0.y, r2.z
					      else
					        mov r1.x, c13.x
					        mov r3.x, c13.x
					      endif
					      mov r2.xyz, c13
					      add r0.y, r2.y, c1.w
					      mad r4.xyz, c0.xyxw, r2.zyxw, r2.xxzw
					      mov r5.w, c13.x
					      mov r5.yz, v0.xxyw
					      mov r5.x, c13.y
					      mov r3.y, c13.z
					      rep i0
					        add r0.z, -r0.y, r5.x
					        add r0.w, -r3.y, c7.x
					        cmp r0.w, r0.w, -c13.x, -c13.z
					        cmp r0.z, r0.z, c13.x, r0.w
					        cmp r0.z, r0.z, c13.z, c13.x
					        break_ne r0.z, -r0.z
					        add r5.xyz, r4.zxyw, r5
					        texldl r6, r5.yzww, s0
					        dp2add r3.y, r6, c7.y, c7.z
					      endrep
					      add r0.z, r1.x, r5.x
					      if_lt c7.w, r0.z
					        add r1.y, -r1.x, c12.x
					        mad r1.zw, r5.x, -c12.xyyz, -c12.xywx
					        mad r4, r1.yxzw, c0.xyxy, v0.xyxy
					        mad r4, c0.xyxy, r2.yxzx, r4
					        mul r5, r4.xyxx, c13.zzxx
					        texldl r5, r5, s0
					        mul r4, r4.zwxx, c13.zzxx
					        texldl r4, r4, s0
					        mov r5.zw, r4.xyxy
					        mad r0.zw, r5.xyxz, c6.x, c6.y
					        mul r5.xz, r0_abs.zyww, r5
					        add r4, r5, c7.y
					        frc r5, r4
					        add r4, r4, -r5
					        mad r0.zw, r4.xywy, c7.w, r4.xyzx
					        add r1.yw, r3.xyzx, -c7.x
					        cmp r0.zw, r1.xyyw, c13.x, r0
					        mad r0.zw, r0, c6.z, r1.xyzx
					        mad r1.xy, r0.zwzw, c5, c5.zwzw
					        mov r0.w, c6.w
					        mad r1.z, c3.z, r0.w, r1.x
					        mov r1.w, c13.x
					        texldl r1, r1.yzww, s1
					      else
					        mov r1.xy, c13.x
					      endif
					      mov r3.xy, c0
					      mad r0.z, r3.x, c12.x, v0.x
					      mad r4.xyz, c0.xyxw, r2.yyxw, r2.xxzw
					      mov r5.w, c13.x
					      mov r5.y, r0.z
					      mov r5.z, v0.y
					      mov r5.x, c13.y
					      mov r6.x, c13.z
					      rep i0
					        add r0.w, -r0.y, r5.x
					        add r1.z, -r6.x, c7.x
					        cmp r1.z, r1.z, -c13.x, -c13.z
					        cmp r0.w, r0.w, c13.x, r1.z
					        cmp r0.w, r0.w, c13.z, c13.x
					        break_ne r0.w, -r0.w
					        add r5.xyz, r4.zxyw, r5
					        texldl r7, r5.yzww, s0
					        mad r0.w, r7.x, c6.x, c6.y
					        mul r7.x, r0_abs.w, r7.x
					        add r1.zw, r7.xyxy, c7.y
					        frc r3.zw, r1
					        add r1.zw, r1, -r3
					        dp2add r6.x, r1.zwzw, c7.y, c7.z
					      endrep
					      mad r4.xy, c0, r2.zxzw, v0
					      mov r4.zw, c13.x
					      texldl r4, r4, s0
					      if_lt -r4.x, c13.x
					        mad r4.xyz, c0.xyxw, r2.zzxw, r2.xxzw
					        mov r7.w, c13.x
					        mov r7.x, r0.z
					        mov r7.y, v0.y
					        mov r1.z, c13.x
					        mov r7.z, c13.y
					        mov r6.y, c13.z
					        rep i0
					          add r0.w, -r0.y, r7.z
					          add r2.w, -r6.y, c7.x
					          cmp r2.w, r2.w, -c13.x, -c13.z
					          cmp r0.w, r0.w, c13.x, r2.w
					          cmp r0.w, r0.w, c13.z, c13.x
					          break_ne r0.w, -r0.w
					          add r7.xyz, r4, r7
					          texldl r8, r7.xyww, s0
					          mad r0.w, r8.x, c6.x, c6.y
					          mul r8.x, r0_abs.w, r8.x
					          add r3.zw, r8.xyxy, c7.y
					          frc r6.zw, r3
					          add r1.zw, r3.xywz, -r6.xywz
					          dp2add r6.y, r1.wzzw, c7.y, c7.z
					        endrep
					        add r0.y, -r1.z, c7.x
					        cmp r0.y, r0.y, c13.x, c13.z
					        add r5.z, r0.y, r7.z
					      else
					        mov r5.z, c13.x
					        mov r6.y, c13.x
					      endif
					      add r0.y, r5.z, r5.x
					      if_lt c7.w, r0.y
					        mov r5.y, -r5.x
					        mad r4, r5.yyzz, c0.xyxy, v0.xyxy
					        mad r7, c0.xyxy, r2.yxxy, r4.xyxy
					        mul r8, r7.xyxx, c13.zzxx
					        texldl r8, r8, s0
					        mul r7, r7.zwxx, c13.zzxx
					        texldl r7, r7, s0
					        mad r4.xy, c0, r2.zxzw, r4.zwzw
					        mov r4.zw, c13.x
					        texldl r4, r4, s0
					        mov r8.xz, r4.yyxw
					        mov r8.w, r7.x
					        mad r0.yz, r8.xxyw, c7.w, r8.xzww
					        add r1.zw, r6.xyyx, -c7.x
					        cmp r0.yz, r1.xzww, c13.x, r0
					        mad r0.yz, r0, c6.z, r5.xzxw
					        mad r4.xy, r0.yzzw, c5, c5.zwzw
					        mov r0.w, c6.w
					        mad r4.z, c3.w, r0.w, r4.x
					        mov r4.w, c13.x
					        texldl r4, r4.yzww, s1
					        add r1.xy, r1, r4.yxzw
					      endif
					      if_eq r1.x, -r1.y
					        mov r4.xy, v2
					        mov r4.z, c13.z
					        mov r5.x, c13.x
					        rep i0
					          add r0.y, -r4.x, v4.x
					          add r0.z, -r4.z, c8.x
					          cmp r0.w, -r5_abs.x, -c13.z, -c13.x
					          cmp r0.z, r0.z, c13.x, r0.w
					          cmp r0.y, r0.y, c13.x, r0.z
					          cmp r0.y, r0.y, c13.z, c13.x
					          break_ne r0.y, -r0.y
					          mul r6, r4.xyxx, c13.zzxx
					          texldl r5, r6, s0
					          mad r4.xy, r3, -c7.wzzw, r4
					          mov r4.z, r5.y
					        endrep
					        mov r5.yz, r4.xxzw
					        mad r4.xy, r5.xzzw, c9, c9.zwzw
					        mov r4.zw, c13.x
					        texldl r4, r4, s2
					        mad r0.y, r4.w, c8.y, c8.z
					        mad r4.x, c0.x, r0.y, r5.y
					        mul r4.yw, c13.xzzx, v3.y
					        texldl r5, r4.xyww, s0
					        mov r6.xy, v2.zwzw
					        mov r6.z, c13.z
					        mov r7.x, c13.x
					        rep i0
					          add r0.y, r6.x, -v4.y
					          add r0.z, -r6.z, c8.x
					          cmp r0.w, -r7_abs.x, -c13.z, -c13.x
					          cmp r0.z, r0.z, c13.x, r0.w
					          cmp r0.y, r0.y, c13.x, r0.z
					          cmp r0.y, r0.y, c13.z, c13.x
					          break_ne r0.y, -r0.y
					          mul r8, r6.xyxx, c13.zzxx
					          texldl r7, r8, s0
					          mad r6.xy, r3, c7.wzzw, r6
					          mov r6.z, r7.y
					        endrep
					        mov r7.yz, r6.xxzw
					        mad r6.xy, r7.xzzw, c11, c11.zwzw
					        mov r6.zw, c13.x
					        texldl r6, r6, s2
					        mad r0.y, r6.w, c8.y, c8.z
					        mad r4.z, -c0.x, r0.y, r7.y
					        mad r0.yz, c0.z, r4.xzxw, -v1.x
					        add r0.yz, r0, c7.y
					        frc r1.zw, r0.xyyz
					        add r0.yz, r0, -r1.xzww
					        rsq r0.w, r0_abs.z
					        rsq r1.z, r0_abs.y
					        rcp r6.x, r0.w
					        rcp r6.y, r1.z
					        mad r7.xy, c0, r2.zxzw, r4.zyzw
					        mov r7.zw, c13.x
					        texldl r7, r7, s0
					        mov r5.y, r7.x
					        mad r1.zw, r5.xyxy, c10.x, c10.y
					        frc r2.yw, r1.xzzw
					        add r1.zw, r1, -r2.xyyw
					        mad r1.zw, r1, c8.w, r6.xyxy
					        mad r5.xy, r1.zwzw, c4, c4.zwzw
					        mov r0.w, c6.w
					        mad r5.z, c3.y, r0.w, r5.y
					        mov r5.w, c13.x
					        texldl r5, r5.xzww, s1
					        add r0.yz, -r0_abs.xzyw, r0_abs
					        cmp r0.yz, r0, c13.z, c13.x
					        mov r1.zw, c10
					        mad r0.w, c2.x, -r1.z, r1.w
					        mul r1.zw, r0.xyyz, r0.w
					        add r0.y, r0.z, r0.y
					        rcp r0.y, r0.y
					        mul r0.yz, r0.y, r1.xzww
					        mov r4.yw, v0.y
					        mad r2.xy, c0, r2.xzzw, r4
					        mov r2.zw, c13.x
					        texldl r2, r2, s0
					        mad r0.w, r0.y, -r2.x, c13.z
					        add r2.xy, r4.zwzw, c0
					        mov r2.zw, c13.x
					        texldl r2, r2, s0
					        mad_sat r2.x, r0.z, -r2.x, r0.w
					        mad r6.xy, r3, c14, r4
					        mov r6.zw, c13.x
					        texldl r6, r6, s0
					        mad r0.y, r0.y, -r6.x, c13.z
					        mad r3.xy, r3, c14.zyzw, r4.zwzw
					        mov r3.zw, c13.x
					        texldl r3, r3, s0
					        mad_sat r2.y, r0.z, -r3.x, r0.y
					        mul oC0.xy, r2, r5
					      else
					        mov oC0.xy, r1
					        mov r0.x, c13.x
					      endif
					    else
					      mov oC0.xy, c13.x
					    endif
					    if_lt -r0.x, c13.x
					      mov r0.xy, v3
					      mov r0.z, c13.z
					      mov r1.x, c13.x
					      rep i0
					        add r0.w, -r0.y, v4.z
					        add r1.w, -r0.z, c8.x
					        cmp r2.x, -r1_abs.x, -c13.z, -c13.x
					        cmp r1.w, r1.w, c13.x, r2.x
					        cmp r0.w, r0.w, c13.x, r1.w
					        cmp r0.w, r0.w, c13.z, c13.x
					        break_ne r0.w, -r0.w
					        mul r2, r0.xyxx, c13.zzxx
					        texldl r2, r2, s0
					        mov r3.xy, c0
					        mad r0.xy, r3, -c7.zwzw, r0
					        mov r0.z, r2.x
					        mov r1.x, r2.y
					      endrep
					      mov r1.yz, r0
					      mad r0.xy, r1.xzzw, c9, c9.zwzw
					      mov r0.zw, c13.x
					      texldl r0, r0, s2
					      mad r0.x, r0.w, c8.y, c8.z
					      mad r0.y, c0.y, r0.x, r1.y
					      mul r0.xz, c13.zyxw, v2.x
					      texldl r1, r0.xyzz, s0
					      mov r2.xy, v3.zwzw
					      mov r2.z, c13.z
					      mov r3.x, c13.x
					      rep i0
					        add r1.x, r2.y, -v4.w
					        add r1.z, -r2.z, c8.x
					        cmp r1.w, -r3_abs.x, -c13.z, -c13.x
					        cmp r1.z, r1.z, c13.x, r1.w
					        cmp r1.x, r1.x, c13.x, r1.z
					        cmp r1.x, r1.x, c13.z, c13.x
					        break_ne r1.x, -r1.x
					        mul r4, r2.xyxx, c13.zzxx
					        texldl r4, r4, s0
					        mov r5.xy, c0
					        mad r2.xy, r5, c7.zwzw, r2
					        mov r2.z, r4.x
					        mov r3.x, r4.y
					      endrep
					      mov r3.yz, r2
					      mad r2.xy, r3.xzzw, c11, c11.zwzw
					      mov r2.zw, c13.x
					      texldl r2, r2, s2
					      mad r1.x, r2.w, c8.y, c8.z
					      mad r0.w, -c0.y, r1.x, r3.y
					      mad r1.xz, c0.w, r0.wyyw, -v1.y
					      add r1.xz, r1, c7.y
					      frc r2.xy, r1.xzzw
					      add r1.xz, r1, -r2.xyyw
					      rsq r1.w, r1_abs.z
					      rsq r2.x, r1_abs.x
					      rcp r3.x, r1.w
					      rcp r3.y, r2.x
					      mov r2.xz, c13
					      mad r4.y, c0.y, r2.z, r0.w
					      mul r4.zw, c13.xyzx, v2.x
					      texldl r4, r4.zyww, s0
					      mov r4.x, r1.y
					      mad r1.yw, r4.xxzy, c10.x, c10.y
					      frc r2.yw, r1
					      add r1.yw, r1, -r2
					      mad r1.yw, r1, c8.w, r3.xxzy
					      mad r3.xy, r1.ywzw, c4, c4.zwzw
					      mov r1.w, c6.w
					      mad r3.z, c3.x, r1.w, r3.y
					      mov r3.w, c13.x
					      texldl r3, r3.xzww, s1
					      add r1.xy, -r1_abs.zxzw, r1_abs.xzzw
					      cmp r1.xy, r1, c13.z, c13.x
					      mov r1.zw, c10
					      mad r1.z, c2.x, -r1.z, r1.w
					      mul r1.zw, r1.xyxy, r1.z
					      add r1.x, r1.y, r1.x
					      rcp r1.x, r1.x
					      mul r1.xy, r1.x, r1.zwzw
					      mov r0.xz, v0.x
					      mad r2.xy, c0, r2.zxzw, r0
					      mov r2.zw, c13.x
					      texldl r2, r2, s0
					      mad r1.z, r1.x, -r2.y, c13.z
					      add r2.xy, r0.zwzw, c0
					      mov r2.zw, c13.x
					      texldl r2, r2, s0
					      mad_sat r1.z, r1.y, -r2.y, r1.z
					      mov r2.xy, c0
					      mad r4.xy, r2, c14.yxzw, r0
					      mov r4.zw, c13.x
					      texldl r4, r4, s0
					      mad r0.x, r1.x, -r4.y, c13.z
					      mad r2.xy, r2, c14.yzzw, r0.zwzw
					      mov r2.zw, c13.x
					      texldl r2, r2, s0
					      mad_sat r1.w, r1.y, -r2.y, r0.x
					      mul oC0.zw, r1, r3.xyxy
					    else
					      mov oC0.zw, c13.x
					    endif
					
					// approximately 455 instruction slots used (69 texture, 386 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_CORNER_DETECTION" "USE_DIAG_SEARCH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec2 _Params2;
						vec4 unused_0_4[5];
						vec4 _SubsampleIndices;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AreaTex;
					uniform  sampler2D _SearchTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bvec2 u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					bvec2 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec2 u_xlat14;
					bool u_xlatb14;
					vec2 u_xlat15;
					bvec2 u_xlatb15;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb7.x = 0.0<u_xlat0.y;
					    if(u_xlatb7.x){
					        u_xlatb7.x = 0.0<u_xlat0.x;
					        if(u_xlatb7.x){
					            u_xlat7.x = _Params1.w + -1.0;
					            u_xlat1.xy = _Metrics.xy * vec2(-1.0, 1.0);
					            u_xlat1.z = 1.0;
					            u_xlat2.xy = vs_TEXCOORD0.xy;
					            u_xlat3.x = 0.0;
					            u_xlat2.z = -1.0;
					            u_xlat4.x = 1.0;
					            while(true){
					                u_xlatb14 = u_xlat2.z<u_xlat7.x;
					                u_xlatb21 = 0.899999976<u_xlat4.x;
					                u_xlatb14 = u_xlatb21 && u_xlatb14;
					                if(!u_xlatb14){break;}
					                u_xlat2.xyz = u_xlat1.xyz + u_xlat2.xyz;
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					                u_xlat4.x = dot(u_xlat3.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7.x = 0.899999976<u_xlat3.x;
					            u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
					            u_xlat1.x = u_xlat7.x + u_xlat2.z;
					        } else {
					            u_xlat1.x = 0.0;
					            u_xlat4.x = 0.0;
					        }
					        u_xlat7.x = _Params1.w + -1.0;
					        u_xlat9.xy = _Metrics.xy * vec2(1.0, -1.0);
					        u_xlat9.z = 1.0;
					        u_xlat3.yz = vs_TEXCOORD0.xy;
					        u_xlat3.x = float(-1.0);
					        u_xlat24 = float(1.0);
					        while(true){
					            u_xlatb14 = u_xlat3.x<u_xlat7.x;
					            u_xlatb21 = 0.899999976<u_xlat24;
					            u_xlatb14 = u_xlatb21 && u_xlatb14;
					            if(!u_xlatb14){break;}
					            u_xlat3.xyz = u_xlat9.zxy + u_xlat3.xyz;
					            u_xlat5 = textureLod(_MainTex, u_xlat3.yz, 0.0);
					            u_xlat24 = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat4.y = u_xlat24;
					        u_xlat14.x = u_xlat1.x + u_xlat3.x;
					        u_xlatb14 = 2.0<u_xlat14.x;
					        if(u_xlatb14){
					            u_xlat1.y = (-u_xlat1.x) + 0.25;
					            u_xlat1.zw = u_xlat3.xx * vec2(1.0, -1.0) + vec2(0.0, -0.25);
					            u_xlat2 = u_xlat1.yxzw * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat2 = _Metrics.xyxy * vec4(-1.0, 0.0, 1.0, 0.0) + u_xlat2;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					            u_xlat3.z = u_xlat2.x;
					            u_xlat14.xy = u_xlat3.zx * vec2(5.0, 5.0) + vec2(-3.75, -3.75);
					            u_xlat14.xy = abs(u_xlat14.xy) * u_xlat3.zx;
					            u_xlat14.xy = roundEven(u_xlat14.xy);
					            u_xlat8.x = roundEven(u_xlat3.y);
					            u_xlat8.z = roundEven(u_xlat2.y);
					            u_xlat14.xy = u_xlat8.zx * vec2(2.0, 2.0) + u_xlat14.xy;
					            u_xlatb8.xz = greaterThanEqual(u_xlat4.yyxx, vec4(0.899999976, 0.0, 0.899999976, 0.899999976)).xz;
					            {
					                vec2 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb8.x) ? float(0.0) : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb8.z) ? float(0.0) : u_xlat14.y;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat14.xy = u_xlat14.xy * vec2(20.0, 20.0) + u_xlat1.zx;
					            u_xlat1.xy = u_xlat14.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat1.z = _SubsampleIndices.z * 0.142857149 + u_xlat1.x;
					            u_xlat1 = textureLod(_AreaTex, u_xlat1.yz, 0.0);
					        } else {
					            u_xlat1.x = float(0.0);
					            u_xlat1.y = float(0.0);
					        }
					        u_xlat14.x = _Metrics.x * 0.25 + vs_TEXCOORD0.x;
					        u_xlat2.xy = (-_Metrics.xy);
					        u_xlat2.z = 1.0;
					        u_xlat10.x = u_xlat14.x;
					        u_xlat10.y = vs_TEXCOORD0.y;
					        u_xlat3.x = float(1.0);
					        u_xlat10.z = float(-1.0);
					        while(true){
					            u_xlatb21 = u_xlat10.z<u_xlat7.x;
					            u_xlatb15.x = 0.899999976<u_xlat3.x;
					            u_xlatb21 = u_xlatb21 && u_xlatb15.x;
					            if(!u_xlatb21){break;}
					            u_xlat10.xyz = u_xlat2.xyz + u_xlat10.xyz;
					            u_xlat4 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					            u_xlat21 = u_xlat4.x * 5.0 + -3.75;
					            u_xlat21 = abs(u_xlat21) * u_xlat4.x;
					            u_xlat5.x = roundEven(u_xlat21);
					            u_xlat5.y = roundEven(u_xlat4.y);
					            u_xlat3.x = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat2.x = u_xlat10.z;
					        u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlatb21 = 0.0<u_xlat4.x;
					        if(u_xlatb21){
					            u_xlat4.xy = _Metrics.xy;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = u_xlat14.x;
					            u_xlat5.y = vs_TEXCOORD0.y;
					            u_xlat15.x = 0.0;
					            u_xlat5.z = -1.0;
					            u_xlat3.y = 1.0;
					            while(true){
					                u_xlatb21 = u_xlat5.z<u_xlat7.x;
					                u_xlatb23 = 0.899999976<u_xlat3.y;
					                u_xlatb21 = u_xlatb21 && u_xlatb23;
					                if(!u_xlatb21){break;}
					                u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
					                u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					                u_xlat21 = u_xlat6.x * 5.0 + -3.75;
					                u_xlat21 = abs(u_xlat21) * u_xlat6.x;
					                u_xlat15.y = roundEven(u_xlat21);
					                u_xlat15.x = roundEven(u_xlat6.y);
					                u_xlat3.y = dot(u_xlat15.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7.x = 0.899999976<u_xlat15.x;
					            u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
					            u_xlat2.z = u_xlat7.x + u_xlat5.z;
					        } else {
					            u_xlat2.z = 0.0;
					            u_xlat3.y = 0.0;
					        }
					        u_xlat7.x = u_xlat2.z + u_xlat2.x;
					        u_xlatb7.x = 2.0<u_xlat7.x;
					        if(u_xlatb7.x){
					            u_xlat2.y = (-u_xlat2.x);
					            u_xlat4 = u_xlat2.yyzz * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat5 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat4.xyxy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5 = textureLod(_MainTex, u_xlat5.zw, 0.0).yzwx;
					            u_xlat7.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat4.zw;
					            u_xlat4 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat5.y = u_xlat6.y;
					            u_xlat5.xz = u_xlat4.yx;
					            u_xlat7.xy = u_xlat5.xy * vec2(2.0, 2.0) + u_xlat5.zw;
					            u_xlatb15.xy = greaterThanEqual(u_xlat3.yxyx, vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976)).xy;
					            {
					                vec2 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? float(0.0) : u_xlat7.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? float(0.0) : u_xlat7.y;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat7.xy = u_xlat7.xy * vec2(20.0, 20.0) + u_xlat2.zx;
					            u_xlat2.xy = u_xlat7.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat2.z = _SubsampleIndices.w * 0.142857149 + u_xlat2.x;
					            u_xlat2 = textureLod(_AreaTex, u_xlat2.yz, 0.0);
					            u_xlat1.xy = u_xlat1.xy + u_xlat2.yx;
					        }
					        u_xlatb7.x = (-u_xlat1.y)==u_xlat1.x;
					        if(u_xlatb7.x){
					            u_xlat2.xy = vs_TEXCOORD2.xy;
					            u_xlat2.z = 1.0;
					            u_xlat3.x = 0.0;
					            while(true){
					                u_xlatb7.x = vs_TEXCOORD4.x<u_xlat2.x;
					                u_xlatb14 = 0.828100026<u_xlat2.z;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                u_xlatb14 = u_xlat3.x==0.0;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                if(!u_xlatb7.x){break;}
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					                u_xlat2.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat2.xy;
					                u_xlat2.z = u_xlat3.y;
					            }
					            u_xlat3.yz = u_xlat2.xz;
					            u_xlat7.xy = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					            u_xlat2 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat2.w * -2.00787401 + 3.25;
					            u_xlat2.x = _Metrics.x * u_xlat7.x + u_xlat3.y;
					            u_xlat2.y = vs_TEXCOORD3.y;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat4.xy = vs_TEXCOORD2.zw;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = 0.0;
					            while(true){
					                u_xlatb7.x = u_xlat4.x<vs_TEXCOORD4.y;
					                u_xlatb14 = 0.828100026<u_xlat4.z;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                u_xlatb14 = u_xlat5.x==0.0;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                if(!u_xlatb7.x){break;}
					                u_xlat5 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					                u_xlat4.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat4.xy;
					                u_xlat4.z = u_xlat5.y;
					            }
					            u_xlat5.yz = u_xlat4.xz;
					            u_xlat7.xy = u_xlat5.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					            u_xlat4 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat4.w * -2.00787401 + 3.25;
					            u_xlat2.z = (-_Metrics.x) * u_xlat7.x + u_xlat5.y;
					            u_xlat7.xy = _Metrics.zz * u_xlat2.zx + (-vs_TEXCOORD1.xx);
					            u_xlat7.xy = roundEven(u_xlat7.xy);
					            u_xlat15.xy = sqrt(abs(u_xlat7.yx));
					            u_xlat10.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat2.zy;
					            u_xlat4 = textureLod(_MainTex, u_xlat10.xy, 0.0).yxzw;
					            u_xlat4.x = u_xlat3.x;
					            u_xlat3.xy = u_xlat4.xy * vec2(4.0, 4.0);
					            u_xlat3.xy = roundEven(u_xlat3.xy);
					            u_xlat15.xy = u_xlat3.xy * vec2(16.0, 16.0) + u_xlat15.xy;
					            u_xlat3.xy = u_xlat15.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					            u_xlat3.z = _SubsampleIndices.y * 0.142857149 + u_xlat3.y;
					            u_xlat3 = textureLod(_AreaTex, u_xlat3.xz, 0.0);
					            u_xlatb7.xy = greaterThanEqual(abs(u_xlat7.xyxx), abs(u_xlat7.yxyy)).xy;
					            u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
					            u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
					;
					            u_xlat21 = (-_Params2.x) * 0.00999999978 + 1.0;
					            u_xlat15.xy = u_xlat7.xy * vec2(u_xlat21);
					            u_xlat7.x = u_xlat7.y + u_xlat7.x;
					            u_xlat7.xy = u_xlat15.xy / u_xlat7.xx;
					            u_xlat2.w = vs_TEXCOORD0.y;
					            u_xlat15.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat2.xw;
					            u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					            u_xlat21 = (-u_xlat7.x) * u_xlat4.x + 1.0;
					            u_xlat15.xy = u_xlat2.zw + _Metrics.xy;
					            u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					            u_xlat4.x = (-u_xlat7.y) * u_xlat4.x + u_xlat21;
					            u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					            u_xlat2 = _Metrics.xyxy * vec4(0.0, -2.0, 1.0, -2.0) + u_xlat2.xwzw;
					            u_xlat5 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat7.x = (-u_xlat7.x) * u_xlat5.x + 1.0;
					            u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					            u_xlat4.y = (-u_xlat7.y) * u_xlat2.x + u_xlat7.x;
					            u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
					            SV_Target0.xy = u_xlat3.xy * u_xlat4.xy;
					        } else {
					            SV_Target0.xy = u_xlat1.xy;
					            u_xlat0.x = 0.0;
					        }
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    u_xlatb0 = 0.0<u_xlat0.x;
					    if(u_xlatb0){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb21 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            if(!u_xlatb21){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb1.x = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb15.x = 0.828100026<u_xlat2.z;
					            u_xlatb1.x = u_xlatb15.x && u_xlatb1.x;
					            u_xlatb15.x = u_xlat3.x==0.0;
					            u_xlatb1.x = u_xlatb15.x && u_xlatb1.x;
					            if(!u_xlatb1.x){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat1.x = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat1.x + u_xlat3.y;
					        u_xlat1.xz = _Metrics.ww * u_xlat0.zx + (-vs_TEXCOORD1.yy);
					        u_xlat1.xz = roundEven(u_xlat1.xz);
					        u_xlat2.xy = sqrt(abs(u_xlat1.zx));
					        u_xlat16.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat3 = textureLod(_MainTex, u_xlat16.xy, 0.0);
					        u_xlat3.x = u_xlat1.y;
					        u_xlat8.xz = u_xlat3.xy * vec2(4.0, 4.0);
					        u_xlat8.xz = roundEven(u_xlat8.xz);
					        u_xlat8.xz = u_xlat8.xz * vec2(16.0, 16.0) + u_xlat2.xy;
					        u_xlat2.xy = u_xlat8.xz * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat2.z = _SubsampleIndices.x * 0.142857149 + u_xlat2.y;
					        u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					        u_xlatb1.xy = greaterThanEqual(abs(u_xlat1.xzxx), abs(u_xlat1.zxzz)).xy;
					        u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					        u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					;
					        u_xlat7.x = (-_Params2.x) * 0.00999999978 + 1.0;
					        u_xlat15.xy = u_xlat1.xy * u_xlat7.xx;
					        u_xlat7.x = u_xlat1.y + u_xlat1.x;
					        u_xlat1.xy = u_xlat15.xy / u_xlat7.xx;
					        u_xlat0.w = vs_TEXCOORD0.x;
					        u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat0.wx;
					        u_xlat3 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlat7.x = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat15.xy = u_xlat0.wz + _Metrics.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlat15.x = (-u_xlat1.y) * u_xlat3.y + u_xlat7.x;
					        u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
					        u_xlat0 = _Metrics.xyxy * vec4(-2.0, 0.0, -2.0, 1.0) + u_xlat0.wxwz;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					        u_xlat15.y = (-u_xlat1.y) * u_xlat3.y + u_xlat0.x;
					        u_xlat15.y = clamp(u_xlat15.y, 0.0, 1.0);
					        SV_Target0.zw = u_xlat15.xy * u_xlat2.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_CORNER_DETECTION" "USE_DIAG_SEARCH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 _Params1;
						vec2 _Params2;
						vec4 unused_0_4[5];
						vec4 _SubsampleIndices;
						vec4 unused_0_6[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AreaTex;
					uniform  sampler2D _SearchTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bvec2 u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					bvec2 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec2 u_xlat14;
					bool u_xlatb14;
					vec2 u_xlat15;
					bvec2 u_xlatb15;
					vec2 u_xlat16;
					float u_xlat21;
					bool u_xlatb21;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlatb7.x = 0.0<u_xlat0.y;
					    if(u_xlatb7.x){
					        u_xlatb7.x = 0.0<u_xlat0.x;
					        if(u_xlatb7.x){
					            u_xlat7.x = _Params1.w + -1.0;
					            u_xlat1.xy = _Metrics.xy * vec2(-1.0, 1.0);
					            u_xlat1.z = 1.0;
					            u_xlat2.xy = vs_TEXCOORD0.xy;
					            u_xlat3.x = 0.0;
					            u_xlat2.z = -1.0;
					            u_xlat4.x = 1.0;
					            while(true){
					                u_xlatb14 = u_xlat2.z<u_xlat7.x;
					                u_xlatb21 = 0.899999976<u_xlat4.x;
					                u_xlatb14 = u_xlatb21 && u_xlatb14;
					                if(!u_xlatb14){break;}
					                u_xlat2.xyz = u_xlat1.xyz + u_xlat2.xyz;
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					                u_xlat4.x = dot(u_xlat3.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7.x = 0.899999976<u_xlat3.x;
					            u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
					            u_xlat1.x = u_xlat7.x + u_xlat2.z;
					        } else {
					            u_xlat1.x = 0.0;
					            u_xlat4.x = 0.0;
					        }
					        u_xlat7.x = _Params1.w + -1.0;
					        u_xlat9.xy = _Metrics.xy * vec2(1.0, -1.0);
					        u_xlat9.z = 1.0;
					        u_xlat3.yz = vs_TEXCOORD0.xy;
					        u_xlat3.x = float(-1.0);
					        u_xlat24 = float(1.0);
					        while(true){
					            u_xlatb14 = u_xlat3.x<u_xlat7.x;
					            u_xlatb21 = 0.899999976<u_xlat24;
					            u_xlatb14 = u_xlatb21 && u_xlatb14;
					            if(!u_xlatb14){break;}
					            u_xlat3.xyz = u_xlat9.zxy + u_xlat3.xyz;
					            u_xlat5 = textureLod(_MainTex, u_xlat3.yz, 0.0);
					            u_xlat24 = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat4.y = u_xlat24;
					        u_xlat14.x = u_xlat1.x + u_xlat3.x;
					        u_xlatb14 = 2.0<u_xlat14.x;
					        if(u_xlatb14){
					            u_xlat1.y = (-u_xlat1.x) + 0.25;
					            u_xlat1.zw = u_xlat3.xx * vec2(1.0, -1.0) + vec2(0.0, -0.25);
					            u_xlat2 = u_xlat1.yxzw * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat2 = _Metrics.xyxy * vec4(-1.0, 0.0, 1.0, 0.0) + u_xlat2;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					            u_xlat3.z = u_xlat2.x;
					            u_xlat14.xy = u_xlat3.zx * vec2(5.0, 5.0) + vec2(-3.75, -3.75);
					            u_xlat14.xy = abs(u_xlat14.xy) * u_xlat3.zx;
					            u_xlat14.xy = roundEven(u_xlat14.xy);
					            u_xlat8.x = roundEven(u_xlat3.y);
					            u_xlat8.z = roundEven(u_xlat2.y);
					            u_xlat14.xy = u_xlat8.zx * vec2(2.0, 2.0) + u_xlat14.xy;
					            u_xlatb8.xz = greaterThanEqual(u_xlat4.yyxx, vec4(0.899999976, 0.0, 0.899999976, 0.899999976)).xz;
					            {
					                vec2 hlslcc_movcTemp = u_xlat14;
					                hlslcc_movcTemp.x = (u_xlatb8.x) ? float(0.0) : u_xlat14.x;
					                hlslcc_movcTemp.y = (u_xlatb8.z) ? float(0.0) : u_xlat14.y;
					                u_xlat14 = hlslcc_movcTemp;
					            }
					            u_xlat14.xy = u_xlat14.xy * vec2(20.0, 20.0) + u_xlat1.zx;
					            u_xlat1.xy = u_xlat14.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat1.z = _SubsampleIndices.z * 0.142857149 + u_xlat1.x;
					            u_xlat1 = textureLod(_AreaTex, u_xlat1.yz, 0.0);
					        } else {
					            u_xlat1.x = float(0.0);
					            u_xlat1.y = float(0.0);
					        }
					        u_xlat14.x = _Metrics.x * 0.25 + vs_TEXCOORD0.x;
					        u_xlat2.xy = (-_Metrics.xy);
					        u_xlat2.z = 1.0;
					        u_xlat10.x = u_xlat14.x;
					        u_xlat10.y = vs_TEXCOORD0.y;
					        u_xlat3.x = float(1.0);
					        u_xlat10.z = float(-1.0);
					        while(true){
					            u_xlatb21 = u_xlat10.z<u_xlat7.x;
					            u_xlatb15.x = 0.899999976<u_xlat3.x;
					            u_xlatb21 = u_xlatb21 && u_xlatb15.x;
					            if(!u_xlatb21){break;}
					            u_xlat10.xyz = u_xlat2.xyz + u_xlat10.xyz;
					            u_xlat4 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					            u_xlat21 = u_xlat4.x * 5.0 + -3.75;
					            u_xlat21 = abs(u_xlat21) * u_xlat4.x;
					            u_xlat5.x = roundEven(u_xlat21);
					            u_xlat5.y = roundEven(u_xlat4.y);
					            u_xlat3.x = dot(u_xlat5.xy, vec2(0.5, 0.5));
					        }
					        u_xlat2.x = u_xlat10.z;
					        u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlatb21 = 0.0<u_xlat4.x;
					        if(u_xlatb21){
					            u_xlat4.xy = _Metrics.xy;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = u_xlat14.x;
					            u_xlat5.y = vs_TEXCOORD0.y;
					            u_xlat15.x = 0.0;
					            u_xlat5.z = -1.0;
					            u_xlat3.y = 1.0;
					            while(true){
					                u_xlatb21 = u_xlat5.z<u_xlat7.x;
					                u_xlatb23 = 0.899999976<u_xlat3.y;
					                u_xlatb21 = u_xlatb21 && u_xlatb23;
					                if(!u_xlatb21){break;}
					                u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
					                u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					                u_xlat21 = u_xlat6.x * 5.0 + -3.75;
					                u_xlat21 = abs(u_xlat21) * u_xlat6.x;
					                u_xlat15.y = roundEven(u_xlat21);
					                u_xlat15.x = roundEven(u_xlat6.y);
					                u_xlat3.y = dot(u_xlat15.yx, vec2(0.5, 0.5));
					            }
					            u_xlatb7.x = 0.899999976<u_xlat15.x;
					            u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
					            u_xlat2.z = u_xlat7.x + u_xlat5.z;
					        } else {
					            u_xlat2.z = 0.0;
					            u_xlat3.y = 0.0;
					        }
					        u_xlat7.x = u_xlat2.z + u_xlat2.x;
					        u_xlatb7.x = 2.0<u_xlat7.x;
					        if(u_xlatb7.x){
					            u_xlat2.y = (-u_xlat2.x);
					            u_xlat4 = u_xlat2.yyzz * _Metrics.xyxy + vs_TEXCOORD0.xyxy;
					            u_xlat5 = _Metrics.xyxy * vec4(-1.0, 0.0, 0.0, -1.0) + u_xlat4.xyxy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5 = textureLod(_MainTex, u_xlat5.zw, 0.0).yzwx;
					            u_xlat7.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat4.zw;
					            u_xlat4 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat5.y = u_xlat6.y;
					            u_xlat5.xz = u_xlat4.yx;
					            u_xlat7.xy = u_xlat5.xy * vec2(2.0, 2.0) + u_xlat5.zw;
					            u_xlatb15.xy = greaterThanEqual(u_xlat3.yxyx, vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976)).xy;
					            {
					                vec2 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb15.x) ? float(0.0) : u_xlat7.x;
					                hlslcc_movcTemp.y = (u_xlatb15.y) ? float(0.0) : u_xlat7.y;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat7.xy = u_xlat7.xy * vec2(20.0, 20.0) + u_xlat2.zx;
					            u_xlat2.xy = u_xlat7.xy * vec2(0.0017857143, 0.00625000009) + vec2(0.000892857148, 0.503125012);
					            u_xlat2.z = _SubsampleIndices.w * 0.142857149 + u_xlat2.x;
					            u_xlat2 = textureLod(_AreaTex, u_xlat2.yz, 0.0);
					            u_xlat1.xy = u_xlat1.xy + u_xlat2.yx;
					        }
					        u_xlatb7.x = (-u_xlat1.y)==u_xlat1.x;
					        if(u_xlatb7.x){
					            u_xlat2.xy = vs_TEXCOORD2.xy;
					            u_xlat2.z = 1.0;
					            u_xlat3.x = 0.0;
					            while(true){
					                u_xlatb7.x = vs_TEXCOORD4.x<u_xlat2.x;
					                u_xlatb14 = 0.828100026<u_xlat2.z;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                u_xlatb14 = u_xlat3.x==0.0;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                if(!u_xlatb7.x){break;}
					                u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					                u_xlat2.xy = _Metrics.xy * vec2(-2.0, -0.0) + u_xlat2.xy;
					                u_xlat2.z = u_xlat3.y;
					            }
					            u_xlat3.yz = u_xlat2.xz;
					            u_xlat7.xy = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					            u_xlat2 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat2.w * -2.00787401 + 3.25;
					            u_xlat2.x = _Metrics.x * u_xlat7.x + u_xlat3.y;
					            u_xlat2.y = vs_TEXCOORD3.y;
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat4.xy = vs_TEXCOORD2.zw;
					            u_xlat4.z = 1.0;
					            u_xlat5.x = 0.0;
					            while(true){
					                u_xlatb7.x = u_xlat4.x<vs_TEXCOORD4.y;
					                u_xlatb14 = 0.828100026<u_xlat4.z;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                u_xlatb14 = u_xlat5.x==0.0;
					                u_xlatb7.x = u_xlatb14 && u_xlatb7.x;
					                if(!u_xlatb7.x){break;}
					                u_xlat5 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					                u_xlat4.xy = _Metrics.xy * vec2(2.0, 0.0) + u_xlat4.xy;
					                u_xlat4.z = u_xlat5.y;
					            }
					            u_xlat5.yz = u_xlat4.xz;
					            u_xlat7.xy = u_xlat5.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					            u_xlat4 = textureLod(_SearchTex, u_xlat7.xy, 0.0);
					            u_xlat7.x = u_xlat4.w * -2.00787401 + 3.25;
					            u_xlat2.z = (-_Metrics.x) * u_xlat7.x + u_xlat5.y;
					            u_xlat7.xy = _Metrics.zz * u_xlat2.zx + (-vs_TEXCOORD1.xx);
					            u_xlat7.xy = roundEven(u_xlat7.xy);
					            u_xlat15.xy = sqrt(abs(u_xlat7.yx));
					            u_xlat10.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat2.zy;
					            u_xlat4 = textureLod(_MainTex, u_xlat10.xy, 0.0).yxzw;
					            u_xlat4.x = u_xlat3.x;
					            u_xlat3.xy = u_xlat4.xy * vec2(4.0, 4.0);
					            u_xlat3.xy = roundEven(u_xlat3.xy);
					            u_xlat15.xy = u_xlat3.xy * vec2(16.0, 16.0) + u_xlat15.xy;
					            u_xlat3.xy = u_xlat15.xy * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					            u_xlat3.z = _SubsampleIndices.y * 0.142857149 + u_xlat3.y;
					            u_xlat3 = textureLod(_AreaTex, u_xlat3.xz, 0.0);
					            u_xlatb7.xy = greaterThanEqual(abs(u_xlat7.xyxx), abs(u_xlat7.yxyy)).xy;
					            u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
					            u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
					;
					            u_xlat21 = (-_Params2.x) * 0.00999999978 + 1.0;
					            u_xlat15.xy = u_xlat7.xy * vec2(u_xlat21);
					            u_xlat7.x = u_xlat7.y + u_xlat7.x;
					            u_xlat7.xy = u_xlat15.xy / u_xlat7.xx;
					            u_xlat2.w = vs_TEXCOORD0.y;
					            u_xlat15.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat2.xw;
					            u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					            u_xlat21 = (-u_xlat7.x) * u_xlat4.x + 1.0;
					            u_xlat15.xy = u_xlat2.zw + _Metrics.xy;
					            u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					            u_xlat4.x = (-u_xlat7.y) * u_xlat4.x + u_xlat21;
					            u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					            u_xlat2 = _Metrics.xyxy * vec4(0.0, -2.0, 1.0, -2.0) + u_xlat2.xwzw;
					            u_xlat5 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					            u_xlat7.x = (-u_xlat7.x) * u_xlat5.x + 1.0;
					            u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					            u_xlat4.y = (-u_xlat7.y) * u_xlat2.x + u_xlat7.x;
					            u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
					            SV_Target0.xy = u_xlat3.xy * u_xlat4.xy;
					        } else {
					            SV_Target0.xy = u_xlat1.xy;
					            u_xlat0.x = 0.0;
					        }
					    } else {
					        SV_Target0.xy = vec2(0.0, 0.0);
					    }
					    u_xlatb0 = 0.0<u_xlat0.x;
					    if(u_xlatb0){
					        u_xlat0.xy = vs_TEXCOORD3.xy;
					        u_xlat0.z = 1.0;
					        u_xlat1.x = 0.0;
					        while(true){
					            u_xlatb21 = vs_TEXCOORD4.z<u_xlat0.y;
					            u_xlatb2 = 0.828100026<u_xlat0.z;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            u_xlatb2 = u_xlat1.x==0.0;
					            u_xlatb21 = u_xlatb21 && u_xlatb2;
					            if(!u_xlatb21){break;}
					            u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0).yxzw;
					            u_xlat0.xy = _Metrics.xy * vec2(-0.0, -2.0) + u_xlat0.xy;
					            u_xlat0.z = u_xlat1.y;
					        }
					        u_xlat1.yz = u_xlat0.yz;
					        u_xlat0.xy = u_xlat1.xz * vec2(0.5, -2.0) + vec2(0.0078125, 2.03125);
					        u_xlat0 = textureLod(_SearchTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = u_xlat0.w * -2.00787401 + 3.25;
					        u_xlat0.x = _Metrics.y * u_xlat0.x + u_xlat1.y;
					        u_xlat0.y = vs_TEXCOORD2.x;
					        u_xlat1 = textureLod(_MainTex, u_xlat0.yx, 0.0);
					        u_xlat2.xy = vs_TEXCOORD3.zw;
					        u_xlat2.z = 1.0;
					        u_xlat3.x = 0.0;
					        while(true){
					            u_xlatb1.x = u_xlat2.y<vs_TEXCOORD4.w;
					            u_xlatb15.x = 0.828100026<u_xlat2.z;
					            u_xlatb1.x = u_xlatb15.x && u_xlatb1.x;
					            u_xlatb15.x = u_xlat3.x==0.0;
					            u_xlatb1.x = u_xlatb15.x && u_xlatb1.x;
					            if(!u_xlatb1.x){break;}
					            u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0).yxzw;
					            u_xlat2.xy = _Metrics.xy * vec2(0.0, 2.0) + u_xlat2.xy;
					            u_xlat2.z = u_xlat3.y;
					        }
					        u_xlat3.yz = u_xlat2.yz;
					        u_xlat1.xz = u_xlat3.xz * vec2(0.5, -2.0) + vec2(0.5234375, 2.03125);
					        u_xlat2 = textureLod(_SearchTex, u_xlat1.xz, 0.0);
					        u_xlat1.x = u_xlat2.w * -2.00787401 + 3.25;
					        u_xlat0.z = (-_Metrics.y) * u_xlat1.x + u_xlat3.y;
					        u_xlat1.xz = _Metrics.ww * u_xlat0.zx + (-vs_TEXCOORD1.yy);
					        u_xlat1.xz = roundEven(u_xlat1.xz);
					        u_xlat2.xy = sqrt(abs(u_xlat1.zx));
					        u_xlat16.xy = _Metrics.xy * vec2(0.0, 1.0) + u_xlat0.yz;
					        u_xlat3 = textureLod(_MainTex, u_xlat16.xy, 0.0);
					        u_xlat3.x = u_xlat1.y;
					        u_xlat8.xz = u_xlat3.xy * vec2(4.0, 4.0);
					        u_xlat8.xz = roundEven(u_xlat8.xz);
					        u_xlat8.xz = u_xlat8.xz * vec2(16.0, 16.0) + u_xlat2.xy;
					        u_xlat2.xy = u_xlat8.xz * vec2(0.00625000009, 0.0017857143) + vec2(0.00312500005, 0.000892857148);
					        u_xlat2.z = _SubsampleIndices.x * 0.142857149 + u_xlat2.y;
					        u_xlat2 = textureLod(_AreaTex, u_xlat2.xz, 0.0);
					        u_xlatb1.xy = greaterThanEqual(abs(u_xlat1.xzxx), abs(u_xlat1.zxzz)).xy;
					        u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					        u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					;
					        u_xlat7.x = (-_Params2.x) * 0.00999999978 + 1.0;
					        u_xlat15.xy = u_xlat1.xy * u_xlat7.xx;
					        u_xlat7.x = u_xlat1.y + u_xlat1.x;
					        u_xlat1.xy = u_xlat15.xy / u_xlat7.xx;
					        u_xlat0.w = vs_TEXCOORD0.x;
					        u_xlat15.xy = _Metrics.xy * vec2(1.0, 0.0) + u_xlat0.wx;
					        u_xlat3 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlat7.x = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat15.xy = u_xlat0.wz + _Metrics.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					        u_xlat15.x = (-u_xlat1.y) * u_xlat3.y + u_xlat7.x;
					        u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
					        u_xlat0 = _Metrics.xyxy * vec4(-2.0, 0.0, -2.0, 1.0) + u_xlat0.wxwz;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					        u_xlat0.x = (-u_xlat1.x) * u_xlat3.y + 1.0;
					        u_xlat3 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					        u_xlat15.y = (-u_xlat1.y) * u_xlat3.y + u_xlat0.x;
					        u_xlat15.y = clamp(u_xlat15.y, 0.0, 1.0);
					        SV_Target0.zw = u_xlat15.xy * u_xlat2.xy;
					    } else {
					        SV_Target0.zw = vec2(0.0, 0.0);
					    }
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 357845
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Metrics;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Metrics           c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c4
					    mad o2, r0.xyxy, c5.xyyx, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Metrics;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Metrics           c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c4
					    mad o2, r0.xyxy, c5.xyyx, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_UV_BASED_REPROJECTION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = _Metrics.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlendTex;
					//   sampler2D _MainTex;
					//   float4 _Metrics;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Metrics     c0       1
					//   _MainTex     s0       1
					//   _BlendTex    s1       1
					//
					
					    ps_3_0
					    def c1, 1, 9.99999975e-006, 0, -1
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v1, s1
					    texld r1, v1.zwzw, s1
					    texld r2, v0, s1
					    mov r1.x, r0.w
					    mov r1.zw, r2.xyzx
					    dp4 r0.x, r1, c1.x
					    if_lt r0.x, c1.y
					      mul r3, c1.xxzz, v0.xyxx
					      texldl oC0, r3, s0
					    else
					      max r2.y, r0.w, r1.z
					      max r0.x, r1.y, r2.x
					      add r0.x, -r2.y, r0.x
					      cmp r3.x, r0.x, c1.z, r0.w
					      cmp r3.y, r0.x, r1.y, c1.z
					      cmp r3.z, r0.x, c1.z, r1.z
					      cmp r3.w, r0.x, r2.x, c1.z
					      cmp r1.x, r0.x, r1.y, r0.w
					      cmp r1.y, r0.x, r2.x, r1.z
					      dp2add r0.x, r1, c1.x, c1.z
					      rcp r0.x, r0.x
					      mul r0.xy, r0.x, r1
					      mov r1.xw, c1
					      mul r1, r1.xxww, c0.xyxy
					      mad r1, r3, r1, v0.xyxy
					      mul r2, r1.xyxx, c1.xxzz
					      texldl r2, r2, s0
					      mul r1, r1.zwxx, c1.xxzz
					      texldl r1, r1, s0
					      mul r1, r0.y, r1
					      mad oC0, r0.x, r2, r1
					    endif
					
					// approximately 38 instruction slots used (9 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					uniform  sampler2D _BlendTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_BlendTex, vs_TEXCOORD1.xy);
					    u_xlat1 = texture(_BlendTex, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_BlendTex, vs_TEXCOORD0.xy).ywzx;
					    u_xlat2.x = u_xlat0.w;
					    u_xlat2.y = u_xlat1.y;
					    u_xlat0.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlatb0 = u_xlat0.x<9.99999975e-06;
					    if(u_xlatb0){
					        SV_Target0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    } else {
					        u_xlat0.x = max(u_xlat0.w, u_xlat2.z);
					        u_xlat3 = max(u_xlat2.w, u_xlat2.y);
					        u_xlatb0 = u_xlat3<u_xlat0.x;
					        u_xlat1.x = u_xlatb0 ? u_xlat0.w : float(0.0);
					        u_xlat1.z = u_xlatb0 ? u_xlat2.z : float(0.0);
					        u_xlat1.yw = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat2.yw;
					        u_xlat2.x = (u_xlatb0) ? u_xlat0.w : u_xlat2.y;
					        u_xlat2.y = (u_xlatb0) ? u_xlat2.z : u_xlat2.w;
					        u_xlat0.x = dot(u_xlat2.xy, vec2(1.0, 1.0));
					        u_xlat0.xy = u_xlat2.xy / u_xlat0.xx;
					        u_xlat2 = _Metrics.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					        u_xlat1 = u_xlat1 * u_xlat2 + vs_TEXCOORD0.xyxy;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					        u_xlat1 = u_xlat0.yyyy * u_xlat1;
					        SV_Target0 = u_xlat0.xxxx * u_xlat2 + u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[14];
					};
					uniform  sampler2D _BlendTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_BlendTex, vs_TEXCOORD1.xy);
					    u_xlat1 = texture(_BlendTex, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_BlendTex, vs_TEXCOORD0.xy).ywzx;
					    u_xlat2.x = u_xlat0.w;
					    u_xlat2.y = u_xlat1.y;
					    u_xlat0.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlatb0 = u_xlat0.x<9.99999975e-06;
					    if(u_xlatb0){
					        SV_Target0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    } else {
					        u_xlat0.x = max(u_xlat0.w, u_xlat2.z);
					        u_xlat3 = max(u_xlat2.w, u_xlat2.y);
					        u_xlatb0 = u_xlat3<u_xlat0.x;
					        u_xlat1.x = u_xlatb0 ? u_xlat0.w : float(0.0);
					        u_xlat1.z = u_xlatb0 ? u_xlat2.z : float(0.0);
					        u_xlat1.yw = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat2.yw;
					        u_xlat2.x = (u_xlatb0) ? u_xlat0.w : u_xlat2.y;
					        u_xlat2.y = (u_xlatb0) ? u_xlat2.z : u_xlat2.w;
					        u_xlat0.x = dot(u_xlat2.xy, vec2(1.0, 1.0));
					        u_xlat0.xy = u_xlat2.xy / u_xlat0.xx;
					        u_xlat2 = _Metrics.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					        u_xlat1 = u_xlat1 * u_xlat2 + vs_TEXCOORD0.xyxy;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					        u_xlat1 = u_xlat0.yyyy * u_xlat1;
					        SV_Target0 = u_xlat0.xxxx * u_xlat2 + u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlendTex;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _Metrics;
					//   row_major float4x4 _ReprojectionMatrix;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ReprojectionMatrix c0       4
					//   _Metrics            c4       1
					//   _MainTex            s0       1
					//   _BlendTex           s1       1
					//   _CameraDepthTexture s2       1
					//
					
					    ps_3_0
					    def c5, 5, 0, 0, 0
					    def c6, 1, 9.99999975e-006, 0, 0.5
					    def c7, 2, 0, -1, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v1, s1
					    texld r1, v1.zwzw, s1
					    texld r2, v0, s1
					    mov r1.x, r0.w
					    mov r1.zw, r2.xyzx
					    dp4 r0.x, r1, c6.x
					    if_lt r0.x, c6.y
					      mul r3, c6.xxzz, v0.xyxx
					      texldl r4, r3, s0
					      texldl r3, r3, s2
					      mad r5.xyw, v0.xyzx, c7.xxzy, c7.zzzw
					      mov r5.z, r3.x
					      dp4 r0.x, c0, r5
					      dp4 r0.y, c1, r5
					      dp4 r0.z, c3, r5
					      rcp r0.z, r0.z
					      mul r0.xy, r0.z, r0
					      mad r0.xy, r0, c6.w, c6.w
					      add r0.xy, -r0, v0
					      dp2add r0.x, r0, r0, c6.z
					      rsq r0.x, r0.x
					      rcp r0.x, r0.x
					      mul r0.x, r0.x, c5.x
					      rsq r0.x, r0.x
					      rcp oC0.w, r0.x
					      mov oC0.xyz, r4
					    else
					      max r2.y, r0.w, r1.z
					      max r0.x, r1.y, r2.x
					      add r0.x, -r2.y, r0.x
					      cmp r3.x, r0.x, c6.z, r0.w
					      cmp r3.y, r0.x, r1.y, c6.z
					      cmp r3.z, r0.x, c6.z, r1.z
					      cmp r3.w, r0.x, r2.x, c6.z
					      cmp r1.x, r0.x, r1.y, r0.w
					      cmp r1.y, r0.x, r2.x, r1.z
					      dp2add r0.x, r1, c6.x, c6.z
					      rcp r0.x, r0.x
					      mul r0.xy, r0.x, r1
					      mov r0.zw, c7
					      mul r1, r0.wwzz, c4.xyxy
					      mad r1, r3, r1, v0.xyxy
					      mul r2, r1.xyxx, c6.xxzz
					      texldl r3, r2.xyww, s0
					      mul r4, r1.zwxx, c6.xxzz
					      texldl r5, r4.xyww, s0
					      mul r5.xyz, r0.y, r5
					      mad oC0.xyz, r0.x, r3, r5
					      texldl r2, r2, s2
					      mad r3, r1, c7.x, c7.z
					      mad r5.xyw, r3.xyzx, c6.xxzz, c6.zzzx
					      mov r5.z, r2.x
					      dp4 r2.x, c0, r5
					      dp4 r2.y, c1, r5
					      dp4 r0.z, c3, r5
					      rcp r0.z, r0.z
					      mul r0.zw, r0.z, r2.xyxy
					      mad r0.zw, r0, c6.w, c6.w
					      add r0.zw, -r0, r1.xyxy
					      texldl r2, r4, s2
					      mad r3.xyw, r3.zwzx, c6.xxzz, c6.zzzx
					      mov r3.z, r2.x
					      dp4 r1.x, c0, r3
					      dp4 r1.y, c1, r3
					      dp4 r2.x, c3, r3
					      rcp r2.x, r2.x
					      mul r1.xy, r1, r2.x
					      mad r1.xy, r1, c6.w, c6.w
					      add r1.xy, -r1, r1.zwzw
					      mul r1.xy, r0.y, r1
					      mad r0.xy, r0.x, r0.zwzw, r1
					      dp2add r0.x, r0, r0, c6.z
					      rsq r0.x, r0.x
					      rcp r0.x, r0.x
					      mul r0.x, r0.x, c5.x
					      rsq r0.x, r0.x
					      rcp oC0.w, r0.x
					    endif
					
					// approximately 89 instruction slots used (15 texture, 74 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[3];
						mat4x4 _ReprojectionMatrix;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _BlendTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_BlendTex, vs_TEXCOORD1.xy);
					    u_xlat1 = texture(_BlendTex, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_BlendTex, vs_TEXCOORD0.xy).ywzx;
					    u_xlat2.x = u_xlat0.w;
					    u_xlat2.y = u_xlat1.y;
					    u_xlat0.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlatb0 = u_xlat0.x<9.99999975e-06;
					    if(u_xlatb0){
					        u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat3 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					        u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					        u_xlat7.xyz = u_xlat0.yyy * _ReprojectionMatrix[1].xyw;
					        u_xlat0.xyz = _ReprojectionMatrix[0].xyw * u_xlat0.xxx + u_xlat7.xyz;
					        u_xlat0.xyz = _ReprojectionMatrix[2].xyw * u_xlat3.xxx + u_xlat0.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + _ReprojectionMatrix[3].xyw;
					        u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					        u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					        u_xlat0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					        u_xlat0.x = sqrt(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * 5.0;
					        SV_Target0.w = sqrt(u_xlat0.x);
					        SV_Target0.xyz = u_xlat1.xyz;
					    } else {
					        u_xlat0.x = max(u_xlat0.w, u_xlat2.z);
					        u_xlat4 = max(u_xlat2.w, u_xlat2.y);
					        u_xlatb0 = u_xlat4<u_xlat0.x;
					        u_xlat1.x = u_xlatb0 ? u_xlat0.w : float(0.0);
					        u_xlat1.z = u_xlatb0 ? u_xlat2.z : float(0.0);
					        u_xlat1.yw = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat2.yw;
					        u_xlat2.x = (u_xlatb0) ? u_xlat0.w : u_xlat2.y;
					        u_xlat2.y = (u_xlatb0) ? u_xlat2.z : u_xlat2.w;
					        u_xlat0.x = dot(u_xlat2.xy, vec2(1.0, 1.0));
					        u_xlat0.xy = u_xlat2.xy / u_xlat0.xx;
					        u_xlat2 = _Metrics.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					        u_xlat1 = u_xlat1 * u_xlat2 + vs_TEXCOORD0.xyxy;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat3 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					        u_xlat3.xyz = u_xlat0.yyy * u_xlat3.xyz;
					        SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					        u_xlat3 = u_xlat1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					        u_xlat6.xyz = u_xlat3.yyy * _ReprojectionMatrix[1].xyw;
					        u_xlat6.xyz = _ReprojectionMatrix[0].xyw * u_xlat3.xxx + u_xlat6.xyz;
					        u_xlat2.xyz = _ReprojectionMatrix[2].xyw * u_xlat2.xxx + u_xlat6.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + _ReprojectionMatrix[3].xyw;
					        u_xlat8.xy = u_xlat2.xy / u_xlat2.zz;
					        u_xlat8.xy = u_xlat8.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					        u_xlat8.xy = (-u_xlat8.xy) + u_xlat1.xy;
					        u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.zw, 0.0);
					        u_xlat6.xyz = u_xlat3.www * _ReprojectionMatrix[1].xyw;
					        u_xlat6.xyz = _ReprojectionMatrix[0].xyw * u_xlat3.zzz + u_xlat6.xyz;
					        u_xlat2.xyz = _ReprojectionMatrix[2].xyw * u_xlat2.xxx + u_xlat6.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + _ReprojectionMatrix[3].xyw;
					        u_xlat1.xy = u_xlat2.xy / u_xlat2.zz;
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					        u_xlat1.xy = (-u_xlat1.xy) + u_xlat1.zw;
					        u_xlat1.xy = u_xlat0.yy * u_xlat1.xy;
					        u_xlat0.xy = u_xlat0.xx * u_xlat8.xy + u_xlat1.xy;
					        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					        u_xlat0.x = sqrt(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * 5.0;
					        SV_Target0.w = sqrt(u_xlat0.x);
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_UV_BASED_REPROJECTION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[3];
						mat4x4 _ReprojectionMatrix;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _BlendTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_BlendTex, vs_TEXCOORD1.xy);
					    u_xlat1 = texture(_BlendTex, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_BlendTex, vs_TEXCOORD0.xy).ywzx;
					    u_xlat2.x = u_xlat0.w;
					    u_xlat2.y = u_xlat1.y;
					    u_xlat0.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlatb0 = u_xlat0.x<9.99999975e-06;
					    if(u_xlatb0){
					        u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat3 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					        u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					        u_xlat7.xyz = u_xlat0.yyy * _ReprojectionMatrix[1].xyw;
					        u_xlat0.xyz = _ReprojectionMatrix[0].xyw * u_xlat0.xxx + u_xlat7.xyz;
					        u_xlat0.xyz = _ReprojectionMatrix[2].xyw * u_xlat3.xxx + u_xlat0.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + _ReprojectionMatrix[3].xyw;
					        u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					        u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					        u_xlat0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					        u_xlat0.x = sqrt(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * 5.0;
					        SV_Target0.w = sqrt(u_xlat0.x);
					        SV_Target0.xyz = u_xlat1.xyz;
					    } else {
					        u_xlat0.x = max(u_xlat0.w, u_xlat2.z);
					        u_xlat4 = max(u_xlat2.w, u_xlat2.y);
					        u_xlatb0 = u_xlat4<u_xlat0.x;
					        u_xlat1.x = u_xlatb0 ? u_xlat0.w : float(0.0);
					        u_xlat1.z = u_xlatb0 ? u_xlat2.z : float(0.0);
					        u_xlat1.yw = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat2.yw;
					        u_xlat2.x = (u_xlatb0) ? u_xlat0.w : u_xlat2.y;
					        u_xlat2.y = (u_xlatb0) ? u_xlat2.z : u_xlat2.w;
					        u_xlat0.x = dot(u_xlat2.xy, vec2(1.0, 1.0));
					        u_xlat0.xy = u_xlat2.xy / u_xlat0.xx;
					        u_xlat2 = _Metrics.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					        u_xlat1 = u_xlat1 * u_xlat2 + vs_TEXCOORD0.xyxy;
					        u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					        u_xlat3 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					        u_xlat3.xyz = u_xlat0.yyy * u_xlat3.xyz;
					        SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					        u_xlat3 = u_xlat1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					        u_xlat6.xyz = u_xlat3.yyy * _ReprojectionMatrix[1].xyw;
					        u_xlat6.xyz = _ReprojectionMatrix[0].xyw * u_xlat3.xxx + u_xlat6.xyz;
					        u_xlat2.xyz = _ReprojectionMatrix[2].xyw * u_xlat2.xxx + u_xlat6.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + _ReprojectionMatrix[3].xyw;
					        u_xlat8.xy = u_xlat2.xy / u_xlat2.zz;
					        u_xlat8.xy = u_xlat8.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					        u_xlat8.xy = (-u_xlat8.xy) + u_xlat1.xy;
					        u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.zw, 0.0);
					        u_xlat6.xyz = u_xlat3.www * _ReprojectionMatrix[1].xyw;
					        u_xlat6.xyz = _ReprojectionMatrix[0].xyw * u_xlat3.zzz + u_xlat6.xyz;
					        u_xlat2.xyz = _ReprojectionMatrix[2].xyw * u_xlat2.xxx + u_xlat6.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + _ReprojectionMatrix[3].xyw;
					        u_xlat1.xy = u_xlat2.xy / u_xlat2.zz;
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					        u_xlat1.xy = (-u_xlat1.xy) + u_xlat1.zw;
					        u_xlat1.xy = u_xlat0.yy * u_xlat1.xy;
					        u_xlat0.xy = u_xlat0.xx * u_xlat8.xy + u_xlat1.xy;
					        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					        u_xlat0.x = sqrt(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * 5.0;
					        SV_Target0.w = sqrt(u_xlat0.x);
					    }
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 440591
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_UV_BASED_REPROJECTION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _AccumulationTex;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _MainTex         s0       1
					//   _AccumulationTex s1       1
					//
					
					    ps_3_0
					    def c0, 0.5, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    texld r1, v0, s0
					    add r0, r0, -r1
					    mad oC0, r0, c0.x, r1
					
					// approximately 4 instruction slots used (2 texture, 2 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AccumulationTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_AccumulationTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 + (-u_xlat1);
					    SV_Target0 = u_xlat0 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AccumulationTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_AccumulationTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 + (-u_xlat1);
					    SV_Target0 = u_xlat0 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _AccumulationTex;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _Metrics;
					//   row_major float4x4 _ReprojectionMatrix;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ReprojectionMatrix c0       4
					//   _Metrics            c4       1
					//   _MainTex            s0       1
					//   _AccumulationTex    s1       1
					//   _CameraDepthTexture s2       1
					//
					
					    ps_3_0
					    def c5, 0.5, 0.200000003, 30, 1
					    def c6, 1, 0, 2, -1
					    def c7, 0.5, 0.25, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul r0, c6.xxyy, v0.xyxx
					    texldl r0, r0, s2
					    mov r0.z, r0.x
					    mad r0.xyw, v0.xyzx, c6.zzzy, c6.wwzx
					    dp4 r1.x, c3, r0
					    rcp r1.x, r1.x
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    mul r0.xy, r1.x, r2
					    mad r0.xy, r0, c5.x, c5.x
					    texld r0, r0, s1
					    add r1.xy, c4, v0
					    texld r1, r1, s0
					    mov r2.xw, c6
					    mad r2, c4.xyxy, r2.xwwx, v0.xyxy
					    texld r3, r2.zwzw, s0
					    texld r2, r2, s0
					    min r4, r1, r3
					    max r5, r3, r1
					    max r1, r2, r5
					    min r3, r4, r2
					    add r2.xy, -c4, v0
					    texld r2, r2, s0
					    min r4, r3, r2
					    max r3, r2, r1
					    max r1, r0, r4
					    mul r0.x, r0.w, r0.w
					    min r2, r3, r1
					    texld r1, v0, s0
					    mad r0.x, r1.w, r1.w, -r0.x
					    mul r0.x, r0_abs.x, c5.y
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mad r0.x, r0.x, -c5.z, c5.w
					    max r3.x, r0.x, c6.y
					    mul r0.xy, r3.x, c7
					    lrp r3, r0.y, r2, r1
					    add r1, r2, -r3
					    mad oC0, r0.x, r1, r3
					
					// approximately 40 instruction slots used (8 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_UV_BASED_REPROJECTION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[3];
						mat4x4 _ReprojectionMatrix;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AccumulationTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat5.xyz = u_xlat0.yyy * _ReprojectionMatrix[1].xyw;
					    u_xlat0.xyz = _ReprojectionMatrix[0].xyw * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat1 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.xyz = _ReprojectionMatrix[2].xyw * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ReprojectionMatrix[3].xyw;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat0 = texture(_AccumulationTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Metrics.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Metrics.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4 = min(u_xlat1, u_xlat3);
					    u_xlat1 = max(u_xlat1, u_xlat3);
					    u_xlat1 = max(u_xlat1, u_xlat2);
					    u_xlat2 = min(u_xlat2, u_xlat4);
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_Metrics.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat2 = min(u_xlat2, u_xlat3);
					    u_xlat1 = max(u_xlat1, u_xlat3);
					    u_xlat2 = max(u_xlat0, u_xlat2);
					    u_xlat0.x = u_xlat0.w * u_xlat0.w;
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat1 + (-u_xlat2);
					    u_xlat0.x = u_xlat2.w * u_xlat2.w + (-u_xlat0.x);
					    u_xlat0.x = abs(u_xlat0.x) * 0.200000003;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 30.0 + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.xy = u_xlat0.xx * vec2(0.5, 0.25);
					    u_xlat2 = u_xlat0.yyyy * u_xlat3 + u_xlat2;
					    u_xlat1 = u_xlat1 + (-u_xlat2);
					    SV_Target0 = u_xlat0.xxxx * u_xlat1 + u_xlat2;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_UV_BASED_REPROJECTION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _Metrics;
						vec4 unused_0_2[3];
						mat4x4 _ReprojectionMatrix;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _AccumulationTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat5.xyz = u_xlat0.yyy * _ReprojectionMatrix[1].xyw;
					    u_xlat0.xyz = _ReprojectionMatrix[0].xyw * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat1 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.xyz = _ReprojectionMatrix[2].xyw * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ReprojectionMatrix[3].xyw;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat0 = texture(_AccumulationTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Metrics.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Metrics.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4 = min(u_xlat1, u_xlat3);
					    u_xlat1 = max(u_xlat1, u_xlat3);
					    u_xlat1 = max(u_xlat1, u_xlat2);
					    u_xlat2 = min(u_xlat2, u_xlat4);
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_Metrics.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.xy);
					    u_xlat2 = min(u_xlat2, u_xlat3);
					    u_xlat1 = max(u_xlat1, u_xlat3);
					    u_xlat2 = max(u_xlat0, u_xlat2);
					    u_xlat0.x = u_xlat0.w * u_xlat0.w;
					    u_xlat1 = min(u_xlat1, u_xlat2);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat1 + (-u_xlat2);
					    u_xlat0.x = u_xlat2.w * u_xlat2.w + (-u_xlat0.x);
					    u_xlat0.x = abs(u_xlat0.x) * 0.200000003;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) * 30.0 + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.xy = u_xlat0.xx * vec2(0.5, 0.25);
					    u_xlat2 = u_xlat0.yyyy * u_xlat3 + u_xlat2;
					    u_xlat1 = u_xlat1 + (-u_xlat2);
					    SV_Target0 = u_xlat0.xxxx * u_xlat1 + u_xlat2;
					    return;
					}"
}
}
 }
}
Fallback Off
}