Shader "Custom/SteamVR_SphericalProjection" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
 _N ("N (normal of plane)", Vector) = (0.000000,0.000000,0.000000,0.000000)
 _Phi0 ("Phi0", Float) = 0.000000
 _Phi1 ("Phi1", Float) = 1.000000
 _Theta0 ("Theta0", Float) = 0.000000
 _Theta1 ("Theta1", Float) = 1.000000
 _UAxis ("uAxis", Vector) = (0.000000,0.000000,0.000000,0.000000)
 _VAxis ("vAxis", Vector) = (0.000000,0.000000,0.000000,0.000000)
 _UOrigin ("uOrigin", Vector) = (0.000000,0.000000,0.000000,0.000000)
 _VOrigin ("vOrigin", Vector) = (0.000000,0.000000,0.000000,0.000000)
 _UScale ("uScale", Float) = 1.000000
 _VScale ("vScale", Float) = 1.000000
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 38139
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Phi0;
					//   float _Phi1;
					//   float _Theta0;
					//   float _Theta1;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Phi0              c4       1
					//   _Phi1              c5       1
					//   _Theta0            c6       1
					//   _Theta1            c7       1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c4.x
					    add r0.x, -r0.x, c5.x
					    mad o1.x, v1.x, r0.x, c4.x
					    mov r0.x, c6.x
					    add r0.x, -r0.x, c7.x
					    mad o1.y, v1.y, r0.x, c6.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						float _Phi0;
						float _Phi1;
						float _Theta0;
						float _Theta1;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = (-vec2(_Phi0, _Theta0)) + vec2(_Phi1, _Theta1);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * u_xlat0.xy + vec2(_Phi0, _Theta0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						float _Phi0;
						float _Phi1;
						float _Theta0;
						float _Theta1;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlat0.xy = (-vec2(_Phi0, _Theta0)) + vec2(_Phi1, _Theta1);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * u_xlat0.xy + vec2(_Phi0, _Theta0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						float _Phi0;
						float _Phi1;
						float _Theta0;
						float _Theta1;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = (-vec2(_Phi0, _Theta0)) + vec2(_Phi1, _Theta1);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * u_xlat0.xy + vec2(_Phi0, _Theta0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _N;
					//   float4 _UAxis;
					//   float4 _UOrigin;
					//   float _UScale;
					//   float4 _VAxis;
					//   float4 _VOrigin;
					//   float _VScale;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _N           c0       1
					//   _UAxis       c1       1
					//   _VAxis       c2       1
					//   _UOrigin     c3       1
					//   _VOrigin     c4       1
					//   _UScale      c5       1
					//   _VScale      c6       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c7, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mad r0.xy, v0.yxzw, c7.x, c7.y
					    frc r0.xy, r0
					    mad r0.xy, r0, c7.z, c7.w
					    sincos r1.xy, r0.y
					    sincos r2.xy, r0.x
					    mul r0.xz, r1.yyxw, r2.y
					    mov r0.y, r2.x
					    dp3 r0.w, r0, c0
					    rcp r0.w, r0.w
					    mad r1.xyz, r0, r0.w, -c3
					    mad r0.xyz, r0, r0.w, -c4
					    dp3 r0.x, r0, c2
					    mul r0.y, r0.x, c6.x
					    dp3 r0.z, r1, c1
					    mul r0.x, r0.z, c5.x
					    texld oC0, r0, s0
					
					// approximately 30 instruction slots used (1 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _N;
						vec4 unused_0_2;
						vec4 _UAxis;
						vec4 _VAxis;
						vec4 _UOrigin;
						vec4 _VOrigin;
						float _UScale;
						float _VScale;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = sin(vs_TEXCOORD0.yx);
					    u_xlat1.xy = cos(vs_TEXCOORD0.yx);
					    u_xlat2.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.z = u_xlat0.x * u_xlat1.y;
					    u_xlat2.y = u_xlat1.x;
					    u_xlat0.x = dot(u_xlat2.xyz, _N.xyz);
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz + (-_UOrigin.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + (-_VOrigin.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _VAxis.xyz);
					    u_xlat0.y = u_xlat0.x * _VScale;
					    u_xlat6 = dot(u_xlat1.xyz, _UAxis.xyz);
					    u_xlat0.x = u_xlat6 * _UScale;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _N;
						vec4 unused_0_2;
						vec4 _UAxis;
						vec4 _VAxis;
						vec4 _UOrigin;
						vec4 _VOrigin;
						float _UScale;
						float _VScale;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = sin(vs_TEXCOORD0.yx);
					    u_xlat1.xy = cos(vs_TEXCOORD0.yx);
					    u_xlat2.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.z = u_xlat0.x * u_xlat1.y;
					    u_xlat2.y = u_xlat1.x;
					    u_xlat0.x = dot(u_xlat2.xyz, _N.xyz);
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz + (-_UOrigin.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + (-_VOrigin.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _VAxis.xyz);
					    u_xlat0.y = u_xlat0.x * _VScale;
					    u_xlat6 = dot(u_xlat1.xyz, _UAxis.xyz);
					    u_xlat0.x = u_xlat6 * _UScale;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _N;
						vec4 unused_0_2;
						vec4 _UAxis;
						vec4 _VAxis;
						vec4 _UOrigin;
						vec4 _VOrigin;
						float _UScale;
						float _VScale;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = sin(vs_TEXCOORD0.yx);
					    u_xlat1.xy = cos(vs_TEXCOORD0.yx);
					    u_xlat2.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.z = u_xlat0.x * u_xlat1.y;
					    u_xlat2.y = u_xlat1.x;
					    u_xlat0.x = dot(u_xlat2.xyz, _N.xyz);
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz + (-_UOrigin.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + (-_VOrigin.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _VAxis.xyz);
					    u_xlat0.y = u_xlat0.x * _VScale;
					    u_xlat6 = dot(u_xlat1.xyz, _UAxis.xyz);
					    u_xlat0.x = u_xlat6 * _UScale;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
}
 }
}
}