Shader "Hidden/Fast Approximate Anti-aliasing" {
Properties {
 _MainTex ("Texture", 2D) = "white" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 59301
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float3 _QualitySettings;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _QualitySettings   c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.0833333358, 0.5, -2, 3
					    def c3, 0.25, 1.5, 4, 8
					    def c4, 1, 0, -1, -2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0, c4.xxyy, v0.xyxx
					    texldl r0, r0, s0
					    mov r1.xyz, c4
					    mad r2.xyz, c0.yxyw, r1.xxyw, v0.yxyw
					    mul r3.xzw, c4.xyyy, v0.x
					    mov r3.y, r2.x
					    texldl r3, r3, s0
					    mul r2, r2.yzyy, c4.xxyy
					    texldl r2, r2, s0
					    mad r2.xzw, c0.yyxy, r1.zyzy, v0.yyxy
					    mul r4.xzw, c4.xyyy, v0.x
					    mov r4.y, r2.x
					    texldl r4, r4, s0
					    mul r5, r2.zwzz, c4.xxyy
					    texldl r5, r5, s0
					    max r1.w, r3.y, r0.y
					    min r2.x, r0.y, r3.y
					    max r3.x, r2.y, r1.w
					    min r1.w, r2.x, r2.y
					    max r2.x, r4.y, r5.y
					    min r2.z, r5.y, r4.y
					    max r4.x, r2.x, r3.x
					    min r3.x, r1.w, r2.z
					    mul r1.w, r4.x, c1.y
					    add r2.x, -r3.x, r4.x
					    max r2.z, c1.z, r1.w
					    if_lt r2.x, r2.z
					      mov_pp oC0, r0
					    else
					      add r6.xy, -c0, v0
					      mov r6.zw, c4.y
					      texldl r6, r6, s0
					      add r7.xy, c0, v0
					      mov r7.zw, c4.y
					      texldl r7, r7, s0
					      mad r8, c0.xyxy, r1.xzzx, v0.xyxy
					      mul r9, r8.xyxx, c4.xxyy
					      texldl r9, r9, s0
					      mul r8, r8.zwxx, c4.xxyy
					      texldl r8, r8, s0
					      add r0.x, r3.y, r4.y
					      add r0.z, r2.y, r5.y
					      rcp r0.w, r2.x
					      add r1.x, r0.z, r0.x
					      mad r0.x, r0.y, c4.w, r0.x
					      mad r0.z, r0.y, c4.w, r0.z
					      add r1.z, r7.y, r9.y
					      add r1.w, r6.y, r9.y
					      mad r2.x, r2.y, c4.w, r1.z
					      mad r1.w, r4.y, c4.w, r1.w
					      add r2.z, r6.y, r8.y
					      add r2.w, r7.y, r8.y
					      mad r0.x, r0_abs.x, -c4.w, r2_abs.x
					      mad r0.z, r0_abs.z, -c4.w, r1_abs.w
					      mad r1.w, r5.y, c4.w, r2.z
					      mad r2.x, r3.y, c4.w, r2.w
					      add r0.x, r0.x, r1_abs.w
					      add r0.z, r0.z, r2_abs.x
					      add r1.z, r1.z, r2.z
					      add r0.x, -r0.z, r0.x
					      mad r0.z, r1.x, -c4.w, r1.z
					      cmp r1.x, r0.x, r4.y, r5.y
					      cmp r1.z, r0.x, r3.y, r2.y
					      cmp r1.w, r0.x, c0.y, c0.x
					      mad r0.z, r0.z, c2.x, -r0.y
					      add r2.xy, -r0.y, r1.xzzw
					      add r1.xz, r0.y, r1
					      add r2.z, -r2_abs.y, r2_abs.x
					      max r3.x, r2_abs.x, r2_abs.y
					      cmp r1.w, r2.z, -r1.w, r1.w
					      mul_sat r0.z, r0.w, r0_abs.z
					      cmp r0.w, r0.x, c0.x, r1.y
					      cmp r1.y, r0.x, r1.y, c0.y
					      mad r2.xy, r1.w, c2.y, v0
					      cmp r2.x, r0.x, v0.x, r2.x
					      cmp r2.y, r0.x, r2.y, v0.y
					      add r4.x, -r0.w, r2.x
					      add r4.y, -r1.y, r2.y
					      add r5.x, r0.w, r2.x
					      add r5.y, r1.y, r2.y
					      mad r2.x, r0.z, c2.z, c2.w
					      mov r4.zw, c4.y
					      texldl r6, r4, s0
					      mul r0.z, r0.z, r0.z
					      mov r5.zw, c4.y
					      texldl r7, r5, s0
					      cmp r1.x, r2.z, r1.x, r1.z
					      mul r1.z, r3.x, c3.x
					      mad r2.y, r1.x, -c2.y, r0.y
					      mul r0.z, r0.z, r2.x
					      mad r2.x, r1.x, -c2.y, r6.y
					      mad r2.z, r1.x, -c2.y, r7.y
					      mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					      add r2.w, -r0.w, r4.x
					      cmp r6.x, r3.y, r4.x, r2.w
					      add r2.w, -r1.y, r4.y
					      cmp r6.y, r3.y, r4.y, r2.w
					      cmp r4.xy, r3.yzzw, c4.y, c4.x
					      add r2.w, r4.y, r4.x
					      add r3.w, r0.w, r5.x
					      cmp r4.x, r3.z, r5.x, r3.w
					      add r3.w, r1.y, r5.y
					      cmp r4.y, r3.z, r5.y, r3.w
					      if_lt -r2.w, c4.y
					        if_ge r2_abs.x, r1.z
					        else
					          mov r6.zw, c4.y
					          texldl r5, r6, s0
					          mov r2.x, r5.y
					        endif
					        if_ge r2_abs.z, r1.z
					        else
					          mov r4.zw, c4.y
					          texldl r5, r4, s0
					          mov r2.z, r5.y
					        endif
					        mad r2.w, r1.x, -c2.y, r2.x
					        cmp r2.x, r3.y, r2.x, r2.w
					        mad r2.w, r1.x, -c2.y, r2.z
					        cmp r2.z, r3.z, r2.z, r2.w
					        mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					        add r2.w, -r0.w, r6.x
					        cmp r6.x, r3.y, r6.x, r2.w
					        add r2.w, -r1.y, r6.y
					        cmp r6.y, r3.y, r6.y, r2.w
					        cmp r5.xy, r3.yzzw, c4.y, c4.x
					        add r2.w, r5.y, r5.x
					        add r3.w, r0.w, r4.x
					        cmp r4.x, r3.z, r4.x, r3.w
					        add r3.w, r1.y, r4.y
					        cmp r4.y, r3.z, r4.y, r3.w
					        if_lt -r2.w, c4.y
					          if_ge r2_abs.x, r1.z
					          else
					            mov r6.zw, c4.y
					            texldl r5, r6, s0
					            mov r2.x, r5.y
					          endif
					          if_ge r2_abs.z, r1.z
					          else
					            mov r4.zw, c4.y
					            texldl r5, r4, s0
					            mov r2.z, r5.y
					          endif
					          mad r2.w, r1.x, -c2.y, r2.x
					          cmp r2.x, r3.y, r2.x, r2.w
					          mad r2.w, r1.x, -c2.y, r2.z
					          cmp r2.z, r3.z, r2.z, r2.w
					          mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					          add r2.w, -r0.w, r6.x
					          cmp r6.x, r3.y, r6.x, r2.w
					          add r2.w, -r1.y, r6.y
					          cmp r6.y, r3.y, r6.y, r2.w
					          cmp r5.xy, r3.yzzw, c4.y, c4.x
					          add r2.w, r5.y, r5.x
					          add r3.w, r0.w, r4.x
					          cmp r4.x, r3.z, r4.x, r3.w
					          add r3.w, r1.y, r4.y
					          cmp r4.y, r3.z, r4.y, r3.w
					          if_lt -r2.w, c4.y
					            if_ge r2_abs.x, r1.z
					            else
					              mov r6.zw, c4.y
					              texldl r5, r6, s0
					              mov r2.x, r5.y
					            endif
					            if_ge r2_abs.z, r1.z
					            else
					              mov r4.zw, c4.y
					              texldl r5, r4, s0
					              mov r2.z, r5.y
					            endif
					            mad r2.w, r1.x, -c2.y, r2.x
					            cmp r2.x, r3.y, r2.x, r2.w
					            mad r2.w, r1.x, -c2.y, r2.z
					            cmp r2.z, r3.z, r2.z, r2.w
					            mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					            add r2.w, -r0.w, r6.x
					            cmp r6.x, r3.y, r6.x, r2.w
					            add r2.w, -r1.y, r6.y
					            cmp r6.y, r3.y, r6.y, r2.w
					            cmp r5.xy, r3.yzzw, c4.y, c4.x
					            add r2.w, r5.y, r5.x
					            add r3.w, r0.w, r4.x
					            cmp r4.x, r3.z, r4.x, r3.w
					            add r3.w, r1.y, r4.y
					            cmp r4.y, r3.z, r4.y, r3.w
					            if_lt -r2.w, c4.y
					              if_ge r2_abs.x, r1.z
					              else
					                mov r6.zw, c4.y
					                texldl r5, r6, s0
					                mov r2.x, r5.y
					              endif
					              if_ge r2_abs.z, r1.z
					              else
					                mov r4.zw, c4.y
					                texldl r5, r4, s0
					                mov r2.z, r5.y
					              endif
					              mad r2.w, r1.x, -c2.y, r2.x
					              cmp r2.x, r3.y, r2.x, r2.w
					              mad r2.w, r1.x, -c2.y, r2.z
					              cmp r2.z, r3.z, r2.z, r2.w
					              mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					              mad r2.w, r0.w, -c3.y, r6.x
					              cmp r6.x, r3.y, r6.x, r2.w
					              mad r2.w, r1.y, -c3.y, r6.y
					              cmp r6.y, r3.y, r6.y, r2.w
					              cmp r5.xy, r3.yzzw, c4.y, c4.x
					              add r2.w, r5.y, r5.x
					              mad r3.w, r0.w, c3.y, r4.x
					              cmp r4.x, r3.z, r4.x, r3.w
					              mad r3.w, r1.y, c3.y, r4.y
					              cmp r4.y, r3.z, r4.y, r3.w
					              if_lt -r2.w, c4.y
					                if_ge r2_abs.x, r1.z
					                else
					                  mov r6.zw, c4.y
					                  texldl r5, r6, s0
					                  mov r2.x, r5.y
					                endif
					                if_ge r2_abs.z, r1.z
					                else
					                  mov r4.zw, c4.y
					                  texldl r5, r4, s0
					                  mov r2.z, r5.y
					                endif
					                mad r2.w, r1.x, -c2.y, r2.x
					                cmp r2.x, r3.y, r2.x, r2.w
					                mad r2.w, r1.x, -c2.y, r2.z
					                cmp r2.z, r3.z, r2.z, r2.w
					                mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					                mad r2.w, r0.w, c4.w, r6.x
					                cmp r6.x, r3.y, r6.x, r2.w
					                mad r2.w, r1.y, c4.w, r6.y
					                cmp r6.y, r3.y, r6.y, r2.w
					                cmp r5.xy, r3.yzzw, c4.y, c4.x
					                add r2.w, r5.y, r5.x
					                mad r3.w, r0.w, -c4.w, r4.x
					                cmp r4.x, r3.z, r4.x, r3.w
					                mad r3.w, r1.y, -c4.w, r4.y
					                cmp r4.y, r3.z, r4.y, r3.w
					                if_lt -r2.w, c4.y
					                  if_ge r2_abs.x, r1.z
					                  else
					                    mov r6.zw, c4.y
					                    texldl r5, r6, s0
					                    mov r2.x, r5.y
					                  endif
					                  if_ge r2_abs.z, r1.z
					                  else
					                    mov r4.zw, c4.y
					                    texldl r5, r4, s0
					                    mov r2.z, r5.y
					                  endif
					                  mad r2.w, r1.x, -c2.y, r2.x
					                  cmp r2.x, r3.y, r2.x, r2.w
					                  mad r2.w, r1.x, -c2.y, r2.z
					                  cmp r2.z, r3.z, r2.z, r2.w
					                  mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					                  mad r2.w, r0.w, c4.w, r6.x
					                  cmp r6.x, r3.y, r6.x, r2.w
					                  mad r2.w, r1.y, c4.w, r6.y
					                  cmp r6.y, r3.y, r6.y, r2.w
					                  cmp r5.xy, r3.yzzw, c4.y, c4.x
					                  add r2.w, r5.y, r5.x
					                  mad r3.w, r0.w, -c4.w, r4.x
					                  cmp r4.x, r3.z, r4.x, r3.w
					                  mad r3.w, r1.y, -c4.w, r4.y
					                  cmp r4.y, r3.z, r4.y, r3.w
					                  if_lt -r2.w, c4.y
					                    if_ge r2_abs.x, r1.z
					                    else
					                      mov r6.zw, c4.y
					                      texldl r5, r6, s0
					                      mov r2.x, r5.y
					                    endif
					                    if_ge r2_abs.z, r1.z
					                    else
					                      mov r4.zw, c4.y
					                      texldl r5, r4, s0
					                      mov r2.z, r5.y
					                    endif
					                    mad r2.w, r1.x, -c2.y, r2.x
					                    cmp r2.x, r3.y, r2.x, r2.w
					                    mad r2.w, r1.x, -c2.y, r2.z
					                    cmp r2.z, r3.z, r2.z, r2.w
					                    mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					                    mad r2.w, r0.w, c4.w, r6.x
					                    cmp r6.x, r3.y, r6.x, r2.w
					                    mad r2.w, r1.y, c4.w, r6.y
					                    cmp r6.y, r3.y, r6.y, r2.w
					                    cmp r5.xy, r3.yzzw, c4.y, c4.x
					                    add r2.w, r5.y, r5.x
					                    mad r3.w, r0.w, -c4.w, r4.x
					                    cmp r4.x, r3.z, r4.x, r3.w
					                    mad r3.w, r1.y, -c4.w, r4.y
					                    cmp r4.y, r3.z, r4.y, r3.w
					                    if_lt -r2.w, c4.y
					                      if_ge r2_abs.x, r1.z
					                      else
					                        mov r6.zw, c4.y
					                        texldl r5, r6, s0
					                        mov r2.x, r5.y
					                      endif
					                      if_ge r2_abs.z, r1.z
					                      else
					                        mov r4.zw, c4.y
					                        texldl r5, r4, s0
					                        mov r2.z, r5.y
					                      endif
					                      mad r2.w, r1.x, -c2.y, r2.x
					                      cmp r2.x, r3.y, r2.x, r2.w
					                      mad r2.w, r1.x, -c2.y, r2.z
					                      cmp r2.z, r3.z, r2.z, r2.w
					                      mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					                      mad r2.w, r0.w, c4.w, r6.x
					                      cmp r6.x, r3.y, r6.x, r2.w
					                      mad r2.w, r1.y, c4.w, r6.y
					                      cmp r6.y, r3.y, r6.y, r2.w
					                      cmp r5.xy, r3.yzzw, c4.y, c4.x
					                      add r2.w, r5.y, r5.x
					                      mad r3.w, r0.w, -c4.w, r4.x
					                      cmp r4.x, r3.z, r4.x, r3.w
					                      mad r3.w, r1.y, -c4.w, r4.y
					                      cmp r4.y, r3.z, r4.y, r3.w
					                      if_lt -r2.w, c4.y
					                        if_ge r2_abs.x, r1.z
					                        else
					                          mov r6.zw, c4.y
					                          texldl r5, r6, s0
					                          mov r2.x, r5.y
					                        endif
					                        if_ge r2_abs.z, r1.z
					                        else
					                          mov r4.zw, c4.y
					                          texldl r5, r4, s0
					                          mov r2.z, r5.y
					                        endif
					                        mad r2.w, r1.x, -c2.y, r2.x
					                        cmp r2.x, r3.y, r2.x, r2.w
					                        mad r2.w, r1.x, -c2.y, r2.z
					                        cmp r2.z, r3.z, r2.z, r2.w
					                        mad r3.yz, r3.x, -c3.x, r2_abs.xxzw
					                        mad r2.w, r0.w, -c3.z, r6.x
					                        cmp r6.x, r3.y, r6.x, r2.w
					                        mad r2.w, r1.y, -c3.z, r6.y
					                        cmp r6.y, r3.y, r6.y, r2.w
					                        cmp r5.xy, r3.yzzw, c4.y, c4.x
					                        add r2.w, r5.y, r5.x
					                        mad r3.w, r0.w, c3.z, r4.x
					                        cmp r4.x, r3.z, r4.x, r3.w
					                        mad r3.w, r1.y, c3.z, r4.y
					                        cmp r4.y, r3.z, r4.y, r3.w
					                        if_lt -r2.w, c4.y
					                          if_ge r2_abs.x, r1.z
					                          else
					                            mov r6.zw, c4.y
					                            texldl r5, r6, s0
					                            mov r2.x, r5.y
					                          endif
					                          if_ge r2_abs.z, r1.z
					                          else
					                            mov r4.zw, c4.y
					                            texldl r5, r4, s0
					                            mov r2.z, r5.y
					                          endif
					                          mad r1.z, r1.x, -c2.y, r2.x
					                          mad r1.x, r1.x, -c2.y, r2.z
					                          cmp r2.xz, r3.yyzw, r2, r1.zyxw
					                          mad r1.xz, r3.x, -c3.x, r2_abs
					                          mad r2.w, r0.w, -c3.w, r6.x
					                          cmp r6.x, r1.x, r6.x, r2.w
					                          mad r2.w, r1.y, -c3.w, r6.y
					                          cmp r6.y, r1.x, r6.y, r2.w
					                          mad r0.w, r0.w, c3.w, r4.x
					                          cmp r4.x, r1.z, r4.x, r0.w
					                          mad r0.w, r1.y, c3.w, r4.y
					                          cmp r4.y, r1.z, r4.y, r0.w
					                        endif
					                      endif
					                    endif
					                  endif
					                endif
					              endif
					            endif
					          endif
					        endif
					      endif
					      add r0.w, -r6.x, v0.x
					      add r1.y, -r6.y, v0.y
					      cmp r0.w, r0.x, r0.w, r1.y
					      add r1.xy, r4, -v0
					      cmp r1.x, r0.x, r1.x, r1.y
					      cmp r1.yz, r2.xxzw, c4.y, c4.x
					      cmp r2.x, r2.y, -c4.y, -c4.x
					      add r1.yz, r1, r2.x
					      add r2.x, r0.w, r1.x
					      rcp r2.x, r2.x
					      add r2.y, r0.w, -r1.x
					      min r2.z, r1.x, r0.w
					      cmp r0.w, r2.y, r1_abs.z, r1_abs.y
					      mul r0.z, r0.z, r0.z
					      mad r1.x, r2.z, -r2.x, c2.y
					      mul r0.z, r0.z, c1.x
					      cmp r0.w, -r0.w, c4.y, r1.x
					      max r1.x, r0.w, r0.z
					      mad r0.zw, r1.x, r1.w, v0.xyxy
					      cmp r1.x, r0.x, v0.x, r0.z
					      cmp r1.y, r0.x, r0.w, v0.y
					      mov r1.zw, c4.y
					      texldl r1, r1, s0
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r0.y
					    endif
					
					// approximately 510 instruction slots used (64 texture, 446 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 _MainTex_TexelSize;
						vec3 _QualitySettings;
						vec4 unused_0_2[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					ivec4 u_xlati2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					ivec2 u_xlati4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat13;
					vec2 u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					int u_xlati20;
					float u_xlat21;
					bvec2 u_xlatb21;
					float u_xlat22;
					ivec2 u_xlati22;
					vec2 u_xlat23;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
					    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
					    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
					    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
					    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
					    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
					    u_xlat1.x = max(u_xlat1.x, u_xlat28);
					    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
					    u_xlat28 = u_xlat1.x * _QualitySettings.y;
					    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
					    u_xlat19.x = max(u_xlat28, _QualitySettings.z);
					    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
					    if(u_xlatb19){
					        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
					        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
					        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					        u_xlat19.x = u_xlat2.y + u_xlat4.y;
					        u_xlat28 = u_xlat1.y + u_xlat3.y;
					        u_xlat1.x = float(1.0) / u_xlat1.x;
					        u_xlat2.x = u_xlat28 + u_xlat19.x;
					        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
					        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
					        u_xlat20 = u_xlat6.y + u_xlat8.y;
					        u_xlat29 = u_xlat5.y + u_xlat8.y;
					        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
					        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
					        u_xlat21 = u_xlat5.y + u_xlat7.y;
					        u_xlat30 = u_xlat6.y + u_xlat7.y;
					        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
					        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
					        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21;
					        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
					        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
					        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
					        u_xlat20 = u_xlat20 + u_xlat21;
					        u_xlatb19 = u_xlat19.x>=u_xlat28;
					        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
					        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
					        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
					        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
					        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
					        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
					        u_xlat29 = (-u_xlat0.y) + u_xlat10;
					        u_xlat2.x = u_xlat0.y + u_xlat2.x;
					        u_xlat10 = u_xlat0.y + u_xlat10;
					        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
					        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
					        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
					        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
					        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
					        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
					        u_xlat21 = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
					        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
					        u_xlat4.y = (-u_xlat29) + u_xlat21;
					        u_xlat5.x = u_xlat28 + u_xlat12.x;
					        u_xlat5.y = u_xlat29 + u_xlat21;
					        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
					        u_xlat6 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					        u_xlat1.x = u_xlat1.x * u_xlat1.x;
					        u_xlat7 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
					        u_xlat2.x = u_xlat20 * 0.25;
					        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
					        u_xlat1.x = u_xlat1.x * u_xlat12.x;
					        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
					        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
					        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
					        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					        u_xlat23.x = (-u_xlat28) + u_xlat4.x;
					        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
					        u_xlat4.x = (-u_xlat29) + u_xlat4.y;
					        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
					        u_xlati4.xy = ~(u_xlati22.xy);
					        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
					        u_xlat13 = u_xlat28 + u_xlat5.x;
					        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
					        u_xlat13 = u_xlat29 + u_xlat5.y;
					        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
					        if(u_xlati4.x != 0) {
					            if(u_xlati22.x == 0) {
					                u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					            } else {
					                u_xlat7.x = u_xlat3.y;
					            }
					            if(u_xlati22.y == 0) {
					                u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					            }
					            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
					            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
					            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
					            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					            u_xlat22 = (-u_xlat28) + u_xlat23.x;
					            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					            u_xlat22 = (-u_xlat29) + u_xlat23.y;
					            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					            u_xlati22.xy = ~(u_xlati4.xy);
					            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					            u_xlat31 = u_xlat28 + u_xlat6.x;
					            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					            u_xlat31 = u_xlat29 + u_xlat6.y;
					            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					            if(u_xlati22.x != 0) {
					                if(u_xlati4.x == 0) {
					                    u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                } else {
					                    u_xlat7.x = u_xlat3.y;
					                }
					                if(u_xlati4.y == 0) {
					                    u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                }
					                u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                u_xlat22 = (-u_xlat28) + u_xlat23.x;
					                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                u_xlat22 = (-u_xlat29) + u_xlat23.y;
					                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                u_xlati22.xy = ~(u_xlati4.xy);
					                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                u_xlat31 = u_xlat28 + u_xlat6.x;
					                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                u_xlat31 = u_xlat29 + u_xlat6.y;
					                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                if(u_xlati22.x != 0) {
					                    if(u_xlati4.x == 0) {
					                        u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                    } else {
					                        u_xlat7.x = u_xlat3.y;
					                    }
					                    if(u_xlati4.y == 0) {
					                        u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                    }
					                    u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                    u_xlat22 = (-u_xlat28) + u_xlat23.x;
					                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                    u_xlat22 = (-u_xlat29) + u_xlat23.y;
					                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                    u_xlati22.xy = ~(u_xlati4.xy);
					                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                    u_xlat31 = u_xlat28 + u_xlat6.x;
					                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                    u_xlat31 = u_xlat29 + u_xlat6.y;
					                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                    if(u_xlati22.x != 0) {
					                        if(u_xlati4.x == 0) {
					                            u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                        } else {
					                            u_xlat7.x = u_xlat3.y;
					                        }
					                        if(u_xlati4.y == 0) {
					                            u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                        }
					                        u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                        u_xlat22 = (-u_xlat28) * 1.5 + u_xlat23.x;
					                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                        u_xlat22 = (-u_xlat29) * 1.5 + u_xlat23.y;
					                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                        u_xlati22.xy = ~(u_xlati4.xy);
					                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                        u_xlat31 = u_xlat28 * 1.5 + u_xlat6.x;
					                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                        u_xlat31 = u_xlat29 * 1.5 + u_xlat6.y;
					                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                        if(u_xlati22.x != 0) {
					                            if(u_xlati4.x == 0) {
					                                u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                            } else {
					                                u_xlat7.x = u_xlat3.y;
					                            }
					                            if(u_xlati4.y == 0) {
					                                u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                            }
					                            u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                            u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                            u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                            u_xlati22.xy = ~(u_xlati4.xy);
					                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                            if(u_xlati22.x != 0) {
					                                if(u_xlati4.x == 0) {
					                                    u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                } else {
					                                    u_xlat7.x = u_xlat3.y;
					                                }
					                                if(u_xlati4.y == 0) {
					                                    u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                }
					                                u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                u_xlati22.xy = ~(u_xlati4.xy);
					                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                if(u_xlati22.x != 0) {
					                                    if(u_xlati4.x == 0) {
					                                        u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                    } else {
					                                        u_xlat7.x = u_xlat3.y;
					                                    }
					                                    if(u_xlati4.y == 0) {
					                                        u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                    }
					                                    u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                    u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                    u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                    u_xlati22.xy = ~(u_xlati4.xy);
					                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                    if(u_xlati22.x != 0) {
					                                        if(u_xlati4.x == 0) {
					                                            u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                        } else {
					                                            u_xlat7.x = u_xlat3.y;
					                                        }
					                                        if(u_xlati4.y == 0) {
					                                            u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                        }
					                                        u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                        u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                        u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                        u_xlati22.xy = ~(u_xlati4.xy);
					                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                        if(u_xlati22.x != 0) {
					                                            if(u_xlati4.x == 0) {
					                                                u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                            } else {
					                                                u_xlat7.x = u_xlat3.y;
					                                            }
					                                            if(u_xlati4.y == 0) {
					                                                u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                            }
					                                            u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                            u_xlat22 = (-u_xlat28) * 4.0 + u_xlat23.x;
					                                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                            u_xlat22 = (-u_xlat29) * 4.0 + u_xlat23.y;
					                                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                            u_xlati22.xy = ~(u_xlati4.xy);
					                                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                            u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
					                                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                            u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
					                                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                            if(u_xlati22.x != 0) {
					                                                if(u_xlati4.x == 0) {
					                                                    u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                                } else {
					                                                    u_xlat7.x = u_xlat3.y;
					                                                }
					                                                if(u_xlati4.y == 0) {
					                                                    u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                                }
					                                                u_xlat21 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21;
					                                                u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
					                                                u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
					                                                u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
					                                                u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
					                                                u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
					                                                u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
					                                                u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
					                                                u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
					                                                u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
					                                                u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
					                                            }
					                                        }
					                                    }
					                                }
					                            }
					                        }
					                    }
					                }
					            }
					        }
					        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
					        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
					        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
					        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
					        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
					        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
					        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
					        u_xlat3.x = u_xlat10 + u_xlat28;
					        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
					        u_xlat29 = float(1.0) / u_xlat3.x;
					        u_xlatb3 = u_xlat10<u_xlat28;
					        u_xlat10 = min(u_xlat28, u_xlat10);
					        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
					        u_xlat1.x = u_xlat1.x * u_xlat1.x;
					        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
					        u_xlat1.x = u_xlat1.x * _QualitySettings.x;
					        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
					        u_xlat1.x = max(u_xlat1.x, u_xlat10);
					        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
					        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
					        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
					        u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					        SV_Target0.xyz = u_xlat1.xyz;
					        SV_Target0.w = u_xlat0.y;
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 _MainTex_TexelSize;
						vec3 _QualitySettings;
						vec4 unused_0_2[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					ivec4 u_xlati2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					ivec2 u_xlati4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10;
					float u_xlat11;
					vec2 u_xlat12;
					float u_xlat13;
					vec2 u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					int u_xlati20;
					float u_xlat21;
					bvec2 u_xlatb21;
					float u_xlat22;
					ivec2 u_xlati22;
					vec2 u_xlat23;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
					    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
					    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
					    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
					    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
					    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
					    u_xlat1.x = max(u_xlat1.x, u_xlat28);
					    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
					    u_xlat28 = u_xlat1.x * _QualitySettings.y;
					    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
					    u_xlat19.x = max(u_xlat28, _QualitySettings.z);
					    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
					    if(u_xlatb19){
					        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
					        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
					        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					        u_xlat19.x = u_xlat2.y + u_xlat4.y;
					        u_xlat28 = u_xlat1.y + u_xlat3.y;
					        u_xlat1.x = float(1.0) / u_xlat1.x;
					        u_xlat2.x = u_xlat28 + u_xlat19.x;
					        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
					        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
					        u_xlat20 = u_xlat6.y + u_xlat8.y;
					        u_xlat29 = u_xlat5.y + u_xlat8.y;
					        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
					        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
					        u_xlat21 = u_xlat5.y + u_xlat7.y;
					        u_xlat30 = u_xlat6.y + u_xlat7.y;
					        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
					        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
					        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21;
					        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
					        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
					        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
					        u_xlat20 = u_xlat20 + u_xlat21;
					        u_xlatb19 = u_xlat19.x>=u_xlat28;
					        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
					        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
					        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
					        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
					        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
					        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
					        u_xlat29 = (-u_xlat0.y) + u_xlat10;
					        u_xlat2.x = u_xlat0.y + u_xlat2.x;
					        u_xlat10 = u_xlat0.y + u_xlat10;
					        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
					        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
					        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
					        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
					        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
					        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
					        u_xlat21 = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
					        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
					        u_xlat4.y = (-u_xlat29) + u_xlat21;
					        u_xlat5.x = u_xlat28 + u_xlat12.x;
					        u_xlat5.y = u_xlat29 + u_xlat21;
					        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
					        u_xlat6 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					        u_xlat1.x = u_xlat1.x * u_xlat1.x;
					        u_xlat7 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
					        u_xlat2.x = u_xlat20 * 0.25;
					        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
					        u_xlat1.x = u_xlat1.x * u_xlat12.x;
					        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
					        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
					        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
					        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					        u_xlat23.x = (-u_xlat28) + u_xlat4.x;
					        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
					        u_xlat4.x = (-u_xlat29) + u_xlat4.y;
					        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
					        u_xlati4.xy = ~(u_xlati22.xy);
					        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
					        u_xlat13 = u_xlat28 + u_xlat5.x;
					        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
					        u_xlat13 = u_xlat29 + u_xlat5.y;
					        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
					        if(u_xlati4.x != 0) {
					            if(u_xlati22.x == 0) {
					                u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					            } else {
					                u_xlat7.x = u_xlat3.y;
					            }
					            if(u_xlati22.y == 0) {
					                u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					            }
					            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
					            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
					            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
					            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					            u_xlat22 = (-u_xlat28) + u_xlat23.x;
					            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					            u_xlat22 = (-u_xlat29) + u_xlat23.y;
					            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					            u_xlati22.xy = ~(u_xlati4.xy);
					            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					            u_xlat31 = u_xlat28 + u_xlat6.x;
					            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					            u_xlat31 = u_xlat29 + u_xlat6.y;
					            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					            if(u_xlati22.x != 0) {
					                if(u_xlati4.x == 0) {
					                    u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                } else {
					                    u_xlat7.x = u_xlat3.y;
					                }
					                if(u_xlati4.y == 0) {
					                    u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                }
					                u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                u_xlat22 = (-u_xlat28) + u_xlat23.x;
					                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                u_xlat22 = (-u_xlat29) + u_xlat23.y;
					                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                u_xlati22.xy = ~(u_xlati4.xy);
					                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                u_xlat31 = u_xlat28 + u_xlat6.x;
					                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                u_xlat31 = u_xlat29 + u_xlat6.y;
					                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                if(u_xlati22.x != 0) {
					                    if(u_xlati4.x == 0) {
					                        u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                    } else {
					                        u_xlat7.x = u_xlat3.y;
					                    }
					                    if(u_xlati4.y == 0) {
					                        u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                    }
					                    u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                    u_xlat22 = (-u_xlat28) + u_xlat23.x;
					                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                    u_xlat22 = (-u_xlat29) + u_xlat23.y;
					                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                    u_xlati22.xy = ~(u_xlati4.xy);
					                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                    u_xlat31 = u_xlat28 + u_xlat6.x;
					                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                    u_xlat31 = u_xlat29 + u_xlat6.y;
					                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                    if(u_xlati22.x != 0) {
					                        if(u_xlati4.x == 0) {
					                            u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                        } else {
					                            u_xlat7.x = u_xlat3.y;
					                        }
					                        if(u_xlati4.y == 0) {
					                            u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                        }
					                        u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                        u_xlat22 = (-u_xlat28) * 1.5 + u_xlat23.x;
					                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                        u_xlat22 = (-u_xlat29) * 1.5 + u_xlat23.y;
					                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                        u_xlati22.xy = ~(u_xlati4.xy);
					                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                        u_xlat31 = u_xlat28 * 1.5 + u_xlat6.x;
					                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                        u_xlat31 = u_xlat29 * 1.5 + u_xlat6.y;
					                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                        if(u_xlati22.x != 0) {
					                            if(u_xlati4.x == 0) {
					                                u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                            } else {
					                                u_xlat7.x = u_xlat3.y;
					                            }
					                            if(u_xlati4.y == 0) {
					                                u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                            }
					                            u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                            u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                            u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                            u_xlati22.xy = ~(u_xlati4.xy);
					                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                            if(u_xlati22.x != 0) {
					                                if(u_xlati4.x == 0) {
					                                    u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                } else {
					                                    u_xlat7.x = u_xlat3.y;
					                                }
					                                if(u_xlati4.y == 0) {
					                                    u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                }
					                                u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                u_xlati22.xy = ~(u_xlati4.xy);
					                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                if(u_xlati22.x != 0) {
					                                    if(u_xlati4.x == 0) {
					                                        u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                    } else {
					                                        u_xlat7.x = u_xlat3.y;
					                                    }
					                                    if(u_xlati4.y == 0) {
					                                        u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                    }
					                                    u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                    u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                    u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                    u_xlati22.xy = ~(u_xlati4.xy);
					                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                    if(u_xlati22.x != 0) {
					                                        if(u_xlati4.x == 0) {
					                                            u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                        } else {
					                                            u_xlat7.x = u_xlat3.y;
					                                        }
					                                        if(u_xlati4.y == 0) {
					                                            u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                        }
					                                        u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                        u_xlat22 = (-u_xlat28) * 2.0 + u_xlat23.x;
					                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                        u_xlat22 = (-u_xlat29) * 2.0 + u_xlat23.y;
					                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                        u_xlati22.xy = ~(u_xlati4.xy);
					                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
					                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
					                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                        if(u_xlati22.x != 0) {
					                                            if(u_xlati4.x == 0) {
					                                                u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                            } else {
					                                                u_xlat7.x = u_xlat3.y;
					                                            }
					                                            if(u_xlati4.y == 0) {
					                                                u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                            }
					                                            u_xlat22 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22;
					                                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
					                                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
					                                            u_xlat22 = (-u_xlat28) * 4.0 + u_xlat23.x;
					                                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22;
					                                            u_xlat22 = (-u_xlat29) * 4.0 + u_xlat23.y;
					                                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22;
					                                            u_xlati22.xy = ~(u_xlati4.xy);
					                                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
					                                            u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
					                                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
					                                            u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
					                                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
					                                            if(u_xlati22.x != 0) {
					                                                if(u_xlati4.x == 0) {
					                                                    u_xlat7 = textureLod(_MainTex, u_xlat23.xy, 0.0).yxzw;
					                                                } else {
					                                                    u_xlat7.x = u_xlat3.y;
					                                                }
					                                                if(u_xlati4.y == 0) {
					                                                    u_xlat3 = textureLod(_MainTex, u_xlat6.xy, 0.0).yxzw;
					                                                }
					                                                u_xlat21 = (-u_xlat10) * 0.5 + u_xlat7.x;
					                                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21;
					                                                u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
					                                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
					                                                u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
					                                                u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
					                                                u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
					                                                u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
					                                                u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
					                                                u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
					                                                u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
					                                                u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
					                                                u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
					                                            }
					                                        }
					                                    }
					                                }
					                            }
					                        }
					                    }
					                }
					            }
					        }
					        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
					        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
					        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
					        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
					        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
					        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
					        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
					        u_xlat3.x = u_xlat10 + u_xlat28;
					        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
					        u_xlat29 = float(1.0) / u_xlat3.x;
					        u_xlatb3 = u_xlat10<u_xlat28;
					        u_xlat10 = min(u_xlat28, u_xlat10);
					        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
					        u_xlat1.x = u_xlat1.x * u_xlat1.x;
					        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
					        u_xlat1.x = u_xlat1.x * _QualitySettings.x;
					        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
					        u_xlat1.x = max(u_xlat1.x, u_xlat10);
					        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
					        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
					        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
					        u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					        SV_Target0.xyz = u_xlat1.xyz;
					        SV_Target0.w = u_xlat0.y;
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
}
}