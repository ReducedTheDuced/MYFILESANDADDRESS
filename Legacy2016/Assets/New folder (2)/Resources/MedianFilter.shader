Shader "Hidden/DepthOfField/MedianFilter" {
Properties {
 _MainTex ("-", 2D) = "black" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1630
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Offsets           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xy, c1
					    mad_pp r1.xy, r0, -c0, v0
					    mov_pp r1.zw, c2.y
					    texldl_pp r1, r1, s0
					    mad_pp r0.xy, r0, c0, v0
					    mov_pp r0.zw, c2.y
					    texldl_pp r0, r0, s0
					    mul r2, c2.xxyy, v0.xyxx
					    texldl_pp r2, r2, s0
					    max_pp r3.xyz, r2, r0
					    min_pp r4.xyz, r0, r2
					    min_pp r0.xyz, r3, r1
					    max_pp r1.xyz, r4, r0
					    add_pp r0.xyz, -r2, r1
					    mul_pp r0.w, r2.w, r2.w
					    mad oC0.xyz, r0.w, r0, r2
					    mov_pp oC0.w, r2.w
					
					// approximately 20 instruction slots used (6 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _Offsets;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = (-_Offsets.xy) * _MainTex_TexelSize.xy + vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat1.xy = _Offsets.xy * _MainTex_TexelSize.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat3.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat12 = u_xlat2.w * u_xlat2.w;
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _Offsets;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = (-_Offsets.xy) * _MainTex_TexelSize.xy + vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat1.xy = _Offsets.xy * _MainTex_TexelSize.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat3.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat12 = u_xlat2.w * u_xlat2.w;
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 83907
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0.xzw, c1.xyyy, v0.x
					    mov r1.xyz, c1
					    mad_pp r2.xy, c0.y, r1.xzzw, v0.y
					    mov_pp r0.y, r2.x
					    texldl_pp r0, r0, s0
					    mad_pp r3, c0.xyxy, r1.zyzx, v0.xyxy
					    mul_pp r4, r3.zwxx, c1.xxyy
					    mul_pp r3, r3.xyxx, c1.xxyy
					    texldl_pp r3, r3, s0
					    texldl_pp r4, r4, s0
					    min_pp r5.xyz, r0, r4
					    max_pp r6.xyz, r4, r0
					    mul_pp r2.xzw, c1.xyyy, v0.x
					    texldl_pp r0, r2, s0
					    add_pp r2.xy, -c0, v0
					    mov_pp r2.zw, c1.y
					    texldl_pp r2, r2, s0
					    min_pp r4.xyz, r0, r2
					    max_pp r7.xyz, r2, r0
					    mul_pp r0, c1.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    min_pp r2.xyz, r0, r3
					    max_pp r8.xyz, r3, r0
					    min_pp r3.xyz, r2, r4
					    max_pp r9.xyz, r4, r2
					    max_pp r2.xyz, r3, r5
					    min_pp r3.xyz, r2, r9
					    max_pp r4.xyz, r9, r2
					    max_pp r2.xyz, r8, r6
					    min_pp r5.xyz, r6, r8
					    min_pp r6.xyz, r2, r7
					    min_pp r2.xyz, r5, r6
					    max_pp r7.xyz, r6, r5
					    min_pp r5.xyz, r2, r3
					    max_pp r6.xyz, r3, r2
					    mad_pp r1, c0.xyxy, r1.xzxy, v0.xyxy
					    mul_pp r2, r1.xyxx, c1.xxyy
					    mul_pp r1, r1.zwxx, c1.xxyy
					    texldl_pp r1, r1, s0
					    texldl_pp r2, r2, s0
					    max_pp r3.xyz, r5, r2
					    max_pp r2.xyz, r7, r3
					    min_pp r5.xyz, r3, r7
					    min_pp r3.xyz, r2, r4
					    max_pp r2.xyz, r3, r6
					    min_pp r4.xyz, r6, r3
					    max_pp r3.xyz, r5, r1
					    min_pp r6.xyz, r1, r5
					    max_pp r1.xyz, r4, r6
					    min_pp r4.xyz, r3, r2
					    add_pp r2.xy, c0, v0
					    mov_pp r2.zw, c1.y
					    texldl_pp r2, r2, s0
					    max_pp r3.xyz, r1, r2
					    min_pp r5.xyz, r2, r1
					    min_pp r1.xyz, r3, r4
					    max_pp r2.xyz, r1, r5
					    add_pp r1.xyz, -r0, r2
					    mul_pp r1.w, r0.w, r0.w
					    mad oC0.xyz, r1.w, r1, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 70 instruction slots used (18 texture, 52 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat4.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat5.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = max(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat6.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat7.xyz = min(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = max(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = max(u_xlat4.xyz, u_xlat7.xyz);
					    u_xlat6.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = max(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = min(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat2.xyz = max(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat5.zw, 0.0);
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat6.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = max(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.xyz = max(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat2 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat4.xyz = max(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat24 = u_xlat3.w * u_xlat3.w;
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat4.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat5.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = max(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat6.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat7.xyz = min(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = max(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = max(u_xlat4.xyz, u_xlat7.xyz);
					    u_xlat6.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = max(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = min(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat2.xyz = max(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat5.zw, 0.0);
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat6.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = max(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat2.xyz = max(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat2 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat4.xyz = max(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat24 = u_xlat3.w * u_xlat3.w;
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    return;
					}"
}
}
 }
}
Fallback Off
}