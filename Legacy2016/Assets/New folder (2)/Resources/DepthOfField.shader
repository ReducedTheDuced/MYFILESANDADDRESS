Shader "Hidden/DepthOfField/DepthOfField" {
Properties {
 _MainTex ("-", 2D) = "black" { }
 _SecondTex ("-", 2D) = "black" { }
 _ThirdTex ("-", 2D) = "black" { }
}
SubShader { 
 Tags { "Name"="MainSubShader_SM5" }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 18724
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0.800000012, 0.675000012
					    def c1, 0.5, 0.200000003, 0.075000003, 9.99999975e-005
					    def c2, -0.00999999978, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    mul r0, c0.xxyy, v1.zwxx
					    texldl_pp r0, r0, s0
					    add_sat_pp r0.w, r0.w, r0.w
					    mul_pp r1.x, r0.w, c0.z
					    mul r2, c0.xxyy, v1.xyxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.y, r2.w, r2.w
					    mul_pp r1.z, r1.y, c0.z
					    mul_pp r2.xyz, r1.z, r2
					    mul r3, c0.xxyy, v0.xyxx
					    texldl_pp r3, r3, s0
					    mad_pp r2.xyz, r3, r3.w, r2
					    mad_pp r0.xyz, r0, r1.x, r2
					    mul r2, c0.xxyy, v2.xyxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.x, r2.w, r2.w
					    mul_pp r1.z, r1.x, c0.w
					    mad_pp r0.xyz, r2, r1.z, r0
					    mul r2, c0.xxyy, v2.zwxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.z, r2.w, r2.w
					    mul_pp r1.w, r1.z, c0.w
					    mad_pp r0.xyz, r2, r1.w, r0
					    mul r2, c0.xxyy, v3.xyxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.w, r2.w, r2.w
					    mul_pp r2.w, r1.w, c1.x
					    mad_pp r0.xyz, r2, r2.w, r0
					    mul r2, c0.xxyy, v3.zwxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r2.w, r2.w, r2.w
					    mul_pp r4.x, r2.w, c1.x
					    mad_pp r0.xyz, r2, r4.x, r0
					    mul r4, c0.xxyy, v4.xyxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r2.x, r4.w, r4.w
					    mul_pp r2.y, r2.x, c1.y
					    mad_pp r0.xyz, r4, r2.y, r0
					    mul r4, c0.xxyy, v4.zwxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r2.y, r4.w, r4.w
					    mul_pp r2.z, r2.y, c1.y
					    mad_pp r0.xyz, r4, r2.z, r0
					    mul r4, c0.xxyy, v5.xyxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r2.z, r4.w, r4.w
					    mul_pp r4.w, r2.z, c1.z
					    mad_pp r0.xyz, r4, r4.w, r0
					    mul r4, c0.xxyy, v5.zwxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r4.w, r4.w, r4.w
					    mul_pp r5.x, r4.w, c1.z
					    mad_pp r0.xyz, r4, r5.x, r0
					    mad_pp r1.y, r1.y, c0.z, r3.w
					    mad_pp r0.w, r0.w, c0.z, r1.y
					    mad_pp r0.w, r1.x, c0.w, r0.w
					    mad_pp r0.w, r1.z, c0.w, r0.w
					    mad_pp r0.w, r1.w, c1.x, r0.w
					    mad_pp r0.w, r2.w, c1.x, r0.w
					    mad_pp r0.w, r2.x, c1.y, r0.w
					    mad_pp r0.w, r2.y, c1.y, r0.w
					    mad_pp r0.w, r2.z, c1.z, r0.w
					    mad_pp r0.w, r4.w, c1.z, r0.w
					    add_pp r0.w, r0.w, c1.w
					    rcp r0.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    add r0.w, r3.w, c2.x
					    cmp_pp oC0.xyz, r0.w, r0, r3
					    mov_pp oC0.w, r3.w
					
					// approximately 80 instruction slots used (22 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat7;
					float u_xlat8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat18 = u_xlat0.w + u_xlat0.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1 = u_xlat18 * 0.800000012;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat7 = u_xlat2.w + u_xlat2.w;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat13 = u_xlat7 * 0.800000012;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1) + u_xlat2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat1 = u_xlat2.w + u_xlat2.w;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat13 = u_xlat1 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat13) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat13 = u_xlat2.w + u_xlat2.w;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat19 = u_xlat13 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat19 = u_xlat2.w + u_xlat2.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = u_xlat19 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat20) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat20 = u_xlat2.w + u_xlat2.w;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.x = u_xlat20 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2.x = u_xlat4.w + u_xlat4.w;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat2.x * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat8) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat8 = u_xlat4.w + u_xlat4.w;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat14 = u_xlat8 * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat14 = u_xlat4.w + u_xlat4.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat22 = u_xlat14 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat22 = u_xlat4.w + u_xlat4.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat5 = u_xlat22 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat5) + u_xlat0.xyz;
					    u_xlat7 = u_xlat7 * 0.800000012 + u_xlat3.w;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat7;
					    u_xlat18 = u_xlat1 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat13 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat19 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat20 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat2.x * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat8 * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat14 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat22 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-05;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat18);
					    u_xlatb18 = u_xlat3.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target0.w = u_xlat3.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat7;
					float u_xlat8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat18 = u_xlat0.w + u_xlat0.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1 = u_xlat18 * 0.800000012;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat7 = u_xlat2.w + u_xlat2.w;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat13 = u_xlat7 * 0.800000012;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1) + u_xlat2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat1 = u_xlat2.w + u_xlat2.w;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat13 = u_xlat1 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat13) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat13 = u_xlat2.w + u_xlat2.w;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat19 = u_xlat13 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat19 = u_xlat2.w + u_xlat2.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = u_xlat19 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat20) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat20 = u_xlat2.w + u_xlat2.w;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.x = u_xlat20 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2.x = u_xlat4.w + u_xlat4.w;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat2.x * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat8) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat8 = u_xlat4.w + u_xlat4.w;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat14 = u_xlat8 * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat14 = u_xlat4.w + u_xlat4.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat22 = u_xlat14 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat22 = u_xlat4.w + u_xlat4.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat5 = u_xlat22 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat5) + u_xlat0.xyz;
					    u_xlat7 = u_xlat7 * 0.800000012 + u_xlat3.w;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat7;
					    u_xlat18 = u_xlat1 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat13 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat19 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat20 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat2.x * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat8 * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat14 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat22 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-05;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat18);
					    u_xlatb18 = u_xlat3.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target0.w = u_xlat3.w;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 76679
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0.25, 0, 0, 0
					    def c2, 0.75, -0.75, 1, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    mov r0.xy, c2
					    mad r1, c0.xyxy, r0.xxxy, v0.xyxy
					    mul r2, r1.xyxx, c2.zzww
					    mul r1, r1.zwxx, c2.zzww
					    texldl_pp r1, r1, s0
					    texldl_pp r2, r2, s0
					    mad r0, c0.xyxy, -r0.xxxy, v0.xyxy
					    mul r3, r0.xyxx, c2.zzww
					    mul r0, r0.zwxx, c2.zzww
					    texldl_pp r0, r0, s0
					    texldl_pp r3, r3, s0
					    add_pp r2, r2, r3
					    add_pp r1, r1, r2
					    add_pp r0, r0, r1
					    mul_pp oC0, r0, c1.x
					
					// approximately 19 instruction slots used (8 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat2 + u_xlat0;
					    SV_Target0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat2 + u_xlat0;
					    SV_Target0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 166710
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0.800000012, 0.600000024
					    def c1, 0.400000006, 0.25, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    mul r0, c0.xxyy, v1.zwzz
					    texldl_pp r0, r0, s0
					    mul r1, c0.xxyy, v0.xyxx
					    texldl_pp r1, r1, s0
					    cmp_pp r0.x, -r1.w, r1.w, c0.y
					    mov_pp oC0.yw, r1.w
					    min_pp r1.x, r0.w, r0.x
					    mul r0, c0.xxyy, v1.xyzz
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.w, r1.x
					    mul r0, c0.xxyy, v2.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.z
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v2.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.z
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v3.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.w
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v3.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.w
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v4.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.x
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v4.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.x
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v5.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.y
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v5.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.y
					    min_pp oC0.xz, r0.x, r1.x
					
					// approximately 53 instruction slots used (22 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.x = min(u_xlat1.w, 0.0);
					    SV_Target0.yw = u_xlat1.ww;
					    u_xlat0.x = min(u_xlat0.w, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.w);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.x = min(u_xlat1.w, 0.0);
					    SV_Target0.yw = u_xlat1.ww;
					    u_xlat0.x = min(u_xlat0.w, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.w);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 246173
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0.800000012, 0.600000024
					    def c1, 0.400000006, 0.25, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    mul r0, c0.xxyy, v1.zwzz
					    texldl_pp r0, r0, s0
					    mul r1, c0.xxyy, v0.xyxx
					    texldl_pp r1, r1, s0
					    cmp_pp r0.y, -r1.x, r1.x, c0.y
					    mov_pp oC0.yw, r1.y
					    min_pp r1.x, r0.x, r0.y
					    mul r0, c0.xxyy, v1.xyzz
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v2.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.z
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v2.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.z
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v3.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.w
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v3.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.w
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v4.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v4.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v5.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.y
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v5.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.y
					    min_pp oC0.xz, r0.x, r1.x
					
					// approximately 53 instruction slots used (22 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = min(u_xlat1.x, 0.0);
					    SV_Target0.yw = u_xlat1.yy;
					    u_xlat0.x = min(u_xlat0.x, u_xlat2);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = min(u_xlat1.x, 0.0);
					    SV_Target0.yw = u_xlat1.yy;
					    u_xlat0.x = min(u_xlat0.x, u_xlat2);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 308458
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat3;
					bool u_xlatb3;
					bool u_xlatb6;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = textureGather(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_BlurParams.zzzz);
					    u_xlat1 = abs(u_xlat1) * _BlurParams.xxxx;
					    u_xlat2 = u_xlat0 + vec4(9.99999975e-06, 9.99999975e-06, 9.99999975e-06, 9.99999975e-06);
					    u_xlatb0 = lessThan(u_xlat0, _BlurParams.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? float(-1.0) : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? float(-1.0) : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? float(-1.0) : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? float(-1.0) : float(1.0);
					    u_xlat1 = u_xlat1 / u_xlat2;
					    u_xlat1 = u_xlat1 + (-_BlurParams.wwww);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1 = abs(u_xlat0) * abs(u_xlat0);
					    u_xlat1.xyz = abs(u_xlat0.xyz) * u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xx * vec2(-1.0, 1.0) + u_xlat1.yy;
					    u_xlat1.xy = u_xlat1.zz * vec2(1.0, -1.0) + u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.ww) * abs(u_xlat0.ww) + u_xlat1.xy;
					    u_xlat1.xy = min(u_xlat1.xy, vec2(1.0, 1.0));
					    u_xlat1.xy = u_xlat1.xy * _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
					    u_xlatb2.xy = lessThan(abs(u_xlat0.xzxx), abs(u_xlat0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat0;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat0.y;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat0.z : u_xlat0.w;
					        u_xlat0 = hlslcc_movcTemp;
					    }
					    u_xlatb6 = abs(u_xlat0.x)<abs(u_xlat0.y);
					    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat0.y;
					    u_xlatb3 = u_xlat0.x<0.0;
					    u_xlat3 = (u_xlatb3) ? _BoostParams.x : _BoostParams.y;
					    u_xlat3 = u_xlat3 * u_xlat0.x;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat0.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / float(u_xlat9);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat3;
					bool u_xlatb3;
					bool u_xlatb6;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = textureGather(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_BlurParams.zzzz);
					    u_xlat1 = abs(u_xlat1) * _BlurParams.xxxx;
					    u_xlat2 = u_xlat0 + vec4(9.99999975e-06, 9.99999975e-06, 9.99999975e-06, 9.99999975e-06);
					    u_xlatb0 = lessThan(u_xlat0, _BlurParams.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? float(-1.0) : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? float(-1.0) : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? float(-1.0) : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? float(-1.0) : float(1.0);
					    u_xlat1 = u_xlat1 / u_xlat2;
					    u_xlat1 = u_xlat1 + (-_BlurParams.wwww);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1 = abs(u_xlat0) * abs(u_xlat0);
					    u_xlat1.xyz = abs(u_xlat0.xyz) * u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xx * vec2(-1.0, 1.0) + u_xlat1.yy;
					    u_xlat1.xy = u_xlat1.zz * vec2(1.0, -1.0) + u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.ww) * abs(u_xlat0.ww) + u_xlat1.xy;
					    u_xlat1.xy = min(u_xlat1.xy, vec2(1.0, 1.0));
					    u_xlat1.xy = u_xlat1.xy * _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
					    u_xlatb2.xy = lessThan(abs(u_xlat0.xzxx), abs(u_xlat0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat0;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat0.y;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat0.z : u_xlat0.w;
					        u_xlat0 = hlslcc_movcTemp;
					    }
					    u_xlatb6 = abs(u_xlat0.x)<abs(u_xlat0.y);
					    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat0.y;
					    u_xlatb3 = u_xlat0.x<0.0;
					    u_xlat3 = (u_xlatb3) ? _BoostParams.x : _BoostParams.y;
					    u_xlat3 = u_xlat3 * u_xlat0.x;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat0.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / float(u_xlat9);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 352756
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					bvec4 u_xlatb2;
					vec2 u_xlat6;
					vec2 u_xlat7;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = textureGather(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = _BlurParams.zzxx * u_xlat0.xyxy + _BlurParams.wwyy;
					    u_xlat7.xy = max(u_xlat1.zw, vec2(-1.0, -1.0));
					    u_xlat1.xy = u_xlat1.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat7.xy = min(u_xlat7.xy, vec2(0.0, 0.0));
					    u_xlatb2 = lessThan(u_xlat0, _BlurCoe.zzzz);
					    u_xlat0 = _BlurParams.xxzz * u_xlat0.zwzw + _BlurParams.yyww;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat7.x : u_xlat1.x;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat7.y : u_xlat1.y;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat0.xy = max(u_xlat0.xy, vec2(-1.0, -1.0));
					    u_xlat6.xy = u_xlat0.zw;
					    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
					    u_xlat0.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat1.z = (u_xlatb2.z) ? u_xlat0.x : u_xlat6.x;
					    u_xlat1.w = (u_xlatb2.w) ? u_xlat0.y : u_xlat6.y;
					    u_xlat0 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xyz = abs(u_xlat1.xyz) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.yy;
					    u_xlat0.xy = u_xlat0.zz * vec2(1.0, -1.0) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.ww) * abs(u_xlat1.ww) + u_xlat0.xy;
					    u_xlat0.xy = min(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlat0.xy = u_xlat0.xy * _MainTex_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
					    u_xlatb2.xy = lessThan(abs(u_xlat1.xzxx), abs(u_xlat1.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat1.y;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat1.z : u_xlat1.w;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlatb9 = abs(u_xlat1.x)<abs(u_xlat1.y);
					    u_xlat9 = (u_xlatb9) ? u_xlat1.x : u_xlat1.y;
					    u_xlatb1 = u_xlat9<0.0;
					    u_xlat1.x = (u_xlatb1) ? _BoostParams.x : _BoostParams.y;
					    u_xlat1.x = u_xlat9 * u_xlat1.x;
					    SV_Target0.w = u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat9 = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat1.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / float(u_xlat9);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					bvec4 u_xlatb2;
					vec2 u_xlat6;
					vec2 u_xlat7;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = textureGather(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = _BlurParams.zzxx * u_xlat0.xyxy + _BlurParams.wwyy;
					    u_xlat7.xy = max(u_xlat1.zw, vec2(-1.0, -1.0));
					    u_xlat1.xy = u_xlat1.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat7.xy = min(u_xlat7.xy, vec2(0.0, 0.0));
					    u_xlatb2 = lessThan(u_xlat0, _BlurCoe.zzzz);
					    u_xlat0 = _BlurParams.xxzz * u_xlat0.zwzw + _BlurParams.yyww;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat7.x : u_xlat1.x;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat7.y : u_xlat1.y;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat0.xy = max(u_xlat0.xy, vec2(-1.0, -1.0));
					    u_xlat6.xy = u_xlat0.zw;
					    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
					    u_xlat0.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat1.z = (u_xlatb2.z) ? u_xlat0.x : u_xlat6.x;
					    u_xlat1.w = (u_xlatb2.w) ? u_xlat0.y : u_xlat6.y;
					    u_xlat0 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xyz = abs(u_xlat1.xyz) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.yy;
					    u_xlat0.xy = u_xlat0.zz * vec2(1.0, -1.0) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.ww) * abs(u_xlat1.ww) + u_xlat0.xy;
					    u_xlat0.xy = min(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlat0.xy = u_xlat0.xy * _MainTex_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
					    u_xlatb2.xy = lessThan(abs(u_xlat1.xzxx), abs(u_xlat1.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat1.y;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat1.z : u_xlat1.w;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlatb9 = abs(u_xlat1.x)<abs(u_xlat1.y);
					    u_xlat9 = (u_xlatb9) ? u_xlat1.x : u_xlat1.y;
					    u_xlatb1 = u_xlat9<0.0;
					    u_xlat1.x = (u_xlatb1) ? _BoostParams.x : _BoostParams.y;
					    u_xlat1.x = u_xlat9 * u_xlat1.x;
					    SV_Target0.w = u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat9 = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat1.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / float(u_xlat9);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 416932
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurParams;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _BlurParams         c1       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c2, 9.99999975e-006, 1, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp_pp r0.x, r0.x
					    add r0.y, r0.x, c2.x
					    add_pp r0.x, r0.x, -c1.z
					    rcp r0.y, r0.y
					    mul r0.z, r0_abs.x, c1.x
					    cmp r0.x, r0.x, c2.y, c2.z
					    mad_sat r0.y, r0.z, r0.y, -c1.w
					    mul_pp r0.x, r0.y, r0.x
					    mov_pp r0.w, -r0.x
					    mov r0.yz, c2.xwyw
					    cmp_pp oC0, r0.x, r0.yxxz, r0.wwyz
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _BlurParams;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0 = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.yz = vec2(u_xlat3) * u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _BlurParams;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0 = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.yz = vec2(u_xlat3) * u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 475563
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   float4 _BlurParams;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _BlurCoe            c1       1
					//   _BlurParams         c2       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c3, -1, 0, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp_pp r0.x, r0.x
					    add r0.y, r0.x, -c1.z
					    mad_pp r0.xz, c2.zyxw, r0.x, c2.wyyw
					    max_pp r1.x, r0.z, c3.x
					    mov_sat_pp r0.x, r0.x
					    min_pp r0.z, r1.x, c3.y
					    cmp_pp r0.x, r0.y, r0.x, r0.z
					    mov_pp r0.w, -r0.x
					    mov r0.yz, c3
					    cmp_pp oC0, r0.x, r0.yxxz, r0.wwyz
					
					// approximately 12 instruction slots used (1 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 unused_0_3[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat0.yz = (bool(u_xlatb3)) ? vec2(u_xlat6) : u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 unused_0_3[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat0.yz = (bool(u_xlatb3)) ? vec2(u_xlat6) : u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 531650
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[9];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					int u_xlati13;
					float u_xlat14;
					bool u_xlatb14;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat5.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat5.x) : u_xlat5.y;
					    u_xlatb5 = u_xlat1.x<0.0606060587;
					    if(u_xlatb5){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat9 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat14 = u_xlat0.w * u_xlat3.w;
					        u_xlat14 = max(u_xlat14, 0.0);
					        u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat14) + u_xlat2.xyz;
					        u_xlat9 = u_xlat9 + u_xlat14;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[9];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					int u_xlati13;
					float u_xlat14;
					bool u_xlatb14;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat5.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat5.x) : u_xlat5.y;
					    u_xlatb5 = u_xlat1.x<0.0606060587;
					    if(u_xlatb5){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat9 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat14 = u_xlat0.w * u_xlat3.w;
					        u_xlat14 = max(u_xlat14, 0.0);
					        u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat14) + u_xlat2.xyz;
					        u_xlat9 = u_xlat9 + u_xlat14;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[9];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bvec2 u_xlatb5;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat13;
					int u_xlati19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat7.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat7.x) : u_xlat7.y;
					    u_xlatb7 = u_xlat1.x<0.0606060587;
					    if(u_xlatb7){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat13 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat4.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
					        u_xlat3 = textureGather(_MainTex, u_xlat3.xy, 3);
					        u_xlatb5.xy = lessThan(abs(u_xlat3.xzxx), abs(u_xlat3.ywyy)).xy;
					        {
					            vec4 hlslcc_movcTemp = u_xlat3;
					            hlslcc_movcTemp.x = (u_xlatb5.x) ? u_xlat3.x : u_xlat3.y;
					            hlslcc_movcTemp.y = (u_xlatb5.y) ? u_xlat3.z : u_xlat3.w;
					            u_xlat3 = hlslcc_movcTemp;
					        }
					        u_xlatb20 = abs(u_xlat3.x)<abs(u_xlat3.y);
					        u_xlat20 = (u_xlatb20) ? u_xlat3.x : u_xlat3.y;
					        u_xlat20 = u_xlat0.w * u_xlat20;
					        u_xlat20 = max(u_xlat20, 0.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
					        u_xlat13 = u_xlat13 + u_xlat20;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat13);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[9];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bvec2 u_xlatb5;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat13;
					int u_xlati19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat7.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat7.x) : u_xlat7.y;
					    u_xlatb7 = u_xlat1.x<0.0606060587;
					    if(u_xlatb7){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat13 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat4.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
					        u_xlat3 = textureGather(_MainTex, u_xlat3.xy, 3);
					        u_xlatb5.xy = lessThan(abs(u_xlat3.xzxx), abs(u_xlat3.ywyy)).xy;
					        {
					            vec4 hlslcc_movcTemp = u_xlat3;
					            hlslcc_movcTemp.x = (u_xlatb5.x) ? u_xlat3.x : u_xlat3.y;
					            hlslcc_movcTemp.y = (u_xlatb5.y) ? u_xlat3.z : u_xlat3.w;
					            u_xlat3 = hlslcc_movcTemp;
					        }
					        u_xlatb20 = abs(u_xlat3.x)<abs(u_xlat3.y);
					        u_xlat20 = (u_xlatb20) ? u_xlat3.x : u_xlat3.y;
					        u_xlat20 = u_xlat0.w * u_xlat20;
					        u_xlat20 = max(u_xlat20, 0.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
					        u_xlat13 = u_xlat13 + u_xlat20;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat13);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 620665
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat35 * u_xlat7.x;
					            u_xlat27.x = u_xlat34 * u_xlat7.y;
					            u_xlat21.x = u_xlat35 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat35 * u_xlat7.x;
					            u_xlat27.x = u_xlat34 * u_xlat7.y;
					            u_xlat21.x = u_xlat35 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 657955
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					float u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat35 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27 = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27) * u_xlat17 + 1.0;
					            u_xlat27 = u_xlat34 * u_xlat17;
					            u_xlat21.x = u_xlat35 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					float u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat35 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27 = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27) * u_xlat17 + 1.0;
					            u_xlat27 = u_xlat34 * u_xlat17;
					            u_xlat21.x = u_xlat35 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 747734
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat35 * u_xlat7.x;
					            u_xlat27.x = u_xlat34 * u_xlat7.y;
					            u_xlat21.x = u_xlat35 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat35 * u_xlat7.x;
					            u_xlat27.x = u_xlat34 * u_xlat7.y;
					            u_xlat21.x = u_xlat35 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 828230
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					UNITY_BINDING(1) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					UNITY_BINDING(2) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					UNITY_BINDING(3) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					float u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat35 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27 = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27) * u_xlat17 + 1.0;
					            u_xlat27 = u_xlat34 * u_xlat17;
					            u_xlat21.x = u_xlat35 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec2 u_xlatb9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					float u_xlat27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8.xyz = textureLod(_MainTex, u_xlat7.xy, 0.0).xyz;
					            u_xlat7 = textureGather(_MainTex, u_xlat7.xy, 3);
					            u_xlatb9.xy = lessThan(abs(u_xlat7.xzxx), abs(u_xlat7.ywyy)).xy;
					            {
					                vec4 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat7.y;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.z : u_xlat7.w;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlatb34 = abs(u_xlat7.x)<abs(u_xlat7.y);
					            u_xlat34 = (u_xlatb34) ? u_xlat7.x : u_xlat7.y;
					            u_xlat35 = max((-u_xlat34), 0.0);
					            u_xlat36 = (-u_xlat0.w) + u_xlat34;
					            u_xlat36 = abs(u_xlat36) * -0.5;
					            u_xlat36 = u_xlat36 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat36 = max(u_xlat36, 0.0);
					            u_xlat34 = max(u_xlat34, 0.0);
					            u_xlat34 = u_xlat36 * u_xlat34;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat35 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27 = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27) * u_xlat17 + 1.0;
					            u_xlat27 = u_xlat34 * u_xlat17;
					            u_xlat21.x = u_xlat35 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat34 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 893476
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					UNITY_BINDING(1) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					UNITY_BINDING(2) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat0 = textureGather(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_BlurParams.zzzz);
					    u_xlat1 = abs(u_xlat1) * _BlurParams.xxxx;
					    u_xlat2 = u_xlat0 + vec4(9.99999975e-06, 9.99999975e-06, 9.99999975e-06, 9.99999975e-06);
					    u_xlatb0 = lessThan(u_xlat0, _BlurParams.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? float(-1.0) : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? float(-1.0) : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? float(-1.0) : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? float(-1.0) : float(1.0);
					    u_xlat1 = u_xlat1 / u_xlat2;
					    u_xlat1 = u_xlat1 + (-_BlurParams.wwww);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1 = abs(u_xlat0) * abs(u_xlat0);
					    u_xlat0.xyz = abs(u_xlat0.xyz) * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.yy;
					    u_xlat0.xy = u_xlat0.zz * vec2(1.0, -1.0) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat1.ww) * abs(u_xlat0.ww) + u_xlat0.xy;
					    u_xlat0.xy = min(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_SecondTex, u_xlat0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / float(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat5.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat5.x = abs(u_xlat5.x) * _BlurParams.x;
					    u_xlat9 = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1 = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1) ? -1.0 : 1.0;
					    u_xlat5.x = u_xlat5.x / u_xlat9;
					    u_xlat5.x = u_xlat5.x + (-_BlurParams.w);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat5.x * u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0.x = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (u_xlatb0.x) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat0 = textureGather(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_BlurParams.zzzz);
					    u_xlat1 = abs(u_xlat1) * _BlurParams.xxxx;
					    u_xlat2 = u_xlat0 + vec4(9.99999975e-06, 9.99999975e-06, 9.99999975e-06, 9.99999975e-06);
					    u_xlatb0 = lessThan(u_xlat0, _BlurParams.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? float(-1.0) : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? float(-1.0) : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? float(-1.0) : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? float(-1.0) : float(1.0);
					    u_xlat1 = u_xlat1 / u_xlat2;
					    u_xlat1 = u_xlat1 + (-_BlurParams.wwww);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1 = abs(u_xlat0) * abs(u_xlat0);
					    u_xlat0.xyz = abs(u_xlat0.xyz) * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.yy;
					    u_xlat0.xy = u_xlat0.zz * vec2(1.0, -1.0) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat1.ww) * abs(u_xlat0.ww) + u_xlat0.xy;
					    u_xlat0.xy = min(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_SecondTex, u_xlat0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / float(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat5.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat5.x = abs(u_xlat5.x) * _BlurParams.x;
					    u_xlat9 = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1 = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1) ? -1.0 : 1.0;
					    u_xlat5.x = u_xlat5.x / u_xlat9;
					    u_xlat5.x = u_xlat5.x + (-_BlurParams.w);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat5.x * u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0.x = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (u_xlatb0.x) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 971766
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					UNITY_BINDING(1) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					UNITY_BINDING(2) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bvec4 u_xlatb2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat0 = textureGather(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = _BlurParams.zzxx * u_xlat0.xyxy + _BlurParams.wwyy;
					    u_xlat9.xy = max(u_xlat1.zw, vec2(-1.0, -1.0));
					    u_xlat1.xy = u_xlat1.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat9.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					    u_xlatb2 = lessThan(u_xlat0, _BlurCoe.zzzz);
					    u_xlat0 = _BlurParams.xxzz * u_xlat0.zwzw + _BlurParams.yyww;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat9.x : u_xlat1.x;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat9.y : u_xlat1.y;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat0.xy = max(u_xlat0.xy, vec2(-1.0, -1.0));
					    u_xlat8.xy = u_xlat0.zw;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat0.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat1.z = (u_xlatb2.z) ? u_xlat0.x : u_xlat8.x;
					    u_xlat1.w = (u_xlatb2.w) ? u_xlat0.y : u_xlat8.y;
					    u_xlat0 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xyz = abs(u_xlat1.xyz) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.yy;
					    u_xlat0.xy = u_xlat0.zz * vec2(1.0, -1.0) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.ww) * abs(u_xlat1.ww) + u_xlat0.xy;
					    u_xlat0.xy = min(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_SecondTex, u_xlat0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / float(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat9.x = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat9.x = min(u_xlat9.x, 0.0);
					    u_xlat1.x = (u_xlatb5) ? u_xlat9.x : u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bvec4 u_xlatb2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat0 = textureGather(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = _ZBufferParams.xxxx * u_xlat0 + _ZBufferParams.yyyy;
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = _BlurParams.zzxx * u_xlat0.xyxy + _BlurParams.wwyy;
					    u_xlat9.xy = max(u_xlat1.zw, vec2(-1.0, -1.0));
					    u_xlat1.xy = u_xlat1.xy;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat9.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					    u_xlatb2 = lessThan(u_xlat0, _BlurCoe.zzzz);
					    u_xlat0 = _BlurParams.xxzz * u_xlat0.zwzw + _BlurParams.yyww;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat9.x : u_xlat1.x;
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat9.y : u_xlat1.y;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat0.xy = max(u_xlat0.xy, vec2(-1.0, -1.0));
					    u_xlat8.xy = u_xlat0.zw;
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat0.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat1.z = (u_xlatb2.z) ? u_xlat0.x : u_xlat8.x;
					    u_xlat1.w = (u_xlatb2.w) ? u_xlat0.y : u_xlat8.y;
					    u_xlat0 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xyz = abs(u_xlat1.xyz) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.yy;
					    u_xlat0.xy = u_xlat0.zz * vec2(1.0, -1.0) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.ww) * abs(u_xlat1.ww) + u_xlat0.xy;
					    u_xlat0.xy = min(u_xlat0.xy, vec2(1.0, 1.0));
					    u_xlat0.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_SecondTex, u_xlat0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / float(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat9.x = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat9.x = min(u_xlat9.x, 0.0);
					    u_xlat1.x = (u_xlatb5) ? u_xlat9.x : u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1024560
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					UNITY_BINDING(1) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					UNITY_BINDING(2) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat12.xy);
					    u_xlat1.xy = u_xlat12.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat1 = textureGather(_CameraDepthTexture, u_xlat1.xy);
					    u_xlat1 = _ZBufferParams.xxxx * u_xlat1 + _ZBufferParams.yyyy;
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat1 + (-_BlurParams.zzzz);
					    u_xlat2 = abs(u_xlat2) * _BlurParams.xxxx;
					    u_xlat3 = u_xlat1 + vec4(9.99999975e-06, 9.99999975e-06, 9.99999975e-06, 9.99999975e-06);
					    u_xlatb1 = lessThan(u_xlat1, _BlurParams.zzzz);
					    u_xlat1.x = (u_xlatb1.x) ? float(-1.0) : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? float(-1.0) : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? float(-1.0) : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? float(-1.0) : float(1.0);
					    u_xlat2 = u_xlat2 / u_xlat3;
					    u_xlat2 = u_xlat2 + (-_BlurParams.wwww);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat1.xyz = abs(u_xlat1.xyz) * u_xlat2.xyz;
					    u_xlat1.xy = u_xlat1.xx * vec2(-1.0, 1.0) + u_xlat1.yy;
					    u_xlat1.xy = u_xlat1.zz * vec2(1.0, -1.0) + u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat2.ww) * abs(u_xlat1.ww) + u_xlat1.xy;
					    u_xlat1.xy = min(u_xlat1.xy, vec2(1.0, 1.0));
					    u_xlat12.xy = u_xlat1.xy * vec2(0.25, 0.25) + u_xlat12.xy;
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat13.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat2 = u_xlat13.xyxy * vec4(0.165999994, 0.165999994, -0.165999994, -0.165999994);
					    u_xlat13.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat2.zw;
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat1.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat13.xy + vec2(0.666000009, 0.666000009);
					    u_xlat13.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat12.xy + u_xlat1.xy;
					    u_xlat13.xy = (-u_xlat1.xy) + u_xlat13.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat3.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat1.xy = u_xlat2.xy / u_xlat13.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat3.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat2 = textureLod(_SecondTex, u_xlat3.xw, 0.0);
					    u_xlat2 = u_xlat13.xxxx * u_xlat2;
					    u_xlat2 = u_xlat12.yyyy * u_xlat2;
					    u_xlat4 = textureLod(_SecondTex, u_xlat3.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat3.zy, 0.0);
					    u_xlat3 = textureLod(_SecondTex, u_xlat3.xy, 0.0);
					    u_xlat3 = u_xlat13.xxxx * u_xlat3;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat2;
					    u_xlat0 = u_xlat5 * u_xlat13.yyyy + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat13.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / float(u_xlat1.x);
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1.x = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (u_xlatb1.x) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat7.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat7.x = abs(u_xlat7.x) * _BlurParams.x;
					    u_xlat13.x = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1.x = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1.x) ? -1.0 : 1.0;
					    u_xlat7.x = u_xlat7.x / u_xlat13.x;
					    u_xlat7.x = u_xlat7.x + (-_BlurParams.w);
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat12.xy);
					    u_xlat1.xy = u_xlat12.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat1 = textureGather(_CameraDepthTexture, u_xlat1.xy);
					    u_xlat1 = _ZBufferParams.xxxx * u_xlat1 + _ZBufferParams.yyyy;
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat1 + (-_BlurParams.zzzz);
					    u_xlat2 = abs(u_xlat2) * _BlurParams.xxxx;
					    u_xlat3 = u_xlat1 + vec4(9.99999975e-06, 9.99999975e-06, 9.99999975e-06, 9.99999975e-06);
					    u_xlatb1 = lessThan(u_xlat1, _BlurParams.zzzz);
					    u_xlat1.x = (u_xlatb1.x) ? float(-1.0) : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? float(-1.0) : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? float(-1.0) : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? float(-1.0) : float(1.0);
					    u_xlat2 = u_xlat2 / u_xlat3;
					    u_xlat2 = u_xlat2 + (-_BlurParams.wwww);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat1.xyz = abs(u_xlat1.xyz) * u_xlat2.xyz;
					    u_xlat1.xy = u_xlat1.xx * vec2(-1.0, 1.0) + u_xlat1.yy;
					    u_xlat1.xy = u_xlat1.zz * vec2(1.0, -1.0) + u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat2.ww) * abs(u_xlat1.ww) + u_xlat1.xy;
					    u_xlat1.xy = min(u_xlat1.xy, vec2(1.0, 1.0));
					    u_xlat12.xy = u_xlat1.xy * vec2(0.25, 0.25) + u_xlat12.xy;
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat13.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat2 = u_xlat13.xyxy * vec4(0.165999994, 0.165999994, -0.165999994, -0.165999994);
					    u_xlat13.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat2.zw;
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat1.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat13.xy + vec2(0.666000009, 0.666000009);
					    u_xlat13.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat12.xy + u_xlat1.xy;
					    u_xlat13.xy = (-u_xlat1.xy) + u_xlat13.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat3.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat1.xy = u_xlat2.xy / u_xlat13.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat3.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat2 = textureLod(_SecondTex, u_xlat3.xw, 0.0);
					    u_xlat2 = u_xlat13.xxxx * u_xlat2;
					    u_xlat2 = u_xlat12.yyyy * u_xlat2;
					    u_xlat4 = textureLod(_SecondTex, u_xlat3.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat3.zy, 0.0);
					    u_xlat3 = textureLod(_SecondTex, u_xlat3.xy, 0.0);
					    u_xlat3 = u_xlat13.xxxx * u_xlat3;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat2;
					    u_xlat0 = u_xlat5 * u_xlat13.yyyy + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat13.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / float(u_xlat1.x);
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1.x = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (u_xlatb1.x) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat7.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat7.x = abs(u_xlat7.x) * _BlurParams.x;
					    u_xlat13.x = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1.x = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1.x) ? -1.0 : 1.0;
					    u_xlat7.x = u_xlat7.x / u_xlat13.x;
					    u_xlat7.x = u_xlat7.x + (-_BlurParams.w);
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1073000
Program "vp" {
SubProgram "d3d11 " {
"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					UNITY_BINDING(1) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					UNITY_BINDING(2) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec2 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d11 " {
"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					vec2 u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat12.xy);
					    u_xlat1.xy = u_xlat12.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat1 = textureGather(_CameraDepthTexture, u_xlat1.xy);
					    u_xlat1 = _ZBufferParams.xxxx * u_xlat1 + _ZBufferParams.yyyy;
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = _BlurParams.zzxx * u_xlat1.xyxy + _BlurParams.wwyy;
					    u_xlat14.xy = max(u_xlat2.zw, vec2(-1.0, -1.0));
					    u_xlat2.xy = u_xlat2.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat14.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlatb3 = lessThan(u_xlat1, _BlurCoe.zzzz);
					    u_xlat1 = _BlurParams.xxzz * u_xlat1.zwzw + _BlurParams.yyww;
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat14.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat14.y : u_xlat2.y;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat1.xy = max(u_xlat1.xy, vec2(-1.0, -1.0));
					    u_xlat13.xy = u_xlat1.zw;
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat1.xy = min(u_xlat1.xy, vec2(0.0, 0.0));
					    u_xlat2.z = (u_xlatb3.z) ? u_xlat1.x : u_xlat13.x;
					    u_xlat2.w = (u_xlatb3.w) ? u_xlat1.y : u_xlat13.y;
					    u_xlat1 = abs(u_xlat2) * abs(u_xlat2);
					    u_xlat1.xyz = abs(u_xlat2.xyz) * u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xx * vec2(-1.0, 1.0) + u_xlat1.yy;
					    u_xlat1.xy = u_xlat1.zz * vec2(1.0, -1.0) + u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.ww) * abs(u_xlat2.ww) + u_xlat1.xy;
					    u_xlat1.xy = min(u_xlat1.xy, vec2(1.0, 1.0));
					    u_xlat12.xy = u_xlat1.xy * vec2(0.25, 0.25) + u_xlat12.xy;
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat13.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat2 = u_xlat13.xyxy * vec4(0.165999994, 0.165999994, -0.165999994, -0.165999994);
					    u_xlat13.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat2.zw;
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat1.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat13.xy + vec2(0.666000009, 0.666000009);
					    u_xlat13.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat12.xy + u_xlat1.xy;
					    u_xlat13.xy = (-u_xlat1.xy) + u_xlat13.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat3.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat1.xy = u_xlat2.xy / u_xlat13.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat3.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat2 = textureLod(_SecondTex, u_xlat3.xw, 0.0);
					    u_xlat2 = u_xlat13.xxxx * u_xlat2;
					    u_xlat2 = u_xlat12.yyyy * u_xlat2;
					    u_xlat4 = textureLod(_SecondTex, u_xlat3.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat3.zy, 0.0);
					    u_xlat3 = textureLod(_SecondTex, u_xlat3.xy, 0.0);
					    u_xlat3 = u_xlat13.xxxx * u_xlat3;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat2;
					    u_xlat0 = u_xlat5 * u_xlat13.yyyy + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat13.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / float(u_xlat1.x);
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat13.x = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13.x = min(u_xlat13.x, 0.0);
					    u_xlat1.x = (u_xlatb7) ? u_xlat13.x : u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3.x = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (u_xlatb3.x) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					precise vec4 u_xlat_precise_vec4;
					precise ivec4 u_xlat_precise_ivec4;
					precise bvec4 u_xlat_precise_bvec4;
					precise uvec4 u_xlat_precise_uvec4;
					UNITY_BINDING(0) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					UNITY_BINDING(1) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					UNITY_LOCATION(0) uniform  sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					vec2 u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat12.xy);
					    u_xlat1.xy = u_xlat12.xy * _Convolved_TexelSize.zw + vs_TEXCOORD0.xy;
					    u_xlat1 = textureGather(_CameraDepthTexture, u_xlat1.xy);
					    u_xlat1 = _ZBufferParams.xxxx * u_xlat1 + _ZBufferParams.yyyy;
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = _BlurParams.zzxx * u_xlat1.xyxy + _BlurParams.wwyy;
					    u_xlat14.xy = max(u_xlat2.zw, vec2(-1.0, -1.0));
					    u_xlat2.xy = u_xlat2.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat14.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlatb3 = lessThan(u_xlat1, _BlurCoe.zzzz);
					    u_xlat1 = _BlurParams.xxzz * u_xlat1.zwzw + _BlurParams.yyww;
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat14.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat14.y : u_xlat2.y;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat1.xy = max(u_xlat1.xy, vec2(-1.0, -1.0));
					    u_xlat13.xy = u_xlat1.zw;
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat1.xy = min(u_xlat1.xy, vec2(0.0, 0.0));
					    u_xlat2.z = (u_xlatb3.z) ? u_xlat1.x : u_xlat13.x;
					    u_xlat2.w = (u_xlatb3.w) ? u_xlat1.y : u_xlat13.y;
					    u_xlat1 = abs(u_xlat2) * abs(u_xlat2);
					    u_xlat1.xyz = abs(u_xlat2.xyz) * u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xx * vec2(-1.0, 1.0) + u_xlat1.yy;
					    u_xlat1.xy = u_xlat1.zz * vec2(1.0, -1.0) + u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.ww) * abs(u_xlat2.ww) + u_xlat1.xy;
					    u_xlat1.xy = min(u_xlat1.xy, vec2(1.0, 1.0));
					    u_xlat12.xy = u_xlat1.xy * vec2(0.25, 0.25) + u_xlat12.xy;
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat13.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat2 = u_xlat13.xyxy * vec4(0.165999994, 0.165999994, -0.165999994, -0.165999994);
					    u_xlat13.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat2.zw;
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat1.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat13.xy + vec2(0.666000009, 0.666000009);
					    u_xlat13.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat12.xy + u_xlat1.xy;
					    u_xlat13.xy = (-u_xlat1.xy) + u_xlat13.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat3.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat1.xy = u_xlat2.xy / u_xlat13.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat3.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat2 = textureLod(_SecondTex, u_xlat3.xw, 0.0);
					    u_xlat2 = u_xlat13.xxxx * u_xlat2;
					    u_xlat2 = u_xlat12.yyyy * u_xlat2;
					    u_xlat4 = textureLod(_SecondTex, u_xlat3.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat3.zy, 0.0);
					    u_xlat3 = textureLod(_SecondTex, u_xlat3.xy, 0.0);
					    u_xlat3 = u_xlat13.xxxx * u_xlat3;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat2;
					    u_xlat0 = u_xlat5 * u_xlat13.yyyy + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat13.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / float(u_xlat1.x);
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1.x = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat13.x = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13.x = min(u_xlat13.x, 0.0);
					    u_xlat1.x = (u_xlatb7) ? u_xlat13.x : u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3.x = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (u_xlatb3.x) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1157804
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c4.x, c4.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c4.z
					    else
					      mov r3.xz, c4
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.zw, c5.x
					      mov r4, c3.y
					      rep i0
					        mul_pp r5.w, r4.w, c5.y
					        mad_pp r6.xy, r5.w, r2, c2
					        mad_pp r3.xy, r6, r1.zwzw, v0
					        texldl_pp r6, r3, s0
					        mad_pp r3.x, r4.w, c5.z, c5.w
					        add_pp r3.y, -r0.w, r6.w
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r5.w, r6.w, c3.y
					        mul r5.w, r3.y, r5.w
					        mad_sat_pp r7.x, r3_abs.x, r1.x, -c3.x
					        mad_pp r7.y, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.y, -r7.x, c3.x
					        mul_pp r7.x, -r6.w, r7.x
					        cmp_pp r6.w, r6.w, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r7.x, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.x, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r5.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r6.w
					        mad_pp r4.xyz, r6, r6.w, r4
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r4.w, r4.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.y
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.z
					      mad_pp r2.xyz, r5, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r4, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 72 instruction slots used (4 texture, 68 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.200000003, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.400000006, -1, 9.99999975e-005, 0.333333343
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c5.x, c5.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c5.z
					    else
					      mov r3.xz, c5
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov r4.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.zw, c4.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.w, r5.w, c4.y
					        mad_pp r7.xy, r6.w, r2, c2
					        mul_pp r7.zw, r1, r7.xyxy
					        mad_pp r3.xy, r7, r1.zwzw, v0
					        texldl_pp r8, r3, s0
					        mov r9.z, c4.z
					        mad r3.xy, r3, c0.zwzw, r9.z
					        frc r7.xy, r3
					        add r3.xy, r3, -r7
					        add_pp r3.xy, r3, c3.x
					        cmp r7.xy, -r7.zwzw, c3.y, c3.x
					        cmp r7.zw, r7, -c3.y, -c3.x
					        add r7.xy, r7.zwzw, r7
					        mad_pp r3.xy, r7, c4.w, r3
					        mul r4.xy, r3, c0
					        texldl_pp r7, r4, s0
					        mad_pp r3.x, r5.w, c6.x, c6.y
					        add_pp r3.y, -r0.w, r7.w
					        mul r3.y, r3_abs.y, c4.z
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r4.x, r7.w, c3.y
					        mul r4.x, r3.y, r4.x
					        mad_sat_pp r4.y, r3_abs.x, r1.x, -c3.x
					        mad_pp r6.w, r4.y, c5.x, c5.y
					        mul_pp r4.y, r4.y, r4.y
					        mad_pp r4.y, r6.w, -r4.y, c3.x
					        mul_pp r4.y, r4.y, -r7.w
					        cmp_pp r4.y, r7.w, c3.y, r4.y
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r6.w, r3.x, c5.x, c5.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r6.w, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r4.x
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r4.y
					        mad_pp r5.xyz, r8, r4.y, r5
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r6.xyz, r8, r3.x, r6
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.w
					      mad_pp r2.xyz, r6, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r5, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 86 instruction slots used (6 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1232037
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1277899
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c4.x, c4.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c4
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4, s1
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r1.w, r7.w
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r8.x, r7.w, c3.y
					        mul r8.x, r4.y, r8.x
					        mad_sat_pp r8.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.z, r8.y, c4.x, c4.y
					        mul_pp r8.y, r8.y, r8.y
					        mad_pp r8.y, r8.z, -r8.y, c3.x
					        mul_pp r8.y, -r7.w, r8.y
					        cmp_pp r7.w, r7.w, c3.y, r8.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r8.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r7.w
					        mad_pp r5.xyz, r7, r7.w, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.y
					      rcp r2.y, r2.y
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r5.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 81 instruction slots used (6 texture, 75 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.200000003, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.400000006, -1, 9.99999975e-005, 0.333333343
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c5.x, c5.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c5.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c5
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov r5.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.w, c4.x
					      mov_pp r6.w, c4.x
					      mov r7, c3.y
					      rep i0
					        mul_pp r8.x, r7.w, c4.y
					        mad_pp r8.xy, r8.x, r3.xwzw, c2
					        mul_pp r8.zw, r3.xyyz, r8.xyxy
					        mad_pp r4.xy, r8, r3.yzzw, v0
					        texldl_pp r9, r4, s1
					        mov r10.z, c4.z
					        mad r4.xy, r4, c0.zwzw, r10.z
					        frc r8.xy, r4
					        add r4.xy, r4, -r8
					        add_pp r4.xy, r4, c3.x
					        cmp r8.xy, -r8.zwzw, c3.y, c3.x
					        cmp r8.zw, r8, -c3.y, -c3.x
					        add r8.xy, r8.zwzw, r8
					        mad_pp r4.xy, r8, c4.w, r4
					        mul r5.xy, r4, c0
					        texldl_pp r8, r5, s1
					        mad_pp r4.x, r7.w, c6.x, c6.y
					        add_pp r4.y, -r1.w, r8.w
					        mul r4.y, r4_abs.y, c4.z
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.y, r5.x
					        mad_sat_pp r5.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.x, r5.y, c5.x, c5.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r8.x, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.x, r4.x, c5.x, c5.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.x, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r5.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r5.y
					        mad_pp r6.xyz, r9, r5.y, r6
					        add_pp r6.w, r4.x, r6.w
					        mad_pp r7.xyz, r9, r4.x, r7
					        add r7.w, r7.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.z
					      rcp r2.y, r2.y
					      add_pp r2.z, r6.w, c6.z
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r6.w, c6.w
					      mul_sat_pp r2.w, r2.w, c6.w
					      mad_pp r3.yzw, r7.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r6.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 95 instruction slots used (8 texture, 87 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1320159
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1434908
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c4.x, c4.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c4.z
					    else
					      mov r3.xz, c4
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.zw, c5.x
					      mov r4, c3.y
					      rep i0
					        mul_pp r5.w, r4.w, c5.y
					        mad_pp r6.xy, r5.w, r2, c2
					        mad_pp r3.xy, r6, r1.zwzw, v0
					        texldl_pp r6, r3, s0
					        mad_pp r3.x, r4.w, c5.z, c5.w
					        add_pp r3.y, -r0.w, r6.w
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r5.w, r6.w, c3.y
					        mul r5.w, r3.y, r5.w
					        mad_sat_pp r7.x, r3_abs.x, r1.x, -c3.x
					        mad_pp r7.y, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.y, -r7.x, c3.x
					        mul_pp r7.x, -r6.w, r7.x
					        cmp_pp r6.w, r6.w, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r7.x, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.x, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r5.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r6.w
					        mad_pp r4.xyz, r6, r6.w, r4
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r4.w, r4.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.y
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.z
					      mad_pp r2.xyz, r5, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r4, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 72 instruction slots used (4 texture, 68 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.100000001, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.200000003, -1, 9.99999975e-005, 0.181818187
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c5.x, c5.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c5.z
					    else
					      mov r3.xz, c5
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov r4.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.zw, c4.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.w, r5.w, c4.y
					        mad_pp r7.xy, r6.w, r2, c2
					        mul_pp r7.zw, r1, r7.xyxy
					        mad_pp r3.xy, r7, r1.zwzw, v0
					        texldl_pp r8, r3, s0
					        mov r9.z, c4.z
					        mad r3.xy, r3, c0.zwzw, r9.z
					        frc r7.xy, r3
					        add r3.xy, r3, -r7
					        add_pp r3.xy, r3, c3.x
					        cmp r7.xy, -r7.zwzw, c3.y, c3.x
					        cmp r7.zw, r7, -c3.y, -c3.x
					        add r7.xy, r7.zwzw, r7
					        mad_pp r3.xy, r7, c4.w, r3
					        mul r4.xy, r3, c0
					        texldl_pp r7, r4, s0
					        mad_pp r3.x, r5.w, c6.x, c6.y
					        add_pp r3.y, -r0.w, r7.w
					        mul r3.y, r3_abs.y, c4.z
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r4.x, r7.w, c3.y
					        mul r4.x, r3.y, r4.x
					        mad_sat_pp r4.y, r3_abs.x, r1.x, -c3.x
					        mad_pp r6.w, r4.y, c5.x, c5.y
					        mul_pp r4.y, r4.y, r4.y
					        mad_pp r4.y, r6.w, -r4.y, c3.x
					        mul_pp r4.y, r4.y, -r7.w
					        cmp_pp r4.y, r7.w, c3.y, r4.y
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r6.w, r3.x, c5.x, c5.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r6.w, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r4.x
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r4.y
					        mad_pp r5.xyz, r8, r4.y, r5
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r6.xyz, r8, r3.x, r6
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.w
					      mad_pp r2.xyz, r6, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r5, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 86 instruction slots used (6 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1462917
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1560773
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c4.x, c4.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c4
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4, s1
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r1.w, r7.w
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r8.x, r7.w, c3.y
					        mul r8.x, r4.y, r8.x
					        mad_sat_pp r8.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.z, r8.y, c4.x, c4.y
					        mul_pp r8.y, r8.y, r8.y
					        mad_pp r8.y, r8.z, -r8.y, c3.x
					        mul_pp r8.y, -r7.w, r8.y
					        cmp_pp r7.w, r7.w, c3.y, r8.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r8.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r7.w
					        mad_pp r5.xyz, r7, r7.w, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.y
					      rcp r2.y, r2.y
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r5.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 81 instruction slots used (6 texture, 75 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.100000001, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.200000003, -1, 9.99999975e-005, 0.181818187
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c5.x, c5.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c5.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c5
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov r5.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.w, c4.x
					      mov_pp r6.w, c4.x
					      mov r7, c3.y
					      rep i0
					        mul_pp r8.x, r7.w, c4.y
					        mad_pp r8.xy, r8.x, r3.xwzw, c2
					        mul_pp r8.zw, r3.xyyz, r8.xyxy
					        mad_pp r4.xy, r8, r3.yzzw, v0
					        texldl_pp r9, r4, s1
					        mov r10.z, c4.z
					        mad r4.xy, r4, c0.zwzw, r10.z
					        frc r8.xy, r4
					        add r4.xy, r4, -r8
					        add_pp r4.xy, r4, c3.x
					        cmp r8.xy, -r8.zwzw, c3.y, c3.x
					        cmp r8.zw, r8, -c3.y, -c3.x
					        add r8.xy, r8.zwzw, r8
					        mad_pp r4.xy, r8, c4.w, r4
					        mul r5.xy, r4, c0
					        texldl_pp r8, r5, s1
					        mad_pp r4.x, r7.w, c6.x, c6.y
					        add_pp r4.y, -r1.w, r8.w
					        mul r4.y, r4_abs.y, c4.z
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.y, r5.x
					        mad_sat_pp r5.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.x, r5.y, c5.x, c5.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r8.x, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.x, r4.x, c5.x, c5.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.x, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r5.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r5.y
					        mad_pp r6.xyz, r9, r5.y, r6
					        add_pp r6.w, r4.x, r6.w
					        mad_pp r7.xyz, r9, r4.x, r7
					        add r7.w, r7.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.z
					      rcp r2.y, r2.y
					      add_pp r2.z, r6.w, c6.z
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r6.w, c6.w
					      mul_sat_pp r2.w, r2.w, c6.w
					      mad_pp r3.yzw, r7.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r6.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 95 instruction slots used (8 texture, 87 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1608247
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1638988
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c4.x, c4.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c4.z
					    else
					      mov r3.xz, c4
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.zw, c5.x
					      mov r4, c3.y
					      rep i0
					        mul_pp r5.w, r4.w, c5.y
					        mad_pp r6.xy, r5.w, r2, c2
					        mad_pp r3.xy, r6, r1.zwzw, v0
					        texldl_pp r6, r3, s0
					        mad_pp r3.x, r4.w, c5.z, c5.w
					        add_pp r3.y, -r0.w, r6.w
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r5.w, r6.w, c3.y
					        mul r5.w, r3.y, r5.w
					        mad_sat_pp r7.x, r3_abs.x, r1.x, -c3.x
					        mad_pp r7.y, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.y, -r7.x, c3.x
					        mul_pp r7.x, -r6.w, r7.x
					        cmp_pp r6.w, r6.w, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r7.x, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.x, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r5.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r6.w
					        mad_pp r4.xyz, r6, r6.w, r4
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r4.w, r4.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.y
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.z
					      mad_pp r2.xyz, r5, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r4, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 72 instruction slots used (4 texture, 68 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.0666666701, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.13333334, -1, 9.99999975e-005, 0.125
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c5.x, c5.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c5.z
					    else
					      mov r3.xz, c5
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov r4.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.zw, c4.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.w, r5.w, c4.y
					        mad_pp r7.xy, r6.w, r2, c2
					        mul_pp r7.zw, r1, r7.xyxy
					        mad_pp r3.xy, r7, r1.zwzw, v0
					        texldl_pp r8, r3, s0
					        mov r9.z, c4.z
					        mad r3.xy, r3, c0.zwzw, r9.z
					        frc r7.xy, r3
					        add r3.xy, r3, -r7
					        add_pp r3.xy, r3, c3.x
					        cmp r7.xy, -r7.zwzw, c3.y, c3.x
					        cmp r7.zw, r7, -c3.y, -c3.x
					        add r7.xy, r7.zwzw, r7
					        mad_pp r3.xy, r7, c4.w, r3
					        mul r4.xy, r3, c0
					        texldl_pp r7, r4, s0
					        mad_pp r3.x, r5.w, c6.x, c6.y
					        add_pp r3.y, -r0.w, r7.w
					        mul r3.y, r3_abs.y, c4.z
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r4.x, r7.w, c3.y
					        mul r4.x, r3.y, r4.x
					        mad_sat_pp r4.y, r3_abs.x, r1.x, -c3.x
					        mad_pp r6.w, r4.y, c5.x, c5.y
					        mul_pp r4.y, r4.y, r4.y
					        mad_pp r4.y, r6.w, -r4.y, c3.x
					        mul_pp r4.y, r4.y, -r7.w
					        cmp_pp r4.y, r7.w, c3.y, r4.y
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r6.w, r3.x, c5.x, c5.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r6.w, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r4.x
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r4.y
					        mad_pp r5.xyz, r8, r4.y, r5
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r6.xyz, r8, r3.x, r6
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.w
					      mad_pp r2.xyz, r6, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r5, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 86 instruction slots used (6 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1707607
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1783282
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c4.x, c4.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c4
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4, s1
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r1.w, r7.w
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r8.x, r7.w, c3.y
					        mul r8.x, r4.y, r8.x
					        mad_sat_pp r8.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.z, r8.y, c4.x, c4.y
					        mul_pp r8.y, r8.y, r8.y
					        mad_pp r8.y, r8.z, -r8.y, c3.x
					        mul_pp r8.y, -r7.w, r8.y
					        cmp_pp r7.w, r7.w, c3.y, r8.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r8.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r7.w
					        mad_pp r5.xyz, r7, r7.w, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.y
					      rcp r2.y, r2.y
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r5.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 81 instruction slots used (6 texture, 75 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.0666666701, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.13333334, -1, 9.99999975e-005, 0.125
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c5.x, c5.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c5.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c5
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov r5.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.w, c4.x
					      mov_pp r6.w, c4.x
					      mov r7, c3.y
					      rep i0
					        mul_pp r8.x, r7.w, c4.y
					        mad_pp r8.xy, r8.x, r3.xwzw, c2
					        mul_pp r8.zw, r3.xyyz, r8.xyxy
					        mad_pp r4.xy, r8, r3.yzzw, v0
					        texldl_pp r9, r4, s1
					        mov r10.z, c4.z
					        mad r4.xy, r4, c0.zwzw, r10.z
					        frc r8.xy, r4
					        add r4.xy, r4, -r8
					        add_pp r4.xy, r4, c3.x
					        cmp r8.xy, -r8.zwzw, c3.y, c3.x
					        cmp r8.zw, r8, -c3.y, -c3.x
					        add r8.xy, r8.zwzw, r8
					        mad_pp r4.xy, r8, c4.w, r4
					        mul r5.xy, r4, c0
					        texldl_pp r8, r5, s1
					        mad_pp r4.x, r7.w, c6.x, c6.y
					        add_pp r4.y, -r1.w, r8.w
					        mul r4.y, r4_abs.y, c4.z
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.y, r5.x
					        mad_sat_pp r5.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.x, r5.y, c5.x, c5.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r8.x, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.x, r4.x, c5.x, c5.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.x, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r5.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r5.y
					        mad_pp r6.xyz, r9, r5.y, r6
					        add_pp r6.w, r4.x, r6.w
					        mad_pp r7.xyz, r9, r4.x, r7
					        add r7.w, r7.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.z
					      rcp r2.y, r2.y
					      add_pp r2.z, r6.w, c6.z
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r6.w, c6.w
					      mul_sat_pp r2.w, r2.w, c6.w
					      mad_pp r3.yzw, r7.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r6.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 95 instruction slots used (8 texture, 87 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="MainSubShader_SM5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1857911
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "Name"="FallbackSubShader_SM3" }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1941827
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0.800000012, 0.675000012
					    def c1, 0.5, 0.200000003, 0.075000003, 9.99999975e-005
					    def c2, -0.00999999978, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    mul r0, c0.xxyy, v1.zwxx
					    texldl_pp r0, r0, s0
					    add_sat_pp r0.w, r0.w, r0.w
					    mul_pp r1.x, r0.w, c0.z
					    mul r2, c0.xxyy, v1.xyxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.y, r2.w, r2.w
					    mul_pp r1.z, r1.y, c0.z
					    mul_pp r2.xyz, r1.z, r2
					    mul r3, c0.xxyy, v0.xyxx
					    texldl_pp r3, r3, s0
					    mad_pp r2.xyz, r3, r3.w, r2
					    mad_pp r0.xyz, r0, r1.x, r2
					    mul r2, c0.xxyy, v2.xyxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.x, r2.w, r2.w
					    mul_pp r1.z, r1.x, c0.w
					    mad_pp r0.xyz, r2, r1.z, r0
					    mul r2, c0.xxyy, v2.zwxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.z, r2.w, r2.w
					    mul_pp r1.w, r1.z, c0.w
					    mad_pp r0.xyz, r2, r1.w, r0
					    mul r2, c0.xxyy, v3.xyxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r1.w, r2.w, r2.w
					    mul_pp r2.w, r1.w, c1.x
					    mad_pp r0.xyz, r2, r2.w, r0
					    mul r2, c0.xxyy, v3.zwxx
					    texldl_pp r2, r2, s0
					    add_sat_pp r2.w, r2.w, r2.w
					    mul_pp r4.x, r2.w, c1.x
					    mad_pp r0.xyz, r2, r4.x, r0
					    mul r4, c0.xxyy, v4.xyxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r2.x, r4.w, r4.w
					    mul_pp r2.y, r2.x, c1.y
					    mad_pp r0.xyz, r4, r2.y, r0
					    mul r4, c0.xxyy, v4.zwxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r2.y, r4.w, r4.w
					    mul_pp r2.z, r2.y, c1.y
					    mad_pp r0.xyz, r4, r2.z, r0
					    mul r4, c0.xxyy, v5.xyxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r2.z, r4.w, r4.w
					    mul_pp r4.w, r2.z, c1.z
					    mad_pp r0.xyz, r4, r4.w, r0
					    mul r4, c0.xxyy, v5.zwxx
					    texldl_pp r4, r4, s0
					    add_sat_pp r4.w, r4.w, r4.w
					    mul_pp r5.x, r4.w, c1.z
					    mad_pp r0.xyz, r4, r5.x, r0
					    mad_pp r1.y, r1.y, c0.z, r3.w
					    mad_pp r0.w, r0.w, c0.z, r1.y
					    mad_pp r0.w, r1.x, c0.w, r0.w
					    mad_pp r0.w, r1.z, c0.w, r0.w
					    mad_pp r0.w, r1.w, c1.x, r0.w
					    mad_pp r0.w, r2.w, c1.x, r0.w
					    mad_pp r0.w, r2.x, c1.y, r0.w
					    mad_pp r0.w, r2.y, c1.y, r0.w
					    mad_pp r0.w, r2.z, c1.z, r0.w
					    mad_pp r0.w, r4.w, c1.z, r0.w
					    add_pp r0.w, r0.w, c1.w
					    rcp r0.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    add r0.w, r3.w, c2.x
					    cmp_pp oC0.xyz, r0.w, r0, r3
					    mov_pp oC0.w, r3.w
					
					// approximately 80 instruction slots used (22 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat7;
					float u_xlat8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat18 = u_xlat0.w + u_xlat0.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1 = u_xlat18 * 0.800000012;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat7 = u_xlat2.w + u_xlat2.w;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat13 = u_xlat7 * 0.800000012;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1) + u_xlat2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat1 = u_xlat2.w + u_xlat2.w;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat13 = u_xlat1 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat13) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat13 = u_xlat2.w + u_xlat2.w;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat19 = u_xlat13 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat19 = u_xlat2.w + u_xlat2.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = u_xlat19 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat20) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat20 = u_xlat2.w + u_xlat2.w;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.x = u_xlat20 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2.x = u_xlat4.w + u_xlat4.w;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat2.x * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat8) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat8 = u_xlat4.w + u_xlat4.w;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat14 = u_xlat8 * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat14 = u_xlat4.w + u_xlat4.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat22 = u_xlat14 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat22 = u_xlat4.w + u_xlat4.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat5 = u_xlat22 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat5) + u_xlat0.xyz;
					    u_xlat7 = u_xlat7 * 0.800000012 + u_xlat3.w;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat7;
					    u_xlat18 = u_xlat1 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat13 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat19 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat20 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat2.x * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat8 * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat14 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat22 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-05;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat18);
					    u_xlatb18 = u_xlat3.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target0.w = u_xlat3.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat7;
					float u_xlat8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat18 = u_xlat0.w + u_xlat0.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1 = u_xlat18 * 0.800000012;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat7 = u_xlat2.w + u_xlat2.w;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat13 = u_xlat7 * 0.800000012;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1) + u_xlat2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat1 = u_xlat2.w + u_xlat2.w;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat13 = u_xlat1 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat13) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat13 = u_xlat2.w + u_xlat2.w;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat19 = u_xlat13 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat19 = u_xlat2.w + u_xlat2.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = u_xlat19 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat20) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat20 = u_xlat2.w + u_xlat2.w;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.x = u_xlat20 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2.x = u_xlat4.w + u_xlat4.w;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat2.x * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat8) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat8 = u_xlat4.w + u_xlat4.w;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat14 = u_xlat8 * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat14 = u_xlat4.w + u_xlat4.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat22 = u_xlat14 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat4 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat22 = u_xlat4.w + u_xlat4.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat5 = u_xlat22 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat5) + u_xlat0.xyz;
					    u_xlat7 = u_xlat7 * 0.800000012 + u_xlat3.w;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat7;
					    u_xlat18 = u_xlat1 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat13 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat19 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat20 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat2.x * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat8 * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat14 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat22 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-05;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat18);
					    u_xlatb18 = u_xlat3.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target0.w = u_xlat3.w;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1997539
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0.25, 0, 0, 0
					    def c2, 0.75, -0.75, 1, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    mov r0.xy, c2
					    mad r1, c0.xyxy, r0.xxxy, v0.xyxy
					    mul r2, r1.xyxx, c2.zzww
					    mul r1, r1.zwxx, c2.zzww
					    texldl_pp r1, r1, s0
					    texldl_pp r2, r2, s0
					    mad r0, c0.xyxy, -r0.xxxy, v0.xyxy
					    mul r3, r0.xyxx, c2.zzww
					    mul r0, r0.zwxx, c2.zzww
					    texldl_pp r0, r0, s0
					    texldl_pp r3, r3, s0
					    add_pp r2, r2, r3
					    add_pp r1, r1, r2
					    add_pp r0, r0, r1
					    mul_pp oC0, r0, c1.x
					
					// approximately 19 instruction slots used (8 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat2 + u_xlat0;
					    SV_Target0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat2 + u_xlat0;
					    SV_Target0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2083256
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0.800000012, 0.600000024
					    def c1, 0.400000006, 0.25, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    mul r0, c0.xxyy, v1.zwzz
					    texldl_pp r0, r0, s0
					    mul r1, c0.xxyy, v0.xyxx
					    texldl_pp r1, r1, s0
					    cmp_pp r0.x, -r1.w, r1.w, c0.y
					    mov_pp oC0.yw, r1.w
					    min_pp r1.x, r0.w, r0.x
					    mul r0, c0.xxyy, v1.xyzz
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.w, r1.x
					    mul r0, c0.xxyy, v2.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.z
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v2.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.z
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v3.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.w
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v3.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c0.w
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v4.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.x
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v4.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.x
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v5.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.y
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v5.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.w, c1.y
					    min_pp oC0.xz, r0.x, r1.x
					
					// approximately 53 instruction slots used (22 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.x = min(u_xlat1.w, 0.0);
					    SV_Target0.yw = u_xlat1.ww;
					    u_xlat0.x = min(u_xlat0.w, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.w);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.x = min(u_xlat1.w, 0.0);
					    SV_Target0.yw = u_xlat1.ww;
					    u_xlat0.x = min(u_xlat0.w, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.w);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.w * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2114130
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _Offsets;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0.800000012, 0.600000024
					    def c1, 0.400000006, 0.25, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    mul r0, c0.xxyy, v1.zwzz
					    texldl_pp r0, r0, s0
					    mul r1, c0.xxyy, v0.xyxx
					    texldl_pp r1, r1, s0
					    cmp_pp r0.y, -r1.x, r1.x, c0.y
					    mov_pp oC0.yw, r1.y
					    min_pp r1.x, r0.x, r0.y
					    mul r0, c0.xxyy, v1.xyzz
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v2.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.z
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v2.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.z
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v3.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.w
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v3.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c0.w
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v4.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v4.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.x
					    min_pp r2.x, r0.x, r1.x
					    mul r0, c0.xxyy, v5.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.y
					    min_pp r1.x, r0.x, r2.x
					    mul r0, c0.xxyy, v5.zwxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.x, r0.x, c1.y
					    min_pp oC0.xz, r0.x, r1.x
					
					// approximately 53 instruction slots used (22 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = min(u_xlat1.x, 0.0);
					    SV_Target0.yw = u_xlat1.yy;
					    u_xlat0.x = min(u_xlat0.x, u_xlat2);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = min(u_xlat1.x, 0.0);
					    SV_Target0.yw = u_xlat1.yy;
					    u_xlat0.x = min(u_xlat0.x, u_xlat2);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat1.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.800000012;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.600000024;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.400000006;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    u_xlat0.x = min(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat2 = u_xlat1.x * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat2), u_xlat0.xx);
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2205751
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurParams;
					//   float4 _BoostParams;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _MainTex_TexelSize  c1       1
					//   _BlurParams         c2       1
					//   _BoostParams        c3       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//
					
					    ps_3_0
					    def c4, -0.25, 0.25, 9.99999975e-006, 1
					    def c5, 1, -1, 0.5, 0
					    def c6, 0.300000012, 0.589999974, 0.109999999, 0
					    def c7, 5, 1, -3, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xy, c4
					    mad_pp r1, c1.xyxy, r0.xyyy, v1.xyxy
					    texld_pp r2, r1, s1
					    texld_pp r1, r1.zwzw, s1
					    mad r0.z, c0.x, r1.x, c0.y
					    rcp_pp r0.z, r0.z
					    mad r0.w, c0.x, r2.x, c0.y
					    rcp_pp r0.w, r0.w
					    add r1.x, r0.w, c4.z
					    add_pp r0.w, r0.w, -c2.z
					    rcp r1.x, r1.x
					    mul r1.y, r0_abs.w, c2.x
					    cmp r0.w, r0.w, c5.x, c5.y
					    mad_sat r1.x, r1.y, r1.x, -c2.w
					    mul_pp r1.x, r0.w, r1.x
					    add r0.w, r0.z, c4.z
					    add_pp r0.z, r0.z, -c2.z
					    rcp r0.w, r0.w
					    mul r2.x, r0_abs.z, c2.x
					    cmp r0.z, r0.z, c5.x, c5.y
					    mad_sat r0.w, r2.x, r0.w, -c2.w
					    mul_pp r1.y, r0.w, r0.z
					    mad_pp r0, c1.xyxy, r0.yxxx, v1.xyxy
					    texld_pp r2, r0, s1
					    texld_pp r0, r0.zwzw, s1
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp_pp r0.x, r0.x
					    mad r0.y, c0.x, r2.x, c0.y
					    rcp_pp r0.y, r0.y
					    add r0.z, r0.y, c4.z
					    add_pp r0.y, r0.y, -c2.z
					    rcp r0.z, r0.z
					    mul r0.w, r0_abs.y, c2.x
					    cmp r0.y, r0.y, c5.x, c5.y
					    mad_sat r0.z, r0.w, r0.z, -c2.w
					    mul_pp r1.z, r0.z, r0.y
					    add r0.y, r0.x, c4.z
					    add_pp r0.x, r0.x, -c2.z
					    rcp r0.y, r0.y
					    mul r0.z, r0_abs.x, c2.x
					    cmp r0.x, r0.x, c5.x, c5.y
					    mad_sat r0.y, r0.z, r0.y, -c2.w
					    mul_pp r1.w, r0.y, r0.x
					    add r0.xy, -r1_abs.ywzw, r1_abs.xzzw
					    cmp_pp r0.xy, r0, r1.ywzw, r1.xzzw
					    add r0.z, -r0_abs.y, r0_abs.x
					    cmp_pp r0.x, r0.z, r0.y, r0.x
					    cmp_pp r0.y, r0.x, c3.y, c3.x
					    mul_pp r0.y, r0.y, r0.x
					    mov_pp oC0.w, r0.x
					    mul_pp r2, r1_abs, r1_abs
					    mul_pp r0.xzw, r1_abs.xyyz, r2.xyyz
					    mad_pp r0.xz, r0.x, c5.yyxw, r0.z
					    mad_pp r0.xz, r0.w, c5.xyyw, r0
					    mad_pp r0.xz, r2.w, -r1_abs.w, r0
					    min_pp r1.xy, r0.xzzw, c4.w
					    mul_pp r0.xz, r1.xyyw, c1.xyyw
					    mad r1.xy, r0.xzzw, c5.z, v0
					    mov r1.zw, c5.w
					    texldl_pp r1, r1, s0
					    mul_pp r0.xyz, r0.y, r1
					    dp3_pp r0.w, r1, c6
					    add r0.w, r0.w, -c3.z
					    cmp_pp r0.xyz, r0.w, r0, c5.w
					    add_pp r0.xyz, r0, r1
					    max_pp r1.x, r0.y, r0.z
					    max_pp r2.x, r0.x, r1.x
					    rcp_pp r0.w, r2.x
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.w, r2.x, -c7.x, c7.y
					    add r2.xy, -r2.x, c7.yzzw
					    mul_pp r1.xyz, r0.w, r1
					    rcp r0.w, r2.y
					    mul_pp r1.xyz, r0.w, r1
					    cmp_pp oC0.xyz, r2.x, r0, r1
					
					// approximately 76 instruction slots used (6 texture, 70 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlat6 = u_xlat3 + (-_BlurParams.z);
					    u_xlat6 = abs(u_xlat6) * _BlurParams.x;
					    u_xlat9 = u_xlat3 + 9.99999975e-06;
					    u_xlatb3 = u_xlat3<_BlurParams.z;
					    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
					    u_xlat6 = u_xlat6 / u_xlat9;
					    u_xlat6 = u_xlat6 + (-_BlurParams.w);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.x = u_xlat6 * u_xlat3;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0.x = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0.x) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat1.y = u_xlat3 * u_xlat0.x;
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlat6 = u_xlat3 + (-_BlurParams.z);
					    u_xlat6 = abs(u_xlat6) * _BlurParams.x;
					    u_xlat9 = u_xlat3 + 9.99999975e-06;
					    u_xlatb3 = u_xlat3<_BlurParams.z;
					    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
					    u_xlat6 = u_xlat6 / u_xlat9;
					    u_xlat6 = u_xlat6 + (-_BlurParams.w);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.z = u_xlat6 * u_xlat3;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0.x = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0.x) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat1.w = u_xlat3 * u_xlat0.x;
					    u_xlatb0.xy = lessThan(abs(u_xlat1.xzxx), abs(u_xlat1.ywyy)).xy;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat1.y;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.z : u_xlat1.w;
					    u_xlatb6 = abs(u_xlat0.x)<abs(u_xlat0.y);
					    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat0.y;
					    u_xlatb3 = u_xlat0.x<0.0;
					    u_xlat3 = (u_xlatb3) ? _BoostParams.x : _BoostParams.y;
					    u_xlat3 = u_xlat3 * u_xlat0.x;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xzw = abs(u_xlat1.xyz) * u_xlat2.xyz;
					    u_xlat0.xz = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.zz;
					    u_xlat0.xz = u_xlat0.ww * vec2(1.0, -1.0) + u_xlat0.xz;
					    u_xlat0.xz = (-u_xlat2.ww) * abs(u_xlat1.ww) + u_xlat0.xz;
					    u_xlat0.xz = min(u_xlat0.xz, vec2(1.0, 1.0));
					    u_xlat0.xz = u_xlat0.xz * _MainTex_TexelSize.xy;
					    u_xlat0.xz = u_xlat0.xz * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xz, 0.0);
					    u_xlat0.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlat6 = u_xlat3 + (-_BlurParams.z);
					    u_xlat6 = abs(u_xlat6) * _BlurParams.x;
					    u_xlat9 = u_xlat3 + 9.99999975e-06;
					    u_xlatb3 = u_xlat3<_BlurParams.z;
					    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
					    u_xlat6 = u_xlat6 / u_xlat9;
					    u_xlat6 = u_xlat6 + (-_BlurParams.w);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.x = u_xlat6 * u_xlat3;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0.x = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0.x) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat1.y = u_xlat3 * u_xlat0.x;
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlat6 = u_xlat3 + (-_BlurParams.z);
					    u_xlat6 = abs(u_xlat6) * _BlurParams.x;
					    u_xlat9 = u_xlat3 + 9.99999975e-06;
					    u_xlatb3 = u_xlat3<_BlurParams.z;
					    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
					    u_xlat6 = u_xlat6 / u_xlat9;
					    u_xlat6 = u_xlat6 + (-_BlurParams.w);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.z = u_xlat6 * u_xlat3;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0.x = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0.x) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat1.w = u_xlat3 * u_xlat0.x;
					    u_xlatb0.xy = lessThan(abs(u_xlat1.xzxx), abs(u_xlat1.ywyy)).xy;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat1.y;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.z : u_xlat1.w;
					    u_xlatb6 = abs(u_xlat0.x)<abs(u_xlat0.y);
					    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat0.y;
					    u_xlatb3 = u_xlat0.x<0.0;
					    u_xlat3 = (u_xlatb3) ? _BoostParams.x : _BoostParams.y;
					    u_xlat3 = u_xlat3 * u_xlat0.x;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xzw = abs(u_xlat1.xyz) * u_xlat2.xyz;
					    u_xlat0.xz = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.zz;
					    u_xlat0.xz = u_xlat0.ww * vec2(1.0, -1.0) + u_xlat0.xz;
					    u_xlat0.xz = (-u_xlat2.ww) * abs(u_xlat1.ww) + u_xlat0.xz;
					    u_xlat0.xz = min(u_xlat0.xz, vec2(1.0, 1.0));
					    u_xlat0.xz = u_xlat0.xz * _MainTex_TexelSize.xy;
					    u_xlat0.xz = u_xlat0.xz * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xz, 0.0);
					    u_xlat0.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2235524
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   float4 _BlurParams;
					//   float4 _BoostParams;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _MainTex_TexelSize  c1       1
					//   _BlurCoe            c2       1
					//   _BlurParams         c3       1
					//   _BoostParams        c4       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//
					
					    ps_3_0
					    def c5, -0.25, 0.25, -1, 0
					    def c6, -1, 1, 0.5, 5
					    def c7, 0.300000012, 0.589999974, 0.109999999, 0
					    def c8, 1, -3, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xy, c5
					    mad_pp r1, c1.xyxy, r0.xyyy, v1.xyxy
					    texld_pp r2, r1, s1
					    texld_pp r1, r1.zwzw, s1
					    mad r0.z, c0.x, r1.x, c0.y
					    rcp_pp r0.z, r0.z
					    mad r0.w, c0.x, r2.x, c0.y
					    rcp_pp r0.w, r0.w
					    add r1.x, r0.w, -c2.z
					    mad_pp r1.yz, c3.xzxw, r0.w, c3.xwyw
					    max_pp r0.w, r1.z, c5.z
					    mov_sat_pp r1.y, r1.y
					    min_pp r1.z, r0.w, c5.w
					    cmp_pp r1.x, r1.x, r1.y, r1.z
					    add r0.w, r0.z, -c2.z
					    mad_pp r2.xy, c3.zxzw, r0.z, c3.wyzw
					    max_pp r0.z, r2.y, c5.z
					    mov_sat_pp r2.x, r2.x
					    min_pp r2.y, r0.z, c5.w
					    cmp_pp r1.y, r0.w, r2.x, r2.y
					    mad_pp r0, c1.xyxy, r0.yxxx, v1.xyxy
					    texld_pp r2, r0, s1
					    texld_pp r0, r0.zwzw, s1
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp_pp r0.x, r0.x
					    mad r0.y, c0.x, r2.x, c0.y
					    rcp_pp r0.y, r0.y
					    add r0.z, r0.y, -c2.z
					    mad_pp r0.yw, c3.xzzx, r0.y, c3.xwzy
					    max_pp r2.x, r0.w, c5.z
					    mov_sat_pp r0.y, r0.y
					    min_pp r0.w, r2.x, c5.w
					    cmp_pp r1.z, r0.z, r0.y, r0.w
					    add r0.y, r0.x, -c2.z
					    mad_pp r0.xz, c3.zyxw, r0.x, c3.wyyw
					    max_pp r2.x, r0.z, c5.z
					    mov_sat_pp r0.x, r0.x
					    min_pp r0.z, r2.x, c5.w
					    cmp_pp r1.w, r0.y, r0.x, r0.z
					    add r0.xy, -r1_abs.ywzw, r1_abs.xzzw
					    cmp_pp r0.xy, r0, r1.ywzw, r1.xzzw
					    add r0.z, -r0_abs.y, r0_abs.x
					    cmp_pp r0.x, r0.z, r0.y, r0.x
					    cmp_pp r0.y, r0.x, c4.y, c4.x
					    mul_pp r0.y, r0.y, r0.x
					    mov_pp oC0.w, r0.x
					    mul_pp r2, r1_abs, r1_abs
					    mul_pp r0.xzw, r1_abs.xyyz, r2.xyyz
					    mad_pp r0.xz, r0.x, c6.xyyw, r0.z
					    mad_pp r0.xz, r0.w, c6.yyxw, r0
					    mad_pp r0.xz, r2.w, -r1_abs.w, r0
					    min_pp r1.xy, r0.xzzw, -c5.z
					    mul_pp r0.xz, r1.xyyw, c1.xyyw
					    mad r1.xy, r0.xzzw, c6.z, v0
					    mov r1.zw, c5.w
					    texldl_pp r1, r1, s0
					    mul_pp r0.xyz, r0.y, r1
					    dp3_pp r0.w, r1, c7
					    add r0.w, r0.w, -c4.z
					    cmp_pp r0.xyz, r0.w, r0, c5.w
					    add_pp r0.xyz, r0, r1
					    max_pp r1.x, r0.y, r0.z
					    max_pp r2.x, r0.x, r1.x
					    rcp_pp r0.w, r2.x
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.w, r2.x, -c6.w, c6.y
					    add r2.xy, -r2.x, c8
					    mul_pp r1.xyz, r0.w, r1
					    rcp r0.w, r2.y
					    mul_pp r1.xyz, r0.w, r1
					    cmp_pp oC0.xyz, r2.x, r0, r1
					
					// approximately 72 instruction slots used (6 texture, 66 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlatb6 = u_xlat3.x<_BlurCoe.z;
					    u_xlat3.xz = _BlurParams.zx * u_xlat3.xx + _BlurParams.wy;
					    u_xlat9 = max(u_xlat3.z, -1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9 = min(u_xlat9, 0.0);
					    u_xlat1.x = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat1.y = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlatb6 = u_xlat3.x<_BlurCoe.z;
					    u_xlat3.xz = _BlurParams.zx * u_xlat3.xx + _BlurParams.wy;
					    u_xlat9 = max(u_xlat3.z, -1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9 = min(u_xlat9, 0.0);
					    u_xlat1.z = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat1.w = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    u_xlatb0.xy = lessThan(abs(u_xlat1.xzxx), abs(u_xlat1.ywyy)).xy;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat1.y;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.z : u_xlat1.w;
					    u_xlatb6 = abs(u_xlat0.x)<abs(u_xlat0.y);
					    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat0.y;
					    u_xlatb3 = u_xlat0.x<0.0;
					    u_xlat3.x = (u_xlatb3) ? _BoostParams.x : _BoostParams.y;
					    u_xlat3.x = u_xlat3.x * u_xlat0.x;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xzw = abs(u_xlat1.xyz) * u_xlat2.xyz;
					    u_xlat0.xz = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.zz;
					    u_xlat0.xz = u_xlat0.ww * vec2(1.0, -1.0) + u_xlat0.xz;
					    u_xlat0.xz = (-u_xlat2.ww) * abs(u_xlat1.ww) + u_xlat0.xz;
					    u_xlat0.xz = min(u_xlat0.xz, vec2(1.0, 1.0));
					    u_xlat0.xz = u_xlat0.xz * _MainTex_TexelSize.xy;
					    u_xlat0.xz = u_xlat0.xz * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xz, 0.0);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlatb6 = u_xlat3.x<_BlurCoe.z;
					    u_xlat3.xz = _BlurParams.zx * u_xlat3.xx + _BlurParams.wy;
					    u_xlat9 = max(u_xlat3.z, -1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9 = min(u_xlat9, 0.0);
					    u_xlat1.x = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat1.y = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlatb6 = u_xlat3.x<_BlurCoe.z;
					    u_xlat3.xz = _BlurParams.zx * u_xlat3.xx + _BlurParams.wy;
					    u_xlat9 = max(u_xlat3.z, -1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9 = min(u_xlat9, 0.0);
					    u_xlat1.z = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat1.w = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    u_xlatb0.xy = lessThan(abs(u_xlat1.xzxx), abs(u_xlat1.ywyy)).xy;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat1.y;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.z : u_xlat1.w;
					    u_xlatb6 = abs(u_xlat0.x)<abs(u_xlat0.y);
					    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat0.y;
					    u_xlatb3 = u_xlat0.x<0.0;
					    u_xlat3.x = (u_xlatb3) ? _BoostParams.x : _BoostParams.y;
					    u_xlat3.x = u_xlat3.x * u_xlat0.x;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2 = abs(u_xlat1) * abs(u_xlat1);
					    u_xlat0.xzw = abs(u_xlat1.xyz) * u_xlat2.xyz;
					    u_xlat0.xz = u_xlat0.xx * vec2(-1.0, 1.0) + u_xlat0.zz;
					    u_xlat0.xz = u_xlat0.ww * vec2(1.0, -1.0) + u_xlat0.xz;
					    u_xlat0.xz = (-u_xlat2.ww) * abs(u_xlat1.ww) + u_xlat0.xz;
					    u_xlat0.xz = min(u_xlat0.xz, vec2(1.0, 1.0));
					    u_xlat0.xz = u_xlat0.xz * _MainTex_TexelSize.xy;
					    u_xlat0.xz = u_xlat0.xz * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xz, 0.0);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb9 = u_xlat9<_BoostParams.z;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat9 = max(u_xlat9, u_xlat0.x);
					    u_xlat1.x = float(1.0) / u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat10 = (-u_xlat9) * 5.0 + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = (-u_xlat9) + -3.0;
					    u_xlatb9 = 1.0<u_xlat9;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat10);
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2329314
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurParams;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _BlurParams         c1       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c2, 9.99999975e-006, 1, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp_pp r0.x, r0.x
					    add r0.y, r0.x, c2.x
					    add_pp r0.x, r0.x, -c1.z
					    rcp r0.y, r0.y
					    mul r0.z, r0_abs.x, c1.x
					    cmp r0.x, r0.x, c2.y, c2.z
					    mad_sat r0.y, r0.z, r0.y, -c1.w
					    mul_pp r0.x, r0.y, r0.x
					    mov_pp r0.w, -r0.x
					    mov r0.yz, c2.xwyw
					    cmp_pp oC0, r0.x, r0.yxxz, r0.wwyz
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _BlurParams;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0 = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.yz = vec2(u_xlat3) * u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _BlurParams;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3 = u_xlat0.x + (-_BlurParams.z);
					    u_xlat3 = abs(u_xlat3) * _BlurParams.x;
					    u_xlat6 = u_xlat0.x + 9.99999975e-06;
					    u_xlatb0 = u_xlat0.x<_BlurParams.z;
					    u_xlat0.x = (u_xlatb0) ? -1.0 : 1.0;
					    u_xlat3 = u_xlat3 / u_xlat6;
					    u_xlat3 = u_xlat3 + (-_BlurParams.w);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.yz = vec2(u_xlat3) * u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2376644
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   float4 _BlurParams;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _BlurCoe            c1       1
					//   _BlurParams         c2       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c3, -1, 0, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp_pp r0.x, r0.x
					    add r0.y, r0.x, -c1.z
					    mad_pp r0.xz, c2.zyxw, r0.x, c2.wyyw
					    max_pp r1.x, r0.z, c3.x
					    mov_sat_pp r0.x, r0.x
					    min_pp r0.z, r1.x, c3.y
					    cmp_pp r0.x, r0.y, r0.x, r0.z
					    mov_pp r0.w, -r0.x
					    mov r0.yz, c3
					    cmp_pp oC0, r0.x, r0.yxxz, r0.wwyz
					
					// approximately 12 instruction slots used (1 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 unused_0_3[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat0.yz = (bool(u_xlatb3)) ? vec2(u_xlat6) : u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 unused_0_3[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlatb3 = u_xlat0.x<_BlurCoe.z;
					    u_xlat0.xz = _BlurParams.zx * u_xlat0.xx + _BlurParams.wy;
					    u_xlat6 = max(u_xlat0.z, -1.0);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = min(u_xlat6, 0.0);
					    u_xlat0.yz = (bool(u_xlatb3)) ? vec2(u_xlat6) : u_xlat0.xx;
					    u_xlatb1 = u_xlat0.z<0.0;
					    u_xlat2.xy = (-u_xlat0.zz);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2453067
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, -0, -1, -2, -3
					    def c3, 0, -4, 1, 0
					    def c4, -5, -6, -7, -8
					    def c5, 1, 0, 0.0606060587, 0.165000007
					    def c6, 0.0128836902, 0.541606903, 0, 0
					    def c7, -0.919279814, -0.0952936411, 0.7596578, 0.192273796
					    def c8, -0.141320005, -0.288024187, -0.524933279, 0.777763784
					    def c9, -0.587169528, -0.740356922, 0.320219606, -0.644226789
					    def c10, 0.855321407, -0.392098188, 0.582770824, 0.759929717
					    defi i0, 9, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c5.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r1.xy, r0.w, c1
					    cmp_pp r1.x, r0.w, r1.y, -r1.x
					    if_lt r1.x, c5.z
					    else
					      mul_pp r1.x, r1.x, c5.w
					      mul_pp r1.xy, r1.x, c0
					      mov r2.zw, c5.y
					      mov_pp r3.xyz, r0
					      mov_pp r1.z, c5.x
					      mov r4.x, c5.y
					      rep i0
					        add r5, r4.x, c2
					        add r6, r4.x, c4
					        add r4.xy, r4.x, c3.zyzw
					        cmp_pp r4.zw, -r5_abs.x, c6.xyxy, c6.z
					        cmp_pp r4.zw, -r5_abs.y, c7.xyxy, r4
					        cmp_pp r4.zw, -r5_abs.z, c7, r4
					        cmp_pp r4.zw, -r5_abs.w, c8.xyxy, r4
					        cmp_pp r4.yz, -r4_abs.y, c8.xzww, r4.xzww
					        cmp_pp r4.yz, -r6_abs.x, c9.xxyw, r4
					        cmp_pp r4.yz, -r6_abs.y, c9.xzww, r4
					        cmp_pp r4.yz, -r6_abs.z, c10.xxyw, r4
					        cmp_pp r4.yz, -r6_abs.w, c10.xzww, r4
					        mad_pp r2.xy, r4.yzzw, r1, v0
					        texldl_pp r5, r2, s0
					        mul_pp r1.w, r0.w, r5.w
					        max_pp r2.x, r1.w, c5.y
					        mad_pp r3.xyz, r5, r2.x, r3
					        add_pp r1.z, r1.z, r2.x
					      endrep
					      rcp r1.x, r1.z
					      mul_pp r0.xyz, r1.x, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 43 instruction slots used (4 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					int u_xlati13;
					float u_xlat14;
					bool u_xlatb14;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat5.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat5.x) : u_xlat5.y;
					    u_xlatb5 = u_xlat1.x<0.0606060587;
					    if(u_xlatb5){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat9 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat14 = u_xlat0.w * u_xlat3.w;
					        u_xlat14 = max(u_xlat14, 0.0);
					        u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat14) + u_xlat2.xyz;
					        u_xlat9 = u_xlat9 + u_xlat14;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					int u_xlati13;
					float u_xlat14;
					bool u_xlatb14;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat5.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat5.x) : u_xlat5.y;
					    u_xlatb5 = u_xlat1.x<0.0606060587;
					    if(u_xlatb5){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat9 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat14 = u_xlat0.w * u_xlat3.w;
					        u_xlat14 = max(u_xlat14, 0.0);
					        u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat14) + u_xlat2.xyz;
					        u_xlat9 = u_xlat9 + u_xlat14;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat9);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, -0, -1, -2, -3
					    def c3, -5, -6, -7, -8
					    def c4, 0, -4, 1, -0.5
					    def c5, 1, 0, 0.0606060587, 0.165000007
					    def c6, -0.919279814, -0.0952936411, 0.7596578, 0.192273796
					    def c7, -0.141320005, -0.288024187, -0.524933279, 0.777763784
					    def c8, -0.587169528, -0.740356922, 0.320219606, -0.644226789
					    def c9, 0.855321407, -0.392098188, 0.582770824, 0.759929717
					    def c10, 0.0128836902, 0.541606903, 0, 0
					    defi i0, 9, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c5.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r1.xy, r0.w, c1
					    cmp_pp r1.x, r0.w, r1.y, -r1.x
					    if_lt r1.x, c5.z
					    else
					      mul_pp r1.x, r1.x, c5.w
					      mul_pp r1.xy, r1.x, c0
					      mov_pp r2.zw, c5.y
					      mov_pp r3.zw, c5.y
					      mov_pp r4.xyz, r0
					      mov_pp r1.z, c5.x
					      mov r5.x, c5.y
					      rep i0
					        add r6, r5.x, c2
					        add r7, r5.x, c3
					        add r5.xy, r5.x, c4.zyzw
					        cmp r8, -r6_abs.x, c10.xyxy, c10.z
					        cmp r8, -r6_abs.y, c6.xyxy, r8
					        cmp r8, -r6_abs.z, c6.zwzw, r8
					        cmp r6, -r6_abs.w, c7.xyxy, r8
					        cmp r6, -r5_abs.y, c7.zwzw, r6
					        cmp r6, -r7_abs.x, c8.xyxy, r6
					        cmp r6, -r7_abs.y, c8.zwzw, r6
					        cmp r6, -r7_abs.z, c9.xyxy, r6
					        cmp r6, -r7_abs.w, c9.zwzw, r6
					        mad_pp r2.xy, r6, r1, v0
					        texldl_pp r7, r2, s0
					        mov r1.w, c4.w
					        mad r2.xy, r2, c0.zwzw, r1.w
					        frc r5.yz, r2.xxyw
					        add r2.xy, r2, -r5.yzzw
					        add_pp r2.xy, r2, c5.x
					        cmp r5.yz, -r6.xzww, c5.y, c5.x
					        cmp r6.xy, r6.zwzw, -c5.y, -c5.x
					        add r5.yz, r5, r6.xxyw
					        mad_pp r2.xy, r5.yzzw, -c4.w, r2
					        mul r3.xy, r2, c0
					        texldl_pp r6, r3, s0
					        mul_pp r1.w, r0.w, r6.w
					        max_pp r2.x, r1.w, c5.y
					        mad_pp r4.xyz, r7, r2.x, r4
					        add_pp r1.z, r1.z, r2.x
					      endrep
					      rcp r1.x, r1.z
					      mul_pp r0.xyz, r1.x, r4
					    endif
					    mov_pp oC0, r0
					
					// approximately 56 instruction slots used (6 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					ivec2 u_xlati5;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat13;
					vec2 u_xlat15;
					ivec2 u_xlati15;
					int u_xlati19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat7.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat7.x) : u_xlat7.y;
					    u_xlatb7 = u_xlat1.x<0.0606060587;
					    if(u_xlatb7){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat13 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat3.xy = u_xlat3.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat3.xy = floor(u_xlat3.xy);
					        u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					        u_xlati15.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati5.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati15.xy = (-u_xlati15.xy) + u_xlati5.xy;
					        u_xlat15.xy = vec2(u_xlati15.xy);
					        u_xlat3.xy = u_xlat15.xy * vec2(0.5, 0.5) + u_xlat3.xy;
					        u_xlat3.xy = u_xlat3.xy * _MainTex_TexelSize.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat20 = u_xlat0.w * u_xlat3.w;
					        u_xlat20 = max(u_xlat20, 0.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
					        u_xlat13 = u_xlat13 + u_xlat20;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat13);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					ivec2 u_xlati5;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat13;
					vec2 u_xlat15;
					ivec2 u_xlati15;
					int u_xlati19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat0.w<0.0;
					    u_xlat7.xy = u_xlat0.ww * _BlurCoe.xy;
					    u_xlat1.x = (u_xlatb1) ? (-u_xlat7.x) : u_xlat7.y;
					    u_xlatb7 = u_xlat1.x<0.0606060587;
					    if(u_xlatb7){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.x = u_xlat1.x * 0.165000007;
					    u_xlat1.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat13 = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat3.xy = u_xlat3.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat3.xy = floor(u_xlat3.xy);
					        u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					        u_xlati15.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati5.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati15.xy = (-u_xlati15.xy) + u_xlati5.xy;
					        u_xlat15.xy = vec2(u_xlati15.xy);
					        u_xlat3.xy = u_xlat15.xy * vec2(0.5, 0.5) + u_xlat3.xy;
					        u_xlat3.xy = u_xlat3.xy * _MainTex_TexelSize.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat20 = u_xlat0.w * u_xlat3.w;
					        u_xlat20 = max(u_xlat20, 0.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
					        u_xlat13 = u_xlat13 + u_xlat20;
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat13);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2517684
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, -2, 3, 0.5, 0.00999999978
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -5, -37, -6, -38
					    def c5, -7, -39, -8, -40
					    def c6, -2, -34, -12, -44
					    def c7, -28, -29, -30, -31
					    def c8, -0, -32, -10, -42
					    def c9, -1, -33, -11, -43
					    def c10, -3, -35, -13, -45
					    def c11, -16, -17, -18, -19
					    def c12, -20, -21, -22, -23
					    def c13, -24, -25, -26, -27
					    def c14, -4, -14, -15, -36
					    def c15, -9, -41, -46, -47
					    def c16, 0.660000026, 0.330000013, 9.99999975e-005, 0.0408163257
					    def c17, 0, 0.991439998, 0.13053, 0
					    def c18, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c19, -0.13053, 0.991439998, -0.382679999, 0.923879981
					    def c20, -0.608759999, 0.793349981, -0.793349981, 0.608759999
					    def c21, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c22, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c23, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c24, -0, -1, -2, -3
					    def c25, -4, -5, -6, -7
					    def c26, -8, -9, -10, -11
					    def c27, -12, -13, -14, -15
					    def c28, -32, -33, -34, -35
					    def c29, -36, -37, -38, -39
					    def c30, -40, -41, -42, -43
					    def c31, -44, -45, -46, -47
					    defi i0, 48, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c2.x, c2.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.xy, r1, c1
					    mul_pp r1.zw, r1.xyxy, c2.z
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c2.w
					      mov_pp oC0.xyz, r0
					      mov_pp oC0.w, c3.y
					    else
					      mul_pp r1.zw, r2.x, c0.xyxy
					      cmp_pp r2.y, r0.w, c3.y, -r0.w
					      max_pp r2.z, r0.w, c3.y
					      mul_pp r3.xyz, r0, r2.y
					      mul_pp r4.xyz, r0, r2.z
					      mad_pp r1.xy, r1, c2.z, c2.w
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mov_pp r5.zw, c3.y
					      mov_pp r6.xyz, r3
					      mov_pp r7.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c3.y
					      rep i0
					        add r8, r3.w, c8
					        add r9, r3.w, c9
					        add r10, r3.w, c6
					        add r11, r3.w, c10
					        add r12, r3.w, c14.yzxw
					        add r13, r3.w, c5
					        add r14, r3.w, c15
					        add r15, r3.w, c11
					        add r16, r3.w, c12
					        add r17, r3.w, c13
					        add r18, r3.w, c7
					        add r19, r3.w, c4
					        mov r12.xy, r12_abs
					        mov r14.zw, r14_abs
					        cmp_pp r20.xy, -r8_abs.x, c17.yzzw, c17.w
					        cmp_pp r20.xy, -r9_abs.x, c18, r20
					        cmp_pp r20.xy, -r10_abs.x, c18.zwzw, r20
					        cmp_pp r20.xy, -r11_abs.x, c18.wzzw, r20
					        cmp_pp r20.xy, -r12_abs.z, c18.yxzw, r20
					        cmp_pp r20.xy, -r19_abs.x, c17.zyzw, r20
					        cmp_pp r19.xz, -r19_abs.z, c19.xyyw, r20.xyyw
					        cmp_pp r19.xz, -r13_abs.x, c19.zyww, r19
					        cmp_pp r13.xz, -r13_abs.z, c20.xyyw, r19
					        cmp_pp r13.xz, -r14_abs.x, c20.zyww, r13
					        cmp_pp r8.xz, -r8_abs.z, -c19.wyzw, r13
					        cmp_pp r8.xz, -r9_abs.z, -c19.yyxw, r8
					        cmp_pp r8.xz, -r10_abs.z, -c17.yyzw, r8
					        cmp_pp r8.xz, -r11_abs.z, -c18.xyyw, r8
					        cmp_pp r8.xz, -r12.x, -c18.zyww, r8
					        cmp_pp r8.xz, -r12.y, -c18.wyzw, r8
					        cmp_pp r8.xz, -r15_abs.x, -c18.yyxw, r8
					        cmp_pp r8.xz, -r15_abs.y, -c17.zyyw, r8
					        cmp_pp r8.xz, -r15_abs.z, -c19.xyyw, r8
					        cmp_pp r8.xz, -r15_abs.w, -c19.zyww, r8
					        cmp_pp r8.xz, -r16_abs.x, c20.wyzw, r8
					        cmp_pp r8.xz, -r16_abs.y, c20.yyxw, r8
					        cmp_pp r8.xz, -r16_abs.z, c19.wyzw, r8
					        cmp_pp r8.xz, -r16_abs.w, c19.yyxw, r8
					        cmp_pp r8.xz, -r17_abs.x, c21.xyyw, r8
					        cmp_pp r8.xz, -r17_abs.y, c21.zyww, r8
					        cmp_pp r8.xz, -r17_abs.z, c21.wyzw, r8
					        cmp_pp r8.xz, -r17_abs.w, c21.yyxw, r8
					        cmp_pp r8.xz, -r18_abs.x, c22.xyyw, r8
					        cmp_pp r8.xz, -r18_abs.y, c22.zyww, r8
					        cmp_pp r8.xz, -r18_abs.z, -c22.wyzw, r8
					        cmp_pp r8.xz, -r18_abs.w, -c22.yyxw, r8
					        cmp_pp r8.xy, -r8_abs.y, -c21, r8.xzzw
					        cmp_pp r8.xy, -r9_abs.y, -c21.zwzw, r8
					        cmp_pp r8.xy, -r10_abs.y, -c21.wzzw, r8
					        cmp_pp r8.xy, -r11_abs.y, -c21.yxzw, r8
					        cmp_pp r8.xy, -r12_abs.w, -c22, r8
					        cmp_pp r8.xy, -r19_abs.y, -c22.zwzw, r8
					        cmp_pp r8.xy, -r19_abs.w, c22.wzzw, r8
					        cmp_pp r8.xy, -r13_abs.y, c22.yxzw, r8
					        cmp_pp r8.xy, -r13_abs.w, c23, r8
					        cmp_pp r8.xy, -r14_abs.y, c23.yxzw, r8
					        cmp_pp r8.xy, -r8_abs.w, c23.zxzw, r8
					        cmp_pp r8.xy, -r9_abs.w, c23.wyzw, r8
					        cmp_pp r8.xy, -r10_abs.w, c23.wzzw, r8
					        cmp_pp r8.xy, -r11_abs.w, c23.zwzw, r8
					        cmp_pp r8.xy, -r14.z, c23.ywzw, r8
					        cmp_pp r8.xy, -r14.w, c23.xzzw, r8
					        mad_pp r5.xy, r8, r1.zwzw, v0
					        texldl_pp r8, r5, s0
					        add_pp r4.w, -r0.w, r8.w
					        mul r4.w, r4_abs.w, -c2.z
					        add r9, r3.w, c24
					        add r10, r3.w, c25
					        add r11, r3.w, c26
					        add r12, r3.w, c27
					        add r13, r3.w, c28
					        add r14, r3.w, c29
					        add r19, r3.w, c30
					        add r20, r3.w, c31
					        cmp r5.x, -r9_abs.x, c3.x, c3.y
					        cmp r21.xyz, -r9_abs.y, c3.x, r5.x
					        cmp r9.xyz, -r9_abs.z, c3.x, r21
					        cmp r9.xyz, -r9_abs.w, c3.x, r9
					        cmp r9.xyz, -r10_abs.x, c3.x, r9
					        cmp r9.xyz, -r10_abs.y, c3.x, r9
					        cmp r9.xyz, -r10_abs.z, c3.x, r9
					        cmp r9.xyz, -r10_abs.w, c3.x, r9
					        cmp r9.xyz, -r11_abs.x, c3.x, r9
					        cmp r9.xyz, -r11_abs.y, c3.x, r9
					        cmp r9.xyz, -r11_abs.z, c3.x, r9
					        cmp r9.xyz, -r11_abs.w, c3.x, r9
					        cmp r9.xyz, -r12_abs.x, c3.x, r9
					        cmp r9.xyz, -r12_abs.y, c3.x, r9
					        cmp r9.xyz, -r12_abs.z, c3.x, r9
					        cmp r9.xyz, -r12_abs.w, c3.x, r9
					        cmp r9.xyz, -r15_abs.x, c3.x, r9
					        cmp r9.xyz, -r15_abs.y, c3.x, r9
					        cmp r9.xyz, -r15_abs.z, c3.x, r9
					        cmp r9.xyz, -r15_abs.w, c3.x, r9
					        cmp r9.xyz, -r16_abs.x, c3.x, r9
					        cmp r9.xyz, -r16_abs.y, c3.x, r9
					        cmp r9.xyz, -r16_abs.z, c3.x, r9
					        cmp r9.xyz, -r16_abs.w, c3.x, r9
					        cmp r9.xyz, -r17_abs.x, c16.x, r9
					        cmp r9.xyz, -r17_abs.y, c16.x, r9
					        cmp r9.xyz, -r17_abs.z, c16.x, r9
					        cmp r9.xyz, -r17_abs.w, c16.x, r9
					        cmp r9.xyz, -r18_abs.x, c16.x, r9
					        cmp r9.xyz, -r18_abs.y, c16.x, r9
					        cmp r9.xyz, -r18_abs.z, c16.x, r9
					        cmp r9.xyz, -r18_abs.w, c16.x, r9
					        cmp r9.xyz, -r13_abs.x, c16.x, r9
					        cmp r9.xyz, -r13_abs.y, c16.x, r9
					        cmp r9.xyz, -r13_abs.z, c16.x, r9
					        cmp r9.xyz, -r13_abs.w, c16.x, r9
					        cmp r9.xyz, -r14_abs.x, c16.x, r9
					        cmp r9.xyz, -r14_abs.y, c16.x, r9
					        cmp r9.xyz, -r14_abs.z, c16.x, r9
					        cmp r9.xyz, -r14_abs.w, c16.x, r9
					        cmp r9.xyz, -r19_abs.x, c16.y, r9
					        cmp r9.xyz, -r19_abs.y, c16.y, r9
					        cmp r9.xyz, -r19_abs.z, c16.y, r9
					        cmp r9.xyz, -r19_abs.w, c16.y, r9
					        cmp r9.xyz, -r20_abs.x, c16.y, r9
					        cmp r9.xyz, -r20_abs.y, c16.y, r9
					        cmp r9.xyz, -r20_abs.z, c16.y, r9
					        cmp r9.xyz, -r20_abs.w, c16.y, r9
					        mad_pp r4.w, r4.w, r9.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r1.x, -c3.x
					        mad_pp r6.w, r5.y, c2.x, c2.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.w, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r6.w, r9.z, r1.y, -c3.x
					        mad_pp r7.w, r6.w, c2.x, c2.y
					        mul_pp r6.w, r6.w, r6.w
					        mad_pp r6.w, r7.w, -r6.w, c3.x
					        mul_pp r5.x, r5.x, r6.w
					        cmp_pp r4.w, r4.w, r5.x, c3.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r6.xyz, r8, r5.y, r6
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r7.xyz, r8, r4.w, r7
					        add r3.w, r3.w, c3.x
					      endrep
					      add_pp r0.w, r2.x, c16.z
					      rcp r0.w, r0.w
					      add_pp r1.x, r2.w, c16.z
					      rcp r1.x, r1.x
					      mul_sat_pp r1.yz, r2.xwxw, c16.w
					      mad_pp r2.xzw, r7.xyyz, r1.x, -r0.xyyz
					      mad_pp r0.xyz, r1.y, r2.xzww, r0
					      max_pp r3.x, r2.y, r1.z
					      mad_pp r1.xyw, r6.xyzz, r0.w, -r0.xyzz
					      mad_pp oC0.xyz, r3.x, r1.xyww, r0
					      mov_pp oC0.w, r1.z
					    endif
					
					// approximately 190 instruction slots used (4 texture, 186 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, -1.17647052, 1.17647052
					    def c3, -24, -25, -26, -27
					    def c4, -28, -29, -30, -31
					    def c5, -0, -32, -10, -42
					    def c6, -1, -33, -11, -43
					    def c7, -2, -34, -12, -44
					    def c8, -3, -35, -13, -45
					    def c9, -4, -14, -15, -36
					    def c10, -5, -37, -6, -38
					    def c11, -7, -39, -8, -40
					    def c12, -9, -41, -46, -47
					    def c13, -20, -21, -22, -23
					    def c14, -16, -17, -18, -19
					    def c15, -2, 3, 0.5, 0.00999999978
					    def c16, 0.660000026, 0.330000013, 9.99999975e-005, 0.0408163257
					    def c17, 0, 0.991439998, 0.13053, 0
					    def c18, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c19, -0.608759999, 0.793349981, -0.793349981, 0.608759999
					    def c20, -0.13053, 0.991439998, -0.382679999, 0.923879981
					    def c21, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c22, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c23, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c24, -0, -1, -2, -3
					    def c25, -4, -5, -6, -7
					    def c26, -8, -9, -10, -11
					    def c27, -12, -13, -14, -15
					    def c28, -32, -33, -34, -35
					    def c29, -36, -37, -38, -39
					    def c30, -40, -41, -42, -43
					    def c31, -44, -45, -46, -47
					    defi i0, 48, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c2.zwzw
					    mad_pp r1.zw, r1.xyxy, c15.x, c15.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.xy, r1, c1
					    mul_pp r1.zw, r1.xyxy, c15.z
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c15.w
					      mov_pp oC0.xyz, r0
					      mov_pp oC0.w, c2.y
					    else
					      mul_pp r1.zw, r2.x, c0.xyxy
					      cmp_pp r2.y, r0.w, c2.y, -r0.w
					      max_pp r2.z, r0.w, c2.y
					      mul_pp r3.xyz, r0, r2.y
					      mul_pp r4.xyz, r0, r2.z
					      mad_pp r1.xy, r1, c15.z, c15.w
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mov_pp r5.zw, c2.y
					      mov_pp r6.zw, c2.y
					      mov_pp r7.xyz, r3
					      mov_pp r8.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c2.y
					      rep i0
					        add r9, r3.w, c5
					        add r10, r3.w, c6
					        add r11, r3.w, c7
					        add r12, r3.w, c8
					        add r13, r3.w, c9.yzxw
					        add r14, r3.w, c11
					        add r15, r3.w, c12
					        add r16, r3.w, c14
					        add r17, r3.w, c13
					        add r18, r3.w, c3
					        add r19, r3.w, c4
					        add r20, r3.w, c10
					        mov r13.xy, r13_abs
					        mov r15.zw, r15_abs
					        cmp r21, -r9_abs.x, c17.yzyz, c17.w
					        cmp r21, -r10_abs.x, c18.xyxy, r21
					        cmp r21, -r11_abs.x, c18.zwzw, r21
					        cmp r21, -r12_abs.x, c18.wzwz, r21
					        cmp r21, -r13_abs.z, c18.yxyx, r21
					        cmp r21, -r20_abs.x, c17.zyzy, r21
					        cmp r21, -r20_abs.z, c20.xyxy, r21
					        cmp r21, -r14_abs.x, c20.zwzw, r21
					        cmp r21, -r14_abs.z, c19.xyxy, r21
					        cmp r21, -r15_abs.x, c19.zwzw, r21
					        cmp r21, -r9_abs.z, -c20.wzwz, r21
					        cmp r21, -r10_abs.z, -c20.yxyx, r21
					        cmp r21, -r11_abs.z, -c17.yzyz, r21
					        cmp r21, -r12_abs.z, -c18.xyxy, r21
					        cmp r21, -r13.x, -c18.zwzw, r21
					        cmp r21, -r13.y, -c18.wzwz, r21
					        cmp r21, -r16_abs.x, -c18.yxyx, r21
					        cmp r21, -r16_abs.y, -c17.zyzy, r21
					        cmp r21, -r16_abs.z, -c20.xyxy, r21
					        cmp r21, -r16_abs.w, -c20.zwzw, r21
					        cmp r21, -r17_abs.x, c19.wzwz, r21
					        cmp r21, -r17_abs.y, c19.yxyx, r21
					        cmp r21, -r17_abs.z, c20.wzwz, r21
					        cmp r21, -r17_abs.w, c20.yxyx, r21
					        cmp r21, -r18_abs.x, c21.xyxy, r21
					        cmp r21, -r18_abs.y, c21.zwzw, r21
					        cmp r21, -r18_abs.z, c21.wzwz, r21
					        cmp r21, -r18_abs.w, c21.yxyx, r21
					        cmp r21, -r19_abs.x, c22.xyxy, r21
					        cmp r21, -r19_abs.y, c22.zwzw, r21
					        cmp r21, -r19_abs.z, -c22.wzwz, r21
					        cmp r21, -r19_abs.w, -c22.yxyx, r21
					        cmp r21, -r9_abs.y, -c21.xyxy, r21
					        cmp r21, -r10_abs.y, -c21.zwzw, r21
					        cmp r21, -r11_abs.y, -c21.wzwz, r21
					        cmp r21, -r12_abs.y, -c21.yxyx, r21
					        cmp r13, -r13_abs.w, -c22.xyxy, r21
					        cmp r13, -r20_abs.y, -c22.zwzw, r13
					        cmp r13, -r20_abs.w, c22.wzwz, r13
					        cmp r13, -r14_abs.y, c22.yxyx, r13
					        cmp r13, -r14_abs.w, c23.xyxy, r13
					        cmp r13, -r15_abs.y, c23.yxyx, r13
					        cmp r9, -r9_abs.w, c23.zxzx, r13
					        cmp r9, -r10_abs.w, c23.wywy, r9
					        cmp r9, -r11_abs.w, c23.wzwz, r9
					        cmp r9, -r12_abs.w, c23.zwzw, r9
					        cmp r9, -r15.z, c23.ywyw, r9
					        cmp r9, -r15.w, c23.xzxz, r9
					        mad_pp r5.xy, r9, r1.zwzw, v0
					        texldl_pp r10, r5, s0
					        mov r11.z, c15.z
					        mad r5.xy, r5, c0.zwzw, -r11.z
					        frc r9.xy, r5
					        add r5.xy, r5, -r9
					        add_pp r5.xy, r5, c2.x
					        cmp r9.xy, -r9.zwzw, c2.y, c2.x
					        cmp r9.zw, r9, -c2.y, -c2.x
					        add r9.xy, r9.zwzw, r9
					        mad_pp r5.xy, r9, c15.z, r5
					        mul r6.xy, r5, c0
					        texldl_pp r9, r6, s0
					        add_pp r4.w, -r0.w, r9.w
					        mul r4.w, r4_abs.w, -c15.z
					        add r11, r3.w, c24
					        add r12, r3.w, c25
					        add r13, r3.w, c26
					        add r14, r3.w, c27
					        add r15, r3.w, c28
					        add r20, r3.w, c29
					        add r21, r3.w, c30
					        add r22, r3.w, c31
					        cmp r5.x, -r11_abs.x, c2.x, c2.y
					        cmp r9.xyz, -r11_abs.y, c2.x, r5.x
					        cmp r9.xyz, -r11_abs.z, c2.x, r9
					        cmp r9.xyz, -r11_abs.w, c2.x, r9
					        cmp r9.xyz, -r12_abs.x, c2.x, r9
					        cmp r9.xyz, -r12_abs.y, c2.x, r9
					        cmp r9.xyz, -r12_abs.z, c2.x, r9
					        cmp r9.xyz, -r12_abs.w, c2.x, r9
					        cmp r9.xyz, -r13_abs.x, c2.x, r9
					        cmp r9.xyz, -r13_abs.y, c2.x, r9
					        cmp r9.xyz, -r13_abs.z, c2.x, r9
					        cmp r9.xyz, -r13_abs.w, c2.x, r9
					        cmp r9.xyz, -r14_abs.x, c2.x, r9
					        cmp r9.xyz, -r14_abs.y, c2.x, r9
					        cmp r9.xyz, -r14_abs.z, c2.x, r9
					        cmp r9.xyz, -r14_abs.w, c2.x, r9
					        cmp r9.xyz, -r16_abs.x, c2.x, r9
					        cmp r9.xyz, -r16_abs.y, c2.x, r9
					        cmp r9.xyz, -r16_abs.z, c2.x, r9
					        cmp r9.xyz, -r16_abs.w, c2.x, r9
					        cmp r9.xyz, -r17_abs.x, c2.x, r9
					        cmp r9.xyz, -r17_abs.y, c2.x, r9
					        cmp r9.xyz, -r17_abs.z, c2.x, r9
					        cmp r9.xyz, -r17_abs.w, c2.x, r9
					        cmp r9.xyz, -r18_abs.x, c16.x, r9
					        cmp r9.xyz, -r18_abs.y, c16.x, r9
					        cmp r9.xyz, -r18_abs.z, c16.x, r9
					        cmp r9.xyz, -r18_abs.w, c16.x, r9
					        cmp r9.xyz, -r19_abs.x, c16.x, r9
					        cmp r9.xyz, -r19_abs.y, c16.x, r9
					        cmp r9.xyz, -r19_abs.z, c16.x, r9
					        cmp r9.xyz, -r19_abs.w, c16.x, r9
					        cmp r9.xyz, -r15_abs.x, c16.x, r9
					        cmp r9.xyz, -r15_abs.y, c16.x, r9
					        cmp r9.xyz, -r15_abs.z, c16.x, r9
					        cmp r9.xyz, -r15_abs.w, c16.x, r9
					        cmp r9.xyz, -r20_abs.x, c16.x, r9
					        cmp r9.xyz, -r20_abs.y, c16.x, r9
					        cmp r9.xyz, -r20_abs.z, c16.x, r9
					        cmp r9.xyz, -r20_abs.w, c16.x, r9
					        cmp r9.xyz, -r21_abs.x, c16.y, r9
					        cmp r9.xyz, -r21_abs.y, c16.y, r9
					        cmp r9.xyz, -r21_abs.z, c16.y, r9
					        cmp r9.xyz, -r21_abs.w, c16.y, r9
					        cmp r9.xyz, -r22_abs.x, c16.y, r9
					        cmp r9.xyz, -r22_abs.y, c16.y, r9
					        cmp r9.xyz, -r22_abs.z, c16.y, r9
					        cmp r9.xyz, -r22_abs.w, c16.y, r9
					        mad_pp r4.w, r4.w, r9.x, c2.x
					        max_pp r5.x, r9.w, c2.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r1.x, -c2.x
					        mad_pp r6.x, r5.y, c15.x, c15.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.x, -r5.y, c2.x
					        mul_pp r5.y, r5.y, -r9.w
					        cmp_pp r5.y, r9.w, c2.y, r5.y
					        mad_sat_pp r6.x, r9.z, r1.y, -c2.x
					        mad_pp r6.y, r6.x, c15.x, c15.y
					        mul_pp r6.x, r6.x, r6.x
					        mad_pp r6.x, r6.y, -r6.x, c2.x
					        mul_pp r5.x, r5.x, r6.x
					        cmp_pp r4.w, r4.w, r5.x, c2.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r7.xyz, r10, r5.y, r7
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r8.xyz, r10, r4.w, r8
					        add r3.w, r3.w, c2.x
					      endrep
					      add_pp r0.w, r2.x, c16.z
					      rcp r0.w, r0.w
					      add_pp r1.x, r2.w, c16.z
					      rcp r1.x, r1.x
					      mul_sat_pp r1.yz, r2.xwxw, c16.w
					      mad_pp r2.xzw, r8.xyyz, r1.x, -r0.xyyz
					      mad_pp r0.xyz, r1.y, r2.xzww, r0
					      max_pp r3.x, r2.y, r1.z
					      mad_pp r1.xyw, r7.xyzz, r0.w, -r0.xyzz
					      mad_pp oC0.xyz, r3.x, r1.xyww, r0
					      mov_pp oC0.w, r1.z
					    endif
					
					// approximately 203 instruction slots used (6 texture, 197 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat34 * u_xlat7.x;
					            u_xlat27.x = u_xlat35 * u_xlat7.y;
					            u_xlat21.x = u_xlat34 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat34 * u_xlat7.x;
					            u_xlat27.x = u_xlat35 * u_xlat7.y;
					            u_xlat21.x = u_xlat34 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2594847
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 1.17647052, 0.5
					    def c3, -5, -37, -6, -38
					    def c4, -0, -32, -10, -42
					    def c5, -4, -14, -15, -36
					    def c6, -24, -25, -26, -27
					    def c7, -28, -29, -30, -31
					    def c8, -1, -33, -11, -43
					    def c9, -2, -34, -12, -44
					    def c10, -9, -41, -46, -47
					    def c11, -3, -35, -13, -45
					    def c12, -16, -17, -18, -19
					    def c13, -7, -39, -8, -40
					    def c14, -20, -21, -22, -23
					    def c15, -2, 3, 0.00999999978, 0.5
					    def c16, 0.660000026, 0.330000013, 9.99999975e-005, 0.0408163257
					    def c17, 0, 0.991439998, 0.13053, 0
					    def c18, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c19, -0.13053, 0.991439998, -0.382679999, 0.923879981
					    def c20, -0.608759999, 0.793349981, -0.793349981, 0.608759999
					    def c21, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c22, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c23, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c24, -0, -1, -2, -3
					    def c25, -4, -5, -6, -7
					    def c26, -8, -9, -10, -11
					    def c27, -12, -13, -14, -15
					    def c28, -32, -33, -34, -35
					    def c29, -36, -37, -38, -39
					    def c30, -40, -41, -42, -43
					    def c31, -44, -45, -46, -47
					    defi i0, 48, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r1.w, r0.x
					    mul_sat_pp r0.x, r1.w, c2.z
					    mad_pp r0.y, r0.x, c15.x, c15.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r0.x, c1.y
					    mul_sat_pp r0.z, r2.x, -c2.z
					    mad_pp r0.w, r0.z, c15.x, c15.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r0.yw, r0.xxzz, c2.w
					    max_pp r2.x, r0.y, r0.w
					    if_lt r2.x, c15.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, c2.y
					    else
					      mul_pp r0.yw, r2.x, c0.xxzy
					      cmp_pp r2.y, r1.w, c2.y, -r1.w
					      max_pp r2.z, r1.w, c2.y
					      mul_pp r3.xyz, r1, r2.y
					      mul_pp r4.xyz, r1, r2.z
					      mad_pp r0.z, r0.z, c15.w, c15.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c15.w, c15.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r2.x
					      mov_pp r5.zw, c2.y
					      mov_pp r6.xyz, r3
					      mov_pp r7.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c2.y
					      rep i0
					        add r8, r3.w, c4
					        add r9, r3.w, c8
					        add r10, r3.w, c9
					        add r11, r3.w, c11
					        add r12, r3.w, c5.yzxw
					        add r13, r3.w, c13
					        add r14, r3.w, c10
					        add r15, r3.w, c12
					        add r16, r3.w, c14
					        add r17, r3.w, c6
					        add r18, r3.w, c7
					        add r19, r3.w, c3
					        mov r12.xy, r12_abs
					        mov r14.zw, r14_abs
					        cmp_pp r20.xy, -r8_abs.x, c17.yzzw, c17.w
					        cmp_pp r20.xy, -r9_abs.x, c18, r20
					        cmp_pp r20.xy, -r10_abs.x, c18.zwzw, r20
					        cmp_pp r20.xy, -r11_abs.x, c18.wzzw, r20
					        cmp_pp r20.xy, -r12_abs.z, c18.yxzw, r20
					        cmp_pp r20.xy, -r19_abs.x, c17.zyzw, r20
					        cmp_pp r19.xz, -r19_abs.z, c19.xyyw, r20.xyyw
					        cmp_pp r19.xz, -r13_abs.x, c19.zyww, r19
					        cmp_pp r13.xz, -r13_abs.z, c20.xyyw, r19
					        cmp_pp r13.xz, -r14_abs.x, c20.zyww, r13
					        cmp_pp r8.xz, -r8_abs.z, -c19.wyzw, r13
					        cmp_pp r8.xz, -r9_abs.z, -c19.yyxw, r8
					        cmp_pp r8.xz, -r10_abs.z, -c17.yyzw, r8
					        cmp_pp r8.xz, -r11_abs.z, -c18.xyyw, r8
					        cmp_pp r8.xz, -r12.x, -c18.zyww, r8
					        cmp_pp r8.xz, -r12.y, -c18.wyzw, r8
					        cmp_pp r8.xz, -r15_abs.x, -c18.yyxw, r8
					        cmp_pp r8.xz, -r15_abs.y, -c17.zyyw, r8
					        cmp_pp r8.xz, -r15_abs.z, -c19.xyyw, r8
					        cmp_pp r8.xz, -r15_abs.w, -c19.zyww, r8
					        cmp_pp r8.xz, -r16_abs.x, c20.wyzw, r8
					        cmp_pp r8.xz, -r16_abs.y, c20.yyxw, r8
					        cmp_pp r8.xz, -r16_abs.z, c19.wyzw, r8
					        cmp_pp r8.xz, -r16_abs.w, c19.yyxw, r8
					        cmp_pp r8.xz, -r17_abs.x, c21.xyyw, r8
					        cmp_pp r8.xz, -r17_abs.y, c21.zyww, r8
					        cmp_pp r8.xz, -r17_abs.z, c21.wyzw, r8
					        cmp_pp r8.xz, -r17_abs.w, c21.yyxw, r8
					        cmp_pp r8.xz, -r18_abs.x, c22.xyyw, r8
					        cmp_pp r8.xz, -r18_abs.y, c22.zyww, r8
					        cmp_pp r8.xz, -r18_abs.z, -c22.wyzw, r8
					        cmp_pp r8.xz, -r18_abs.w, -c22.yyxw, r8
					        cmp_pp r8.xy, -r8_abs.y, -c21, r8.xzzw
					        cmp_pp r8.xy, -r9_abs.y, -c21.zwzw, r8
					        cmp_pp r8.xy, -r10_abs.y, -c21.wzzw, r8
					        cmp_pp r8.xy, -r11_abs.y, -c21.yxzw, r8
					        cmp_pp r8.xy, -r12_abs.w, -c22, r8
					        cmp_pp r8.xy, -r19_abs.y, -c22.zwzw, r8
					        cmp_pp r8.xy, -r19_abs.w, c22.wzzw, r8
					        cmp_pp r8.xy, -r13_abs.y, c22.yxzw, r8
					        cmp_pp r8.xy, -r13_abs.w, c23, r8
					        cmp_pp r8.xy, -r14_abs.y, c23.yxzw, r8
					        cmp_pp r8.xy, -r8_abs.w, c23.zxzw, r8
					        cmp_pp r8.xy, -r9_abs.w, c23.wyzw, r8
					        cmp_pp r8.xy, -r10_abs.w, c23.wzzw, r8
					        cmp_pp r8.xy, -r11_abs.w, c23.zwzw, r8
					        cmp_pp r8.xy, -r14.z, c23.ywzw, r8
					        cmp_pp r8.xy, -r14.w, c23.xzzw, r8
					        mad_pp r5.xy, r8, r0.ywzw, v0
					        texldl_pp r8, r5, s1
					        add_pp r4.w, -r1.w, r8.w
					        mul r4.w, r4_abs.w, -c2.w
					        add r9, r3.w, c24
					        add r10, r3.w, c25
					        add r11, r3.w, c26
					        add r12, r3.w, c27
					        add r13, r3.w, c28
					        add r14, r3.w, c29
					        add r19, r3.w, c30
					        add r20, r3.w, c31
					        cmp r5.x, -r9_abs.x, c2.x, c2.y
					        cmp r21.xyz, -r9_abs.y, c2.x, r5.x
					        cmp r9.xyz, -r9_abs.z, c2.x, r21
					        cmp r9.xyz, -r9_abs.w, c2.x, r9
					        cmp r9.xyz, -r10_abs.x, c2.x, r9
					        cmp r9.xyz, -r10_abs.y, c2.x, r9
					        cmp r9.xyz, -r10_abs.z, c2.x, r9
					        cmp r9.xyz, -r10_abs.w, c2.x, r9
					        cmp r9.xyz, -r11_abs.x, c2.x, r9
					        cmp r9.xyz, -r11_abs.y, c2.x, r9
					        cmp r9.xyz, -r11_abs.z, c2.x, r9
					        cmp r9.xyz, -r11_abs.w, c2.x, r9
					        cmp r9.xyz, -r12_abs.x, c2.x, r9
					        cmp r9.xyz, -r12_abs.y, c2.x, r9
					        cmp r9.xyz, -r12_abs.z, c2.x, r9
					        cmp r9.xyz, -r12_abs.w, c2.x, r9
					        cmp r9.xyz, -r15_abs.x, c2.x, r9
					        cmp r9.xyz, -r15_abs.y, c2.x, r9
					        cmp r9.xyz, -r15_abs.z, c2.x, r9
					        cmp r9.xyz, -r15_abs.w, c2.x, r9
					        cmp r9.xyz, -r16_abs.x, c2.x, r9
					        cmp r9.xyz, -r16_abs.y, c2.x, r9
					        cmp r9.xyz, -r16_abs.z, c2.x, r9
					        cmp r9.xyz, -r16_abs.w, c2.x, r9
					        cmp r9.xyz, -r17_abs.x, c16.x, r9
					        cmp r9.xyz, -r17_abs.y, c16.x, r9
					        cmp r9.xyz, -r17_abs.z, c16.x, r9
					        cmp r9.xyz, -r17_abs.w, c16.x, r9
					        cmp r9.xyz, -r18_abs.x, c16.x, r9
					        cmp r9.xyz, -r18_abs.y, c16.x, r9
					        cmp r9.xyz, -r18_abs.z, c16.x, r9
					        cmp r9.xyz, -r18_abs.w, c16.x, r9
					        cmp r9.xyz, -r13_abs.x, c16.x, r9
					        cmp r9.xyz, -r13_abs.y, c16.x, r9
					        cmp r9.xyz, -r13_abs.z, c16.x, r9
					        cmp r9.xyz, -r13_abs.w, c16.x, r9
					        cmp r9.xyz, -r14_abs.x, c16.x, r9
					        cmp r9.xyz, -r14_abs.y, c16.x, r9
					        cmp r9.xyz, -r14_abs.z, c16.x, r9
					        cmp r9.xyz, -r14_abs.w, c16.x, r9
					        cmp r9.xyz, -r19_abs.x, c16.y, r9
					        cmp r9.xyz, -r19_abs.y, c16.y, r9
					        cmp r9.xyz, -r19_abs.z, c16.y, r9
					        cmp r9.xyz, -r19_abs.w, c16.y, r9
					        cmp r9.xyz, -r20_abs.x, c16.y, r9
					        cmp r9.xyz, -r20_abs.y, c16.y, r9
					        cmp r9.xyz, -r20_abs.z, c16.y, r9
					        cmp r9.xyz, -r20_abs.w, c16.y, r9
					        mad_pp r4.w, r4.w, r9.x, c2.x
					        max_pp r5.x, r8.w, c2.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r0.z, -c2.x
					        mad_pp r6.w, r5.y, c15.x, c15.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.w, -r5.y, c2.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c2.y, r5.y
					        mad_sat_pp r6.w, r9.z, r0.x, -c2.x
					        mad_pp r7.w, r6.w, c15.x, c15.y
					        mul_pp r6.w, r6.w, r6.w
					        mad_pp r6.w, r7.w, -r6.w, c2.x
					        mul_pp r5.x, r5.x, r6.w
					        cmp_pp r4.w, r4.w, r5.x, c2.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r6.xyz, r8, r5.y, r6
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r7.xyz, r8, r4.w, r7
					        add r3.w, r3.w, c2.x
					      endrep
					      add_pp r0.xy, r2.xwzw, c16.z
					      rcp r0.x, r0.x
					      rcp r0.y, r0.y
					      mul_sat_pp r0.zw, r2.xywx, c16.w
					      mad_pp r2.xzw, r7.xyyz, r0.y, -r1.xyyz
					      mad_pp r1.xyz, r0.z, r2.xzww, r1
					      max_pp r1.w, r2.y, r0.w
					      mad_pp r0.xyz, r6, r0.x, -r1
					      mad_pp oC0.xyz, r1.w, r0, r1
					      mov_pp oC0.w, r0.w
					    endif
					
					// approximately 198 instruction slots used (6 texture, 192 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 1.17647052, 0.5
					    def c3, -3, -35, -13, -45
					    def c4, -1, -33, -11, -43
					    def c5, -2, -34, -12, -44
					    def c6, -24, -25, -26, -27
					    def c7, -28, -29, -30, -31
					    def c8, -0, -32, -10, -42
					    def c9, -4, -14, -15, -36
					    def c10, -5, -37, -6, -38
					    def c11, -7, -39, -8, -40
					    def c12, -20, -21, -22, -23
					    def c13, -9, -41, -46, -47
					    def c14, -2, 3, 0.00999999978, 0.5
					    def c15, -16, -17, -18, -19
					    def c16, 0.660000026, 0.330000013, 9.99999975e-005, 0.0408163257
					    def c17, 0, 0.991439998, 0.13053, 0
					    def c18, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c19, -0.608759999, 0.793349981, -0.793349981, 0.608759999
					    def c20, -0.13053, 0.991439998, -0.382679999, 0.923879981
					    def c21, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c22, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c23, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c24, -0, -1, -2, -3
					    def c25, -4, -5, -6, -7
					    def c26, -8, -9, -10, -11
					    def c27, -12, -13, -14, -15
					    def c28, -32, -33, -34, -35
					    def c29, -36, -37, -38, -39
					    def c30, -40, -41, -42, -43
					    def c31, -44, -45, -46, -47
					    defi i0, 48, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r1.w, r0.x
					    mul_sat_pp r0.x, r1.w, c2.z
					    mad_pp r0.y, r0.x, c14.x, c14.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r0.x, c1.y
					    mul_sat_pp r0.z, r2.x, -c2.z
					    mad_pp r0.w, r0.z, c14.x, c14.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r0.yw, r0.xxzz, c2.w
					    max_pp r2.x, r0.y, r0.w
					    if_lt r2.x, c14.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, c2.y
					    else
					      mul_pp r0.yw, r2.x, c0.xxzy
					      cmp_pp r2.y, r1.w, c2.y, -r1.w
					      max_pp r2.z, r1.w, c2.y
					      mul_pp r3.xyz, r1, r2.y
					      mul_pp r4.xyz, r1, r2.z
					      mad_pp r0.z, r0.z, c14.w, c14.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c14.w, c14.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r2.x
					      mov_pp r5.zw, c2.y
					      mov_pp r6.zw, c2.y
					      mov_pp r7.xyz, r3
					      mov_pp r8.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c2.y
					      rep i0
					        add r9, r3.w, c8
					        add r10, r3.w, c4
					        add r11, r3.w, c5
					        add r12, r3.w, c3
					        add r13, r3.w, c9.yzxw
					        add r14, r3.w, c11
					        add r15, r3.w, c13
					        add r16, r3.w, c15
					        add r17, r3.w, c12
					        add r18, r3.w, c6
					        add r19, r3.w, c7
					        add r20, r3.w, c10
					        mov r13.xy, r13_abs
					        mov r15.zw, r15_abs
					        cmp r21, -r9_abs.x, c17.yzyz, c17.w
					        cmp r21, -r10_abs.x, c18.xyxy, r21
					        cmp r21, -r11_abs.x, c18.zwzw, r21
					        cmp r21, -r12_abs.x, c18.wzwz, r21
					        cmp r21, -r13_abs.z, c18.yxyx, r21
					        cmp r21, -r20_abs.x, c17.zyzy, r21
					        cmp r21, -r20_abs.z, c20.xyxy, r21
					        cmp r21, -r14_abs.x, c20.zwzw, r21
					        cmp r21, -r14_abs.z, c19.xyxy, r21
					        cmp r21, -r15_abs.x, c19.zwzw, r21
					        cmp r21, -r9_abs.z, -c20.wzwz, r21
					        cmp r21, -r10_abs.z, -c20.yxyx, r21
					        cmp r21, -r11_abs.z, -c17.yzyz, r21
					        cmp r21, -r12_abs.z, -c18.xyxy, r21
					        cmp r21, -r13.x, -c18.zwzw, r21
					        cmp r21, -r13.y, -c18.wzwz, r21
					        cmp r21, -r16_abs.x, -c18.yxyx, r21
					        cmp r21, -r16_abs.y, -c17.zyzy, r21
					        cmp r21, -r16_abs.z, -c20.xyxy, r21
					        cmp r21, -r16_abs.w, -c20.zwzw, r21
					        cmp r21, -r17_abs.x, c19.wzwz, r21
					        cmp r21, -r17_abs.y, c19.yxyx, r21
					        cmp r21, -r17_abs.z, c20.wzwz, r21
					        cmp r21, -r17_abs.w, c20.yxyx, r21
					        cmp r21, -r18_abs.x, c21.xyxy, r21
					        cmp r21, -r18_abs.y, c21.zwzw, r21
					        cmp r21, -r18_abs.z, c21.wzwz, r21
					        cmp r21, -r18_abs.w, c21.yxyx, r21
					        cmp r21, -r19_abs.x, c23.xyxy, r21
					        cmp r21, -r19_abs.y, c23.zwzw, r21
					        cmp r21, -r19_abs.z, -c23.wzwz, r21
					        cmp r21, -r19_abs.w, -c23.yxyx, r21
					        cmp r21, -r9_abs.y, -c21.xyxy, r21
					        cmp r21, -r10_abs.y, -c21.zwzw, r21
					        cmp r21, -r11_abs.y, -c21.wzwz, r21
					        cmp r21, -r12_abs.y, -c21.yxyx, r21
					        cmp r13, -r13_abs.w, -c23.xyxy, r21
					        cmp r13, -r20_abs.y, -c23.zwzw, r13
					        cmp r13, -r20_abs.w, c23.wzwz, r13
					        cmp r13, -r14_abs.y, c23.yxyx, r13
					        cmp r13, -r14_abs.w, c22.xyxy, r13
					        cmp r13, -r15_abs.y, c22.yxyx, r13
					        cmp r9, -r9_abs.w, c22.zxzx, r13
					        cmp r9, -r10_abs.w, c22.wywy, r9
					        cmp r9, -r11_abs.w, c22.wzwz, r9
					        cmp r9, -r12_abs.w, c22.zwzw, r9
					        cmp r9, -r15.z, c22.ywyw, r9
					        cmp r9, -r15.w, c22.xzxz, r9
					        mad_pp r5.xy, r9, r0.ywzw, v0
					        texldl_pp r10, r5, s1
					        mov r4.w, c2.w
					        mad r5.xy, r5, c0.zwzw, -r4.w
					        frc r9.xy, r5
					        add r5.xy, r5, -r9
					        add_pp r5.xy, r5, c2.x
					        cmp r9.xy, -r9.zwzw, c2.y, c2.x
					        cmp r9.zw, r9, -c2.y, -c2.x
					        add r9.xy, r9.zwzw, r9
					        mad_pp r5.xy, r9, c2.w, r5
					        mul r6.xy, r5, c0
					        texldl_pp r9, r6, s1
					        add_pp r4.w, -r1.w, r9.w
					        mul r4.w, r4_abs.w, -c2.w
					        add r11, r3.w, c24
					        add r12, r3.w, c25
					        add r13, r3.w, c26
					        add r14, r3.w, c27
					        add r15, r3.w, c28
					        add r20, r3.w, c29
					        add r21, r3.w, c30
					        add r22, r3.w, c31
					        cmp r5.x, -r11_abs.x, c2.x, c2.y
					        cmp r9.xyz, -r11_abs.y, c2.x, r5.x
					        cmp r9.xyz, -r11_abs.z, c2.x, r9
					        cmp r9.xyz, -r11_abs.w, c2.x, r9
					        cmp r9.xyz, -r12_abs.x, c2.x, r9
					        cmp r9.xyz, -r12_abs.y, c2.x, r9
					        cmp r9.xyz, -r12_abs.z, c2.x, r9
					        cmp r9.xyz, -r12_abs.w, c2.x, r9
					        cmp r9.xyz, -r13_abs.x, c2.x, r9
					        cmp r9.xyz, -r13_abs.y, c2.x, r9
					        cmp r9.xyz, -r13_abs.z, c2.x, r9
					        cmp r9.xyz, -r13_abs.w, c2.x, r9
					        cmp r9.xyz, -r14_abs.x, c2.x, r9
					        cmp r9.xyz, -r14_abs.y, c2.x, r9
					        cmp r9.xyz, -r14_abs.z, c2.x, r9
					        cmp r9.xyz, -r14_abs.w, c2.x, r9
					        cmp r9.xyz, -r16_abs.x, c2.x, r9
					        cmp r9.xyz, -r16_abs.y, c2.x, r9
					        cmp r9.xyz, -r16_abs.z, c2.x, r9
					        cmp r9.xyz, -r16_abs.w, c2.x, r9
					        cmp r9.xyz, -r17_abs.x, c2.x, r9
					        cmp r9.xyz, -r17_abs.y, c2.x, r9
					        cmp r9.xyz, -r17_abs.z, c2.x, r9
					        cmp r9.xyz, -r17_abs.w, c2.x, r9
					        cmp r9.xyz, -r18_abs.x, c16.x, r9
					        cmp r9.xyz, -r18_abs.y, c16.x, r9
					        cmp r9.xyz, -r18_abs.z, c16.x, r9
					        cmp r9.xyz, -r18_abs.w, c16.x, r9
					        cmp r9.xyz, -r19_abs.x, c16.x, r9
					        cmp r9.xyz, -r19_abs.y, c16.x, r9
					        cmp r9.xyz, -r19_abs.z, c16.x, r9
					        cmp r9.xyz, -r19_abs.w, c16.x, r9
					        cmp r9.xyz, -r15_abs.x, c16.x, r9
					        cmp r9.xyz, -r15_abs.y, c16.x, r9
					        cmp r9.xyz, -r15_abs.z, c16.x, r9
					        cmp r9.xyz, -r15_abs.w, c16.x, r9
					        cmp r9.xyz, -r20_abs.x, c16.x, r9
					        cmp r9.xyz, -r20_abs.y, c16.x, r9
					        cmp r9.xyz, -r20_abs.z, c16.x, r9
					        cmp r9.xyz, -r20_abs.w, c16.x, r9
					        cmp r9.xyz, -r21_abs.x, c16.y, r9
					        cmp r9.xyz, -r21_abs.y, c16.y, r9
					        cmp r9.xyz, -r21_abs.z, c16.y, r9
					        cmp r9.xyz, -r21_abs.w, c16.y, r9
					        cmp r9.xyz, -r22_abs.x, c16.y, r9
					        cmp r9.xyz, -r22_abs.y, c16.y, r9
					        cmp r9.xyz, -r22_abs.z, c16.y, r9
					        cmp r9.xyz, -r22_abs.w, c16.y, r9
					        mad_pp r4.w, r4.w, r9.x, c2.x
					        max_pp r5.x, r9.w, c2.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r0.z, -c2.x
					        mad_pp r6.x, r5.y, c14.x, c14.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.x, -r5.y, c2.x
					        mul_pp r5.y, r5.y, -r9.w
					        cmp_pp r5.y, r9.w, c2.y, r5.y
					        mad_sat_pp r6.x, r9.z, r0.x, -c2.x
					        mad_pp r6.y, r6.x, c14.x, c14.y
					        mul_pp r6.x, r6.x, r6.x
					        mad_pp r6.x, r6.y, -r6.x, c2.x
					        mul_pp r5.x, r5.x, r6.x
					        cmp_pp r4.w, r4.w, r5.x, c2.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r7.xyz, r10, r5.y, r7
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r8.xyz, r10, r4.w, r8
					        add r3.w, r3.w, c2.x
					      endrep
					      add_pp r0.xy, r2.xwzw, c16.z
					      rcp r0.x, r0.x
					      rcp r0.y, r0.y
					      mul_sat_pp r0.zw, r2.xywx, c16.w
					      mad_pp r2.xzw, r8.xyyz, r0.y, -r1.xyyz
					      mad_pp r1.xyz, r0.z, r2.xzww, r1
					      max_pp r1.w, r2.y, r0.w
					      mad_pp r0.xyz, r7, r0.x, -r1
					      mad_pp oC0.xyz, r1.w, r0, r1
					      mov_pp oC0.w, r0.w
					    endif
					
					// approximately 211 instruction slots used (8 texture, 203 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat34 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27.x = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27.x) * u_xlat17 + 1.0;
					            u_xlat27.x = u_xlat35 * u_xlat17;
					            u_xlat21.x = u_xlat34 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat34 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27.x = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27.x) * u_xlat17 + 1.0;
					            u_xlat27.x = u_xlat35 * u_xlat17;
					            u_xlat21.x = u_xlat34 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2662218
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, -2, 3, 0.5, 0.00999999978
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 24, 23, 25, 26
					    def c5, -3, -14, -27, -35
					    def c6, -6, -38, -7, -39
					    def c7, -8, -40, -9, -41
					    def c8, -1, -33, -12, -44
					    def c9, -28, -29, -30, -31
					    def c10, -4, -36, -5, -37
					    def c11, -0, -32, -11, -43
					    def c12, -15, -16, -17, -18
					    def c13, -19, -20, -21, -22
					    def c14, -20, -21, -22, -23
					    def c15, -24, -25, -26, -27
					    def c16, -2, -34, -13, -45
					    def c17, -10, -42, -46, 2
					    def c18, 0.330000013, 9.99999975e-005, 0.0408163257, 0
					    def c19, 0.991439998, 0.13053, 0, -0.13053
					    def c20, -0.382679999, 0.923879981, -0.608759999, 0.793349981
					    def c21, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c22, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c23, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c24, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c25, -44, -45, -46, 0.660000026
					    def c26, -0, -1, -2, -3
					    def c27, -4, -5, -6, -7
					    def c28, -8, -9, -10, -11
					    def c29, -12, -13, -14, -15
					    def c30, -16, -17, -18, -19
					    def c31, -32, -33, -34, -35
					    def c32, -36, -37, -38, -39
					    def c33, -40, -41, -42, -43
					    defi i0, 24, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c2.x, c2.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.xy, r1, c1
					    mul_pp r1.zw, r1.xyxy, c2.z
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c2.w
					      mov_pp oC0.xyz, r0
					      mov_pp oC0.w, c3.y
					    else
					      mul_pp r1.zw, r2.x, c0.xyxy
					      cmp_pp r2.y, r0.w, c3.y, -r0.w
					      max_pp r2.z, r0.w, c3.y
					      mul_pp r3.xyz, r0, r2.y
					      mul_pp r4.xyz, r0, r2.z
					      mad_pp r1.xy, r1, c2.z, c2.w
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mov_pp r5.zw, c3.y
					      mov_pp r6.xyz, r3
					      mov_pp r7.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c3.y
					      rep i0
					        add r8, r3.w, c11
					        add r9, r3.w, c8
					        add r10, r3.w, c16
					        add r11, r3.w, c5.yzxw
					        add r12, r3.w, c7
					        add r13, r3.w, c12
					        add r14, r3.w, c13
					        add r15, r3.w, -c4.yxzw
					        add r16, r3.w, c9
					        add r17, r3.w, c17
					        add r18, r3.w, c10
					        add r19, r3.w, c6
					        mov r11.xy, r11_abs
					        mov r17.z, r17_abs.z
					        cmp_pp r20.xy, -r8_abs.x, c19, c19.z
					        cmp_pp r20.xy, -r9_abs.x, c21, r20
					        cmp_pp r20.xy, -r10_abs.x, c21.zwzw, r20
					        cmp_pp r20.xy, -r11_abs.z, c21.wzzw, r20
					        cmp_pp r20.xy, -r18_abs.x, c21.yxzw, r20
					        cmp_pp r18.xz, -r18_abs.z, c19.yyxw, r20.xyyw
					        cmp_pp r18.xz, -r19_abs.x, c19.wyxw, r18
					        cmp_pp r18.xz, -r19_abs.z, c20.xyyw, r18
					        cmp_pp r18.xz, -r12_abs.x, c20.zyww, r18
					        cmp_pp r12.xz, -r12_abs.z, -c20.wyzw, r18
					        cmp_pp r12.xz, -r17_abs.x, -c20.yyxw, r12
					        cmp_pp r8.xz, -r8_abs.z, -c19.xyww, r12
					        cmp_pp r8.xz, -r9_abs.z, -c19.xyyw, r8
					        cmp_pp r8.xz, -r10_abs.z, -c21.xyyw, r8
					        cmp_pp r8.xz, -r11.x, -c21.zyww, r8
					        cmp_pp r8.xz, -r13_abs.x, -c21.wyzw, r8
					        cmp_pp r8.xz, -r13_abs.y, -c21.yyxw, r8
					        cmp_pp r8.xz, -r13_abs.z, -c19.yyxw, r8
					        cmp_pp r8.xz, -r13_abs.w, -c19.wyxw, r8
					        cmp_pp r8.xz, -r14_abs.x, -c20.xyyw, r8
					        cmp_pp r8.xz, -r14_abs.y, -c20.zyww, r8
					        cmp_pp r8.xz, -r14_abs.z, c20.wyzw, r8
					        cmp_pp r8.xz, -r14_abs.w, c20.yyxw, r8
					        cmp_pp r8.xz, -r15_abs.x, c19.xyww, r8
					        cmp_pp r8.xz, -r15_abs.y, c22.xyyw, r8
					        cmp_pp r8.xz, -r15_abs.z, c22.zyww, r8
					        cmp_pp r8.xz, -r15_abs.w, c22.wyzw, r8
					        cmp_pp r8.xz, -r11.y, c22.yyxw, r8
					        cmp_pp r8.xz, -r16_abs.x, c23.xyyw, r8
					        cmp_pp r8.xz, -r16_abs.y, c23.zyww, r8
					        cmp_pp r8.xz, -r16_abs.z, -c23.wyzw, r8
					        cmp_pp r8.xz, -r16_abs.w, -c23.yyxw, r8
					        cmp_pp r8.xy, -r8_abs.y, -c22, r8.xzzw
					        cmp_pp r8.xy, -r9_abs.y, -c22.zwzw, r8
					        cmp_pp r8.xy, -r10_abs.y, -c22.wzzw, r8
					        cmp_pp r8.xy, -r11_abs.w, -c22.yxzw, r8
					        cmp_pp r8.xy, -r18_abs.y, -c23, r8
					        cmp_pp r8.xy, -r18_abs.w, -c23.zwzw, r8
					        cmp_pp r8.xy, -r19_abs.y, c23.wzzw, r8
					        cmp_pp r8.xy, -r19_abs.w, c23.yxzw, r8
					        cmp_pp r8.xy, -r12_abs.y, c24, r8
					        cmp_pp r8.xy, -r12_abs.w, c24.yxzw, r8
					        cmp_pp r8.xy, -r17_abs.y, c24.zxzw, r8
					        cmp_pp r8.xy, -r8_abs.w, c24.wyzw, r8
					        cmp_pp r8.xy, -r9_abs.w, c24.wzzw, r8
					        cmp_pp r8.xy, -r10_abs.w, c24.zwzw, r8
					        cmp_pp r8.xy, -r17.z, c24.ywzw, r8
					        mad_pp r5.xy, r8, r1.zwzw, v0
					        texldl_pp r8, r5, s0
					        add_pp r4.w, -r0.w, r8.w
					        mul r4.w, r4_abs.w, -c2.z
					        add r9, r3.w, c26
					        add r10, r3.w, c27
					        add r11, r3.w, c28
					        add r12, r3.w, c29
					        add r13, r3.w, c30
					        add r14, r3.w, c14
					        add r15, r3.w, c15
					        add r18, r3.w, c31
					        add r19, r3.w, c32
					        add r20, r3.w, c33
					        add r17.xyz, r3.w, c25
					        cmp r5.x, -r9_abs.x, c3.x, c3.y
					        cmp r21.xyz, -r9_abs.y, c3.x, r5.x
					        cmp r9.xyz, -r9_abs.z, c3.x, r21
					        cmp r9.xyz, -r9_abs.w, c3.x, r9
					        cmp r9.xyz, -r10_abs.x, c3.x, r9
					        cmp r9.xyz, -r10_abs.y, c3.x, r9
					        cmp r9.xyz, -r10_abs.z, c3.x, r9
					        cmp r9.xyz, -r10_abs.w, c3.x, r9
					        cmp r9.xyz, -r11_abs.x, c3.x, r9
					        cmp r9.xyz, -r11_abs.y, c3.x, r9
					        cmp r9.xyz, -r11_abs.z, c3.x, r9
					        cmp r9.xyz, -r11_abs.w, c3.x, r9
					        cmp r9.xyz, -r12_abs.x, c3.x, r9
					        cmp r9.xyz, -r12_abs.y, c3.x, r9
					        cmp r9.xyz, -r12_abs.z, c3.x, r9
					        cmp r9.xyz, -r12_abs.w, c3.x, r9
					        cmp r9.xyz, -r13_abs.x, c3.x, r9
					        cmp r9.xyz, -r13_abs.y, c3.x, r9
					        cmp r9.xyz, -r13_abs.z, c3.x, r9
					        cmp r9.xyz, -r13_abs.w, c3.x, r9
					        cmp r9.xyz, -r14_abs.x, c3.x, r9
					        cmp r9.xyz, -r14_abs.y, c3.x, r9
					        cmp r9.xyz, -r14_abs.z, c3.x, r9
					        cmp r9.xyz, -r14_abs.w, c3.x, r9
					        cmp r9.xyz, -r15_abs.x, c25.w, r9
					        cmp r9.xyz, -r15_abs.y, c25.w, r9
					        cmp r9.xyz, -r15_abs.z, c25.w, r9
					        cmp r9.xyz, -r15_abs.w, c25.w, r9
					        cmp r9.xyz, -r16_abs.x, c25.w, r9
					        cmp r9.xyz, -r16_abs.y, c25.w, r9
					        cmp r9.xyz, -r16_abs.z, c25.w, r9
					        cmp r9.xyz, -r16_abs.w, c25.w, r9
					        cmp r9.xyz, -r18_abs.x, c25.w, r9
					        cmp r9.xyz, -r18_abs.y, c25.w, r9
					        cmp r9.xyz, -r18_abs.z, c25.w, r9
					        cmp r9.xyz, -r18_abs.w, c25.w, r9
					        cmp r9.xyz, -r19_abs.x, c25.w, r9
					        cmp r9.xyz, -r19_abs.y, c25.w, r9
					        cmp r9.xyz, -r19_abs.z, c25.w, r9
					        cmp r9.xyz, -r19_abs.w, c25.w, r9
					        cmp r9.xyz, -r20_abs.x, c18.x, r9
					        cmp r9.xyz, -r20_abs.y, c18.x, r9
					        cmp r9.xyz, -r20_abs.z, c18.x, r9
					        cmp r9.xyz, -r20_abs.w, c18.x, r9
					        cmp r9.xyz, -r17_abs.x, c18.x, r9
					        cmp r9.xyz, -r17_abs.y, c18.x, r9
					        cmp r9.xyz, -r17_abs.z, c18.x, r9
					        mad_pp r4.w, r4.w, r9.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r1.x, -c3.x
					        mad_pp r6.w, r5.y, c2.x, c2.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.w, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r6.w, r9.z, r1.y, -c3.x
					        mad_pp r7.w, r6.w, c2.x, c2.y
					        mul_pp r6.w, r6.w, r6.w
					        mad_pp r6.w, r7.w, -r6.w, c3.x
					        mul_pp r5.x, r5.x, r6.w
					        cmp_pp r4.w, r4.w, r5.x, c3.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r6.xyz, r8, r5.y, r6
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r7.xyz, r8, r4.w, r7
					        mov r3.w, r17.w
					      endrep
					      add_pp r0.w, r2.x, c18.y
					      rcp r0.w, r0.w
					      add_pp r1.x, r2.w, c18.y
					      rcp r1.x, r1.x
					      mul_sat_pp r1.yz, r2.xwxw, c18.z
					      mad_pp r2.xzw, r7.xyyz, r1.x, -r0.xyyz
					      mad_pp r0.xyz, r1.y, r2.xzww, r0
					      max_pp r3.x, r2.y, r1.z
					      mad_pp r1.xyw, r6.xyzz, r0.w, -r0.xyzz
					      mad_pp oC0.xyz, r3.x, r1.xyww, r0
					      mov_pp oC0.w, r1.z
					    endif
					
					// approximately 191 instruction slots used (4 texture, 187 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat19;
					float u_xlat20;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat19.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat19.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat19.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.x, u_xlat19.y);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					            u_xlat26.xy = u_xlat8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat8.xy = u_xlat8.xy * u_xlat8.xy;
					            u_xlat8.xy = (-u_xlat26.xy) * u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlat33 = u_xlat31 * u_xlat8.x;
					            u_xlat34 = u_xlat32 * u_xlat8.y;
					            u_xlat19.x = u_xlat31 * u_xlat8.x + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8.y + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, -0, -32, -11, -43
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 24, 23, 25, 26
					    def c5, -6, -38, -7, -39
					    def c6, -8, -40, -9, -41
					    def c7, -24, -25, -26, -27
					    def c8, -28, -29, -30, -31
					    def c9, -2, -34, -13, -45
					    def c10, -3, -14, -27, -35
					    def c11, -4, -36, -5, -37
					    def c12, -10, -42, -46, 2
					    def c13, -1, -33, -12, -44
					    def c14, -15, -16, -17, -18
					    def c15, -19, -20, -21, -22
					    def c16, -20, -21, -22, -23
					    def c17, -2, 3, 0.5, 0.00999999978
					    def c18, 0.330000013, 9.99999975e-005, 0.0408163257, 0
					    def c19, 0.991439998, 0.13053, 0, -0.13053
					    def c20, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c21, -0.382679999, 0.923879981, -0.608759999, 0.793349981
					    def c22, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c23, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c24, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c25, -44, -45, -46, 0.660000026
					    def c26, -0, -1, -2, -3
					    def c27, -4, -5, -6, -7
					    def c28, -8, -9, -10, -11
					    def c29, -12, -13, -14, -15
					    def c30, -16, -17, -18, -19
					    def c31, -32, -33, -34, -35
					    def c32, -36, -37, -38, -39
					    def c33, -40, -41, -42, -43
					    defi i0, 24, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c17.x, c17.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.xy, r1, c1
					    mul_pp r1.zw, r1.xyxy, c17.z
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c17.w
					      mov_pp oC0.xyz, r0
					      mov_pp oC0.w, c3.y
					    else
					      mul_pp r1.zw, r2.x, c0.xyxy
					      cmp_pp r2.y, r0.w, c3.y, -r0.w
					      max_pp r2.z, r0.w, c3.y
					      mul_pp r3.xyz, r0, r2.y
					      mul_pp r4.xyz, r0, r2.z
					      mad_pp r1.xy, r1, c17.z, c17.w
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mov_pp r5.zw, c3.y
					      mov_pp r6.zw, c3.y
					      mov_pp r7.xyz, r3
					      mov_pp r8.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c3.y
					      rep i0
					        add r9, r3.w, c2
					        add r10, r3.w, c13
					        add r11, r3.w, c9
					        add r12, r3.w, c10.yzxw
					        add r13, r3.w, c6
					        add r14, r3.w, c14
					        add r15, r3.w, c15
					        add r16, r3.w, -c4.yxzw
					        add r17, r3.w, c8
					        add r18, r3.w, c12
					        add r19, r3.w, c11
					        add r20, r3.w, c5
					        mov r12.xy, r12_abs
					        mov r18.z, r18_abs.z
					        cmp r21, -r9_abs.x, c19.xyxy, c19.z
					        cmp r21, -r10_abs.x, c20.xyxy, r21
					        cmp r21, -r11_abs.x, c20.zwzw, r21
					        cmp r21, -r12_abs.z, c20.wzwz, r21
					        cmp r21, -r19_abs.x, c20.yxyx, r21
					        cmp r21, -r19_abs.z, c19.yxyx, r21
					        cmp r21, -r20_abs.x, c19.wxwx, r21
					        cmp r21, -r20_abs.z, c21.xyxy, r21
					        cmp r21, -r13_abs.x, c21.zwzw, r21
					        cmp r21, -r13_abs.z, -c21.wzwz, r21
					        cmp r21, -r18_abs.x, -c21.yxyx, r21
					        cmp r21, -r9_abs.z, -c19.xwxw, r21
					        cmp r21, -r10_abs.z, -c19.xyxy, r21
					        cmp r21, -r11_abs.z, -c20.xyxy, r21
					        cmp r21, -r12.x, -c20.zwzw, r21
					        cmp r21, -r14_abs.x, -c20.wzwz, r21
					        cmp r21, -r14_abs.y, -c20.yxyx, r21
					        cmp r21, -r14_abs.z, -c19.yxyx, r21
					        cmp r14, -r14_abs.w, -c19.wxwx, r21
					        cmp r14, -r15_abs.x, -c21.xyxy, r14
					        cmp r14, -r15_abs.y, -c21.zwzw, r14
					        cmp r14, -r15_abs.z, c21.wzwz, r14
					        cmp r14, -r15_abs.w, c21.yxyx, r14
					        cmp r14, -r16_abs.x, c19.xwxw, r14
					        cmp r14, -r16_abs.y, c22.xyxy, r14
					        cmp r14, -r16_abs.z, c22.zwzw, r14
					        cmp r14, -r16_abs.w, c22.wzwz, r14
					        cmp r14, -r12.y, c22.yxyx, r14
					        cmp r14, -r17_abs.x, c23.xyxy, r14
					        cmp r14, -r17_abs.y, c23.zwzw, r14
					        cmp r14, -r17_abs.z, -c23.wzwz, r14
					        cmp r14, -r17_abs.w, -c23.yxyx, r14
					        cmp r14, -r9_abs.y, -c22.xyxy, r14
					        cmp r14, -r10_abs.y, -c22.zwzw, r14
					        cmp r14, -r11_abs.y, -c22.wzwz, r14
					        cmp r12, -r12_abs.w, -c22.yxyx, r14
					        cmp r12, -r19_abs.y, -c23.xyxy, r12
					        cmp r12, -r19_abs.w, -c23.zwzw, r12
					        cmp r12, -r20_abs.y, c23.wzwz, r12
					        cmp r12, -r20_abs.w, c23.yxyx, r12
					        cmp r12, -r13_abs.y, c24.xyxy, r12
					        cmp r12, -r13_abs.w, c24.yxyx, r12
					        cmp r12, -r18_abs.y, c24.zxzx, r12
					        cmp r9, -r9_abs.w, c24.wywy, r12
					        cmp r9, -r10_abs.w, c24.wzwz, r9
					        cmp r9, -r11_abs.w, c24.zwzw, r9
					        cmp r9, -r18.z, c24.ywyw, r9
					        mad_pp r5.xy, r9, r1.zwzw, v0
					        texldl_pp r10, r5, s0
					        mov r11.z, c17.z
					        mad r5.xy, r5, c0.zwzw, -r11.z
					        frc r9.xy, r5
					        add r5.xy, r5, -r9
					        add_pp r5.xy, r5, c3.x
					        cmp r9.xy, -r9.zwzw, c3.y, c3.x
					        cmp r9.zw, r9, -c3.y, -c3.x
					        add r9.xy, r9.zwzw, r9
					        mad_pp r5.xy, r9, c17.z, r5
					        mul r6.xy, r5, c0
					        texldl_pp r9, r6, s0
					        add_pp r4.w, -r0.w, r9.w
					        mul r4.w, r4_abs.w, -c17.z
					        add r11, r3.w, c26
					        add r12, r3.w, c27
					        add r13, r3.w, c28
					        add r14, r3.w, c29
					        add r15, r3.w, c30
					        add r16, r3.w, c16
					        add r19, r3.w, c7
					        add r20, r3.w, c31
					        add r21, r3.w, c32
					        add r22, r3.w, c33
					        add r9.xyz, r3.w, c25
					        cmp r5.x, -r11_abs.x, c3.x, c3.y
					        cmp r18.xyz, -r11_abs.y, c3.x, r5.x
					        cmp r11.xyz, -r11_abs.z, c3.x, r18
					        cmp r11.xyz, -r11_abs.w, c3.x, r11
					        cmp r11.xyz, -r12_abs.x, c3.x, r11
					        cmp r11.xyz, -r12_abs.y, c3.x, r11
					        cmp r11.xyz, -r12_abs.z, c3.x, r11
					        cmp r11.xyz, -r12_abs.w, c3.x, r11
					        cmp r11.xyz, -r13_abs.x, c3.x, r11
					        cmp r11.xyz, -r13_abs.y, c3.x, r11
					        cmp r11.xyz, -r13_abs.z, c3.x, r11
					        cmp r11.xyz, -r13_abs.w, c3.x, r11
					        cmp r11.xyz, -r14_abs.x, c3.x, r11
					        cmp r11.xyz, -r14_abs.y, c3.x, r11
					        cmp r11.xyz, -r14_abs.z, c3.x, r11
					        cmp r11.xyz, -r14_abs.w, c3.x, r11
					        cmp r11.xyz, -r15_abs.x, c3.x, r11
					        cmp r11.xyz, -r15_abs.y, c3.x, r11
					        cmp r11.xyz, -r15_abs.z, c3.x, r11
					        cmp r11.xyz, -r15_abs.w, c3.x, r11
					        cmp r11.xyz, -r16_abs.x, c3.x, r11
					        cmp r11.xyz, -r16_abs.y, c3.x, r11
					        cmp r11.xyz, -r16_abs.z, c3.x, r11
					        cmp r11.xyz, -r16_abs.w, c3.x, r11
					        cmp r11.xyz, -r19_abs.x, c25.w, r11
					        cmp r11.xyz, -r19_abs.y, c25.w, r11
					        cmp r11.xyz, -r19_abs.z, c25.w, r11
					        cmp r11.xyz, -r19_abs.w, c25.w, r11
					        cmp r11.xyz, -r17_abs.x, c25.w, r11
					        cmp r11.xyz, -r17_abs.y, c25.w, r11
					        cmp r11.xyz, -r17_abs.z, c25.w, r11
					        cmp r11.xyz, -r17_abs.w, c25.w, r11
					        cmp r11.xyz, -r20_abs.x, c25.w, r11
					        cmp r11.xyz, -r20_abs.y, c25.w, r11
					        cmp r11.xyz, -r20_abs.z, c25.w, r11
					        cmp r11.xyz, -r20_abs.w, c25.w, r11
					        cmp r11.xyz, -r21_abs.x, c25.w, r11
					        cmp r11.xyz, -r21_abs.y, c25.w, r11
					        cmp r11.xyz, -r21_abs.z, c25.w, r11
					        cmp r11.xyz, -r21_abs.w, c25.w, r11
					        cmp r11.xyz, -r22_abs.x, c18.x, r11
					        cmp r11.xyz, -r22_abs.y, c18.x, r11
					        cmp r11.xyz, -r22_abs.z, c18.x, r11
					        cmp r11.xyz, -r22_abs.w, c18.x, r11
					        cmp r11.xyz, -r9_abs.x, c18.x, r11
					        cmp r11.xyz, -r9_abs.y, c18.x, r11
					        cmp r9.xyz, -r9_abs.z, c18.x, r11
					        mad_pp r4.w, r4.w, r9.x, c3.x
					        max_pp r5.x, r9.w, c3.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r1.x, -c3.x
					        mad_pp r6.x, r5.y, c17.x, c17.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.x, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r9.w
					        cmp_pp r5.y, r9.w, c3.y, r5.y
					        mad_sat_pp r6.x, r9.z, r1.y, -c3.x
					        mad_pp r6.y, r6.x, c17.x, c17.y
					        mul_pp r6.x, r6.x, r6.x
					        mad_pp r6.x, r6.y, -r6.x, c3.x
					        mul_pp r5.x, r5.x, r6.x
					        cmp_pp r4.w, r4.w, r5.x, c3.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r7.xyz, r10, r5.y, r7
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r8.xyz, r10, r4.w, r8
					        mov r3.w, r18.w
					      endrep
					      add_pp r0.w, r2.x, c18.y
					      rcp r0.w, r0.w
					      add_pp r1.x, r2.w, c18.y
					      rcp r1.x, r1.x
					      mul_sat_pp r1.yz, r2.xwxw, c18.z
					      mad_pp r2.xzw, r8.xyyz, r1.x, -r0.xyyz
					      mad_pp r0.xyz, r1.y, r2.xzww, r0
					      max_pp r3.x, r2.y, r1.z
					      mad_pp r1.xyw, r7.xyzz, r0.w, -r0.xyzz
					      mad_pp oC0.xyz, r3.x, r1.xyww, r0
					      mov_pp oC0.w, r1.z
					    endif
					
					// approximately 204 instruction slots used (6 texture, 198 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat34 * u_xlat7.x;
					            u_xlat27.x = u_xlat35 * u_xlat7.y;
					            u_xlat21.x = u_xlat34 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat21.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat21.xy;
					    u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.x, u_xlat21.y);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat7.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					            u_xlat27.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
					            u_xlat7.xy = (-u_xlat27.xy) * u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlat36 = u_xlat34 * u_xlat7.x;
					            u_xlat27.x = u_xlat35 * u_xlat7.y;
					            u_xlat21.x = u_xlat34 * u_xlat7.x + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat7.y + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2749036
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 1.17647052, 0.5
					    def c3, 24, 23, 25, 26
					    def c4, -2, 3, 0.00999999978, 0.5
					    def c5, -6, -38, -7, -39
					    def c6, -1, -33, -12, -44
					    def c7, -28, -29, -30, -31
					    def c8, -0, -32, -11, -43
					    def c9, -3, -14, -27, -35
					    def c10, -4, -36, -5, -37
					    def c11, -8, -40, -9, -41
					    def c12, -10, -42, -46, 2
					    def c13, -2, -34, -13, -45
					    def c14, -15, -16, -17, -18
					    def c15, -20, -21, -22, -23
					    def c16, -24, -25, -26, -27
					    def c17, -19, -20, -21, -22
					    def c18, 0.330000013, 9.99999975e-005, 0.0408163257, 0
					    def c19, 0.991439998, 0.13053, 0, -0.13053
					    def c20, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c21, -0.382679999, 0.923879981, -0.608759999, 0.793349981
					    def c22, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c23, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c24, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c25, -44, -45, -46, 0.660000026
					    def c26, -0, -1, -2, -3
					    def c27, -4, -5, -6, -7
					    def c28, -8, -9, -10, -11
					    def c29, -12, -13, -14, -15
					    def c30, -16, -17, -18, -19
					    def c31, -32, -33, -34, -35
					    def c32, -36, -37, -38, -39
					    def c33, -40, -41, -42, -43
					    defi i0, 24, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r1.w, r0.x
					    mul_sat_pp r0.x, r1.w, c2.z
					    mad_pp r0.y, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r0.x, c1.y
					    mul_sat_pp r0.z, r2.x, -c2.z
					    mad_pp r0.w, r0.z, c4.x, c4.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r0.yw, r0.xxzz, c2.w
					    max_pp r2.x, r0.y, r0.w
					    if_lt r2.x, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, c2.y
					    else
					      mul_pp r0.yw, r2.x, c0.xxzy
					      cmp_pp r2.y, r1.w, c2.y, -r1.w
					      max_pp r2.z, r1.w, c2.y
					      mul_pp r3.xyz, r1, r2.y
					      mul_pp r4.xyz, r1, r2.z
					      mad_pp r0.z, r0.z, c4.w, c4.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c4.w, c4.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r2.x
					      mov_pp r5.zw, c2.y
					      mov_pp r6.xyz, r3
					      mov_pp r7.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c2.y
					      rep i0
					        add r8, r3.w, c8
					        add r9, r3.w, c6
					        add r10, r3.w, c13
					        add r11, r3.w, c9.yzxw
					        add r12, r3.w, c11
					        add r13, r3.w, c14
					        add r14, r3.w, c17
					        add r15, r3.w, -c3.yxzw
					        add r16, r3.w, c7
					        add r17, r3.w, c12
					        add r18, r3.w, c10
					        add r19, r3.w, c5
					        mov r11.xy, r11_abs
					        mov r17.z, r17_abs.z
					        cmp_pp r20.xy, -r8_abs.x, c19, c19.z
					        cmp_pp r20.xy, -r9_abs.x, c20, r20
					        cmp_pp r20.xy, -r10_abs.x, c20.zwzw, r20
					        cmp_pp r20.xy, -r11_abs.z, c20.wzzw, r20
					        cmp_pp r20.xy, -r18_abs.x, c20.yxzw, r20
					        cmp_pp r18.xz, -r18_abs.z, c19.yyxw, r20.xyyw
					        cmp_pp r18.xz, -r19_abs.x, c19.wyxw, r18
					        cmp_pp r18.xz, -r19_abs.z, c21.xyyw, r18
					        cmp_pp r18.xz, -r12_abs.x, c21.zyww, r18
					        cmp_pp r12.xz, -r12_abs.z, -c21.wyzw, r18
					        cmp_pp r12.xz, -r17_abs.x, -c21.yyxw, r12
					        cmp_pp r8.xz, -r8_abs.z, -c19.xyww, r12
					        cmp_pp r8.xz, -r9_abs.z, -c19.xyyw, r8
					        cmp_pp r8.xz, -r10_abs.z, -c20.xyyw, r8
					        cmp_pp r8.xz, -r11.x, -c20.zyww, r8
					        cmp_pp r8.xz, -r13_abs.x, -c20.wyzw, r8
					        cmp_pp r8.xz, -r13_abs.y, -c20.yyxw, r8
					        cmp_pp r8.xz, -r13_abs.z, -c19.yyxw, r8
					        cmp_pp r8.xz, -r13_abs.w, -c19.wyxw, r8
					        cmp_pp r8.xz, -r14_abs.x, -c21.xyyw, r8
					        cmp_pp r8.xz, -r14_abs.y, -c21.zyww, r8
					        cmp_pp r8.xz, -r14_abs.z, c21.wyzw, r8
					        cmp_pp r8.xz, -r14_abs.w, c21.yyxw, r8
					        cmp_pp r8.xz, -r15_abs.x, c19.xyww, r8
					        cmp_pp r8.xz, -r15_abs.y, c22.xyyw, r8
					        cmp_pp r8.xz, -r15_abs.z, c22.zyww, r8
					        cmp_pp r8.xz, -r15_abs.w, c22.wyzw, r8
					        cmp_pp r8.xz, -r11.y, c22.yyxw, r8
					        cmp_pp r8.xz, -r16_abs.x, c23.xyyw, r8
					        cmp_pp r8.xz, -r16_abs.y, c23.zyww, r8
					        cmp_pp r8.xz, -r16_abs.z, -c23.wyzw, r8
					        cmp_pp r8.xz, -r16_abs.w, -c23.yyxw, r8
					        cmp_pp r8.xy, -r8_abs.y, -c22, r8.xzzw
					        cmp_pp r8.xy, -r9_abs.y, -c22.zwzw, r8
					        cmp_pp r8.xy, -r10_abs.y, -c22.wzzw, r8
					        cmp_pp r8.xy, -r11_abs.w, -c22.yxzw, r8
					        cmp_pp r8.xy, -r18_abs.y, -c23, r8
					        cmp_pp r8.xy, -r18_abs.w, -c23.zwzw, r8
					        cmp_pp r8.xy, -r19_abs.y, c23.wzzw, r8
					        cmp_pp r8.xy, -r19_abs.w, c23.yxzw, r8
					        cmp_pp r8.xy, -r12_abs.y, c24, r8
					        cmp_pp r8.xy, -r12_abs.w, c24.yxzw, r8
					        cmp_pp r8.xy, -r17_abs.y, c24.zxzw, r8
					        cmp_pp r8.xy, -r8_abs.w, c24.wyzw, r8
					        cmp_pp r8.xy, -r9_abs.w, c24.wzzw, r8
					        cmp_pp r8.xy, -r10_abs.w, c24.zwzw, r8
					        cmp_pp r8.xy, -r17.z, c24.ywzw, r8
					        mad_pp r5.xy, r8, r0.ywzw, v0
					        texldl_pp r8, r5, s1
					        add_pp r4.w, -r1.w, r8.w
					        mul r4.w, r4_abs.w, -c2.w
					        add r9, r3.w, c26
					        add r10, r3.w, c27
					        add r11, r3.w, c28
					        add r12, r3.w, c29
					        add r13, r3.w, c30
					        add r14, r3.w, c15
					        add r15, r3.w, c16
					        add r18, r3.w, c31
					        add r19, r3.w, c32
					        add r20, r3.w, c33
					        add r17.xyz, r3.w, c25
					        cmp r5.x, -r9_abs.x, c2.x, c2.y
					        cmp r21.xyz, -r9_abs.y, c2.x, r5.x
					        cmp r9.xyz, -r9_abs.z, c2.x, r21
					        cmp r9.xyz, -r9_abs.w, c2.x, r9
					        cmp r9.xyz, -r10_abs.x, c2.x, r9
					        cmp r9.xyz, -r10_abs.y, c2.x, r9
					        cmp r9.xyz, -r10_abs.z, c2.x, r9
					        cmp r9.xyz, -r10_abs.w, c2.x, r9
					        cmp r9.xyz, -r11_abs.x, c2.x, r9
					        cmp r9.xyz, -r11_abs.y, c2.x, r9
					        cmp r9.xyz, -r11_abs.z, c2.x, r9
					        cmp r9.xyz, -r11_abs.w, c2.x, r9
					        cmp r9.xyz, -r12_abs.x, c2.x, r9
					        cmp r9.xyz, -r12_abs.y, c2.x, r9
					        cmp r9.xyz, -r12_abs.z, c2.x, r9
					        cmp r9.xyz, -r12_abs.w, c2.x, r9
					        cmp r9.xyz, -r13_abs.x, c2.x, r9
					        cmp r9.xyz, -r13_abs.y, c2.x, r9
					        cmp r9.xyz, -r13_abs.z, c2.x, r9
					        cmp r9.xyz, -r13_abs.w, c2.x, r9
					        cmp r9.xyz, -r14_abs.x, c2.x, r9
					        cmp r9.xyz, -r14_abs.y, c2.x, r9
					        cmp r9.xyz, -r14_abs.z, c2.x, r9
					        cmp r9.xyz, -r14_abs.w, c2.x, r9
					        cmp r9.xyz, -r15_abs.x, c25.w, r9
					        cmp r9.xyz, -r15_abs.y, c25.w, r9
					        cmp r9.xyz, -r15_abs.z, c25.w, r9
					        cmp r9.xyz, -r15_abs.w, c25.w, r9
					        cmp r9.xyz, -r16_abs.x, c25.w, r9
					        cmp r9.xyz, -r16_abs.y, c25.w, r9
					        cmp r9.xyz, -r16_abs.z, c25.w, r9
					        cmp r9.xyz, -r16_abs.w, c25.w, r9
					        cmp r9.xyz, -r18_abs.x, c25.w, r9
					        cmp r9.xyz, -r18_abs.y, c25.w, r9
					        cmp r9.xyz, -r18_abs.z, c25.w, r9
					        cmp r9.xyz, -r18_abs.w, c25.w, r9
					        cmp r9.xyz, -r19_abs.x, c25.w, r9
					        cmp r9.xyz, -r19_abs.y, c25.w, r9
					        cmp r9.xyz, -r19_abs.z, c25.w, r9
					        cmp r9.xyz, -r19_abs.w, c25.w, r9
					        cmp r9.xyz, -r20_abs.x, c18.x, r9
					        cmp r9.xyz, -r20_abs.y, c18.x, r9
					        cmp r9.xyz, -r20_abs.z, c18.x, r9
					        cmp r9.xyz, -r20_abs.w, c18.x, r9
					        cmp r9.xyz, -r17_abs.x, c18.x, r9
					        cmp r9.xyz, -r17_abs.y, c18.x, r9
					        cmp r9.xyz, -r17_abs.z, c18.x, r9
					        mad_pp r4.w, r4.w, r9.x, c2.x
					        max_pp r5.x, r8.w, c2.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r0.z, -c2.x
					        mad_pp r6.w, r5.y, c4.x, c4.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.w, -r5.y, c2.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c2.y, r5.y
					        mad_sat_pp r6.w, r9.z, r0.x, -c2.x
					        mad_pp r7.w, r6.w, c4.x, c4.y
					        mul_pp r6.w, r6.w, r6.w
					        mad_pp r6.w, r7.w, -r6.w, c2.x
					        mul_pp r5.x, r5.x, r6.w
					        cmp_pp r4.w, r4.w, r5.x, c2.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r6.xyz, r8, r5.y, r6
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r7.xyz, r8, r4.w, r7
					        mov r3.w, r17.w
					      endrep
					      add_pp r0.xy, r2.xwzw, c18.y
					      rcp r0.x, r0.x
					      rcp r0.y, r0.y
					      mul_sat_pp r0.zw, r2.xywx, c18.z
					      mad_pp r2.xzw, r7.xyyz, r0.y, -r1.xyyz
					      mad_pp r1.xyz, r0.z, r2.xzww, r1
					      max_pp r1.w, r2.y, r0.w
					      mad_pp r0.xyz, r6, r0.x, -r1
					      mad_pp oC0.xyz, r1.w, r0, r1
					      mov_pp oC0.w, r0.w
					    endif
					
					// approximately 199 instruction slots used (6 texture, 193 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat17;
					vec2 u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat10.x = u_xlat0.w * 1.17647052;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat10.x * -2.0 + 3.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat1.y = u_xlat10.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat28 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat28;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat19.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat19.x = max(u_xlat19.y, u_xlat19.x);
					    u_xlatb28 = u_xlat19.x>=0.00999999978;
					    if(u_xlatb28){
					        u_xlat2.xy = u_xlat19.xx * _MainTex_TexelSize.xy;
					        u_xlat28 = max((-u_xlat0.w), 0.0);
					        u_xlat20 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat20);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat19.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat19.x = u_xlat28;
					        u_xlat29 = u_xlat20;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat31 = max((-u_xlat7.w), 0.0);
					            u_xlat32 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat32 = abs(u_xlat32) * -0.5;
					            u_xlat32 = u_xlat32 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat32 = max(u_xlat32, 0.0);
					            u_xlat33 = max(u_xlat7.w, 0.0);
					            u_xlat32 = u_xlat32 * u_xlat33;
					            u_xlat33 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					            u_xlat34 = u_xlat33 * -2.0 + 3.0;
					            u_xlat33 = u_xlat33 * u_xlat33;
					            u_xlat33 = (-u_xlat34) * u_xlat33 + 1.0;
					            u_xlat34 = u_xlat31 * u_xlat33;
					            u_xlat8 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					            u_xlat17 = u_xlat8 * -2.0 + 3.0;
					            u_xlat8 = u_xlat8 * u_xlat8;
					            u_xlat8 = (-u_xlat17) * u_xlat8 + 1.0;
					            u_xlat17 = u_xlat32 * u_xlat8;
					            u_xlat19.x = u_xlat31 * u_xlat33 + u_xlat19.x;
					            u_xlat5.xyz = u_xlat7.xyz * vec3(u_xlat34) + u_xlat5.xyz;
					            u_xlat29 = u_xlat32 * u_xlat8 + u_xlat29;
					            u_xlat6.xyz = u_xlat7.xyz * vec3(u_xlat17) + u_xlat6.xyz;
					        }
					        u_xlat27 = u_xlat19.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat27);
					        u_xlat27 = u_xlat29 * 0.0408163257;
					        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					        u_xlat1.x = u_xlat19.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat27 = max(u_xlat1.x, u_xlat28);
					        u_xlat10.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 1.17647052, 0.5
					    def c3, 24, 23, 25, 26
					    def c4, -2, 3, 0.00999999978, 0.5
					    def c5, -20, -21, -22, -23
					    def c6, -28, -29, -30, -31
					    def c7, -0, -32, -11, -43
					    def c8, -1, -33, -12, -44
					    def c9, -2, -34, -13, -45
					    def c10, -3, -14, -27, -35
					    def c11, -4, -36, -5, -37
					    def c12, -6, -38, -7, -39
					    def c13, -8, -40, -9, -41
					    def c14, -10, -42, -46, 2
					    def c15, -15, -16, -17, -18
					    def c16, -19, -20, -21, -22
					    def c17, -24, -25, -26, -27
					    def c18, 0.330000013, 9.99999975e-005, 0.0408163257, 0
					    def c19, 0.991439998, 0.13053, 0, -0.13053
					    def c20, 0.923879981, 0.382679999, 0.793349981, 0.608759999
					    def c21, 0.647319973, 0.128759995, 0.54877001, 0.366679996
					    def c22, -0.382679999, 0.923879981, -0.608759999, 0.793349981
					    def c23, -0.128759995, 0.647319973, -0.366679996, 0.54877001
					    def c24, 0.304879993, 0.126289994, -0.126289994, -0.304879993
					    def c25, -44, -45, -46, 0.660000026
					    def c26, -0, -1, -2, -3
					    def c27, -4, -5, -6, -7
					    def c28, -8, -9, -10, -11
					    def c29, -12, -13, -14, -15
					    def c30, -16, -17, -18, -19
					    def c31, -32, -33, -34, -35
					    def c32, -36, -37, -38, -39
					    def c33, -40, -41, -42, -43
					    defi i0, 24, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r1.w, r0.x
					    mul_sat_pp r0.x, r1.w, c2.z
					    mad_pp r0.y, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r0.x, c1.y
					    mul_sat_pp r0.z, r2.x, -c2.z
					    mad_pp r0.w, r0.z, c4.x, c4.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r0.yw, r0.xxzz, c2.w
					    max_pp r2.x, r0.y, r0.w
					    if_lt r2.x, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, c2.y
					    else
					      mul_pp r0.yw, r2.x, c0.xxzy
					      cmp_pp r2.y, r1.w, c2.y, -r1.w
					      max_pp r2.z, r1.w, c2.y
					      mul_pp r3.xyz, r1, r2.y
					      mul_pp r4.xyz, r1, r2.z
					      mad_pp r0.z, r0.z, c4.w, c4.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c4.w, c4.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r2.x
					      mov_pp r5.zw, c2.y
					      mov_pp r6.zw, c2.y
					      mov_pp r7.xyz, r3
					      mov_pp r8.xyz, r4
					      mov_pp r2.xw, r2.yyzz
					      mov r3.w, c2.y
					      rep i0
					        add r9, r3.w, c7
					        add r10, r3.w, c8
					        add r11, r3.w, c9
					        add r12, r3.w, c10.yzxw
					        add r13, r3.w, c13
					        add r14, r3.w, c15
					        add r15, r3.w, c16
					        add r16, r3.w, -c3.yxzw
					        add r17, r3.w, c6
					        add r18, r3.w, c14
					        add r19, r3.w, c11
					        add r20, r3.w, c12
					        mov r12.xy, r12_abs
					        mov r18.z, r18_abs.z
					        cmp r21, -r9_abs.x, c19.xyxy, c19.z
					        cmp r21, -r10_abs.x, c20.xyxy, r21
					        cmp r21, -r11_abs.x, c20.zwzw, r21
					        cmp r21, -r12_abs.z, c20.wzwz, r21
					        cmp r21, -r19_abs.x, c20.yxyx, r21
					        cmp r21, -r19_abs.z, c19.yxyx, r21
					        cmp r21, -r20_abs.x, c19.wxwx, r21
					        cmp r21, -r20_abs.z, c22.xyxy, r21
					        cmp r21, -r13_abs.x, c22.zwzw, r21
					        cmp r21, -r13_abs.z, -c22.wzwz, r21
					        cmp r21, -r18_abs.x, -c22.yxyx, r21
					        cmp r21, -r9_abs.z, -c19.xwxw, r21
					        cmp r21, -r10_abs.z, -c19.xyxy, r21
					        cmp r21, -r11_abs.z, -c20.xyxy, r21
					        cmp r21, -r12.x, -c20.zwzw, r21
					        cmp r21, -r14_abs.x, -c20.wzwz, r21
					        cmp r21, -r14_abs.y, -c20.yxyx, r21
					        cmp r21, -r14_abs.z, -c19.yxyx, r21
					        cmp r14, -r14_abs.w, -c19.wxwx, r21
					        cmp r14, -r15_abs.x, -c22.xyxy, r14
					        cmp r14, -r15_abs.y, -c22.zwzw, r14
					        cmp r14, -r15_abs.z, c22.wzwz, r14
					        cmp r14, -r15_abs.w, c22.yxyx, r14
					        cmp r14, -r16_abs.x, c19.xwxw, r14
					        cmp r14, -r16_abs.y, c21.xyxy, r14
					        cmp r14, -r16_abs.z, c21.zwzw, r14
					        cmp r14, -r16_abs.w, c21.wzwz, r14
					        cmp r14, -r12.y, c21.yxyx, r14
					        cmp r14, -r17_abs.x, c23.xyxy, r14
					        cmp r14, -r17_abs.y, c23.zwzw, r14
					        cmp r14, -r17_abs.z, -c23.wzwz, r14
					        cmp r14, -r17_abs.w, -c23.yxyx, r14
					        cmp r14, -r9_abs.y, -c21.xyxy, r14
					        cmp r14, -r10_abs.y, -c21.zwzw, r14
					        cmp r14, -r11_abs.y, -c21.wzwz, r14
					        cmp r12, -r12_abs.w, -c21.yxyx, r14
					        cmp r12, -r19_abs.y, -c23.xyxy, r12
					        cmp r12, -r19_abs.w, -c23.zwzw, r12
					        cmp r12, -r20_abs.y, c23.wzwz, r12
					        cmp r12, -r20_abs.w, c23.yxyx, r12
					        cmp r12, -r13_abs.y, c24.xyxy, r12
					        cmp r12, -r13_abs.w, c24.yxyx, r12
					        cmp r12, -r18_abs.y, c24.zxzx, r12
					        cmp r9, -r9_abs.w, c24.wywy, r12
					        cmp r9, -r10_abs.w, c24.wzwz, r9
					        cmp r9, -r11_abs.w, c24.zwzw, r9
					        cmp r9, -r18.z, c24.ywyw, r9
					        mad_pp r5.xy, r9, r0.ywzw, v0
					        texldl_pp r10, r5, s1
					        mov r4.w, c2.w
					        mad r5.xy, r5, c0.zwzw, -r4.w
					        frc r9.xy, r5
					        add r5.xy, r5, -r9
					        add_pp r5.xy, r5, c2.x
					        cmp r9.xy, -r9.zwzw, c2.y, c2.x
					        cmp r9.zw, r9, -c2.y, -c2.x
					        add r9.xy, r9.zwzw, r9
					        mad_pp r5.xy, r9, c2.w, r5
					        mul r6.xy, r5, c0
					        texldl_pp r9, r6, s1
					        add_pp r4.w, -r1.w, r9.w
					        mul r4.w, r4_abs.w, -c2.w
					        add r11, r3.w, c26
					        add r12, r3.w, c27
					        add r13, r3.w, c28
					        add r14, r3.w, c29
					        add r15, r3.w, c30
					        add r16, r3.w, c5
					        add r19, r3.w, c17
					        add r20, r3.w, c31
					        add r21, r3.w, c32
					        add r22, r3.w, c33
					        add r9.xyz, r3.w, c25
					        cmp r5.x, -r11_abs.x, c2.x, c2.y
					        cmp r18.xyz, -r11_abs.y, c2.x, r5.x
					        cmp r11.xyz, -r11_abs.z, c2.x, r18
					        cmp r11.xyz, -r11_abs.w, c2.x, r11
					        cmp r11.xyz, -r12_abs.x, c2.x, r11
					        cmp r11.xyz, -r12_abs.y, c2.x, r11
					        cmp r11.xyz, -r12_abs.z, c2.x, r11
					        cmp r11.xyz, -r12_abs.w, c2.x, r11
					        cmp r11.xyz, -r13_abs.x, c2.x, r11
					        cmp r11.xyz, -r13_abs.y, c2.x, r11
					        cmp r11.xyz, -r13_abs.z, c2.x, r11
					        cmp r11.xyz, -r13_abs.w, c2.x, r11
					        cmp r11.xyz, -r14_abs.x, c2.x, r11
					        cmp r11.xyz, -r14_abs.y, c2.x, r11
					        cmp r11.xyz, -r14_abs.z, c2.x, r11
					        cmp r11.xyz, -r14_abs.w, c2.x, r11
					        cmp r11.xyz, -r15_abs.x, c2.x, r11
					        cmp r11.xyz, -r15_abs.y, c2.x, r11
					        cmp r11.xyz, -r15_abs.z, c2.x, r11
					        cmp r11.xyz, -r15_abs.w, c2.x, r11
					        cmp r11.xyz, -r16_abs.x, c2.x, r11
					        cmp r11.xyz, -r16_abs.y, c2.x, r11
					        cmp r11.xyz, -r16_abs.z, c2.x, r11
					        cmp r11.xyz, -r16_abs.w, c2.x, r11
					        cmp r11.xyz, -r19_abs.x, c25.w, r11
					        cmp r11.xyz, -r19_abs.y, c25.w, r11
					        cmp r11.xyz, -r19_abs.z, c25.w, r11
					        cmp r11.xyz, -r19_abs.w, c25.w, r11
					        cmp r11.xyz, -r17_abs.x, c25.w, r11
					        cmp r11.xyz, -r17_abs.y, c25.w, r11
					        cmp r11.xyz, -r17_abs.z, c25.w, r11
					        cmp r11.xyz, -r17_abs.w, c25.w, r11
					        cmp r11.xyz, -r20_abs.x, c25.w, r11
					        cmp r11.xyz, -r20_abs.y, c25.w, r11
					        cmp r11.xyz, -r20_abs.z, c25.w, r11
					        cmp r11.xyz, -r20_abs.w, c25.w, r11
					        cmp r11.xyz, -r21_abs.x, c25.w, r11
					        cmp r11.xyz, -r21_abs.y, c25.w, r11
					        cmp r11.xyz, -r21_abs.z, c25.w, r11
					        cmp r11.xyz, -r21_abs.w, c25.w, r11
					        cmp r11.xyz, -r22_abs.x, c18.x, r11
					        cmp r11.xyz, -r22_abs.y, c18.x, r11
					        cmp r11.xyz, -r22_abs.z, c18.x, r11
					        cmp r11.xyz, -r22_abs.w, c18.x, r11
					        cmp r11.xyz, -r9_abs.x, c18.x, r11
					        cmp r11.xyz, -r9_abs.y, c18.x, r11
					        cmp r9.xyz, -r9_abs.z, c18.x, r11
					        mad_pp r4.w, r4.w, r9.x, c2.x
					        max_pp r5.x, r9.w, c2.y
					        mul r5.x, r4.w, r5.x
					        mad_sat_pp r5.y, r9.y, r0.z, -c2.x
					        mad_pp r6.x, r5.y, c4.x, c4.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r6.x, -r5.y, c2.x
					        mul_pp r5.y, r5.y, -r9.w
					        cmp_pp r5.y, r9.w, c2.y, r5.y
					        mad_sat_pp r6.x, r9.z, r0.x, -c2.x
					        mad_pp r6.y, r6.x, c4.x, c4.y
					        mul_pp r6.x, r6.x, r6.x
					        mad_pp r6.x, r6.y, -r6.x, c2.x
					        mul_pp r5.x, r5.x, r6.x
					        cmp_pp r4.w, r4.w, r5.x, c2.y
					        add_pp r2.x, r2.x, r5.y
					        mad_pp r7.xyz, r10, r5.y, r7
					        add_pp r2.w, r2.w, r4.w
					        mad_pp r8.xyz, r10, r4.w, r8
					        mov r3.w, r18.w
					      endrep
					      add_pp r0.xy, r2.xwzw, c18.y
					      rcp r0.x, r0.x
					      rcp r0.y, r0.y
					      mul_sat_pp r0.zw, r2.xywx, c18.z
					      mad_pp r2.xzw, r8.xyyz, r0.y, -r1.xyyz
					      mad_pp r1.xyz, r0.z, r2.xzww, r1
					      max_pp r1.w, r2.y, r0.w
					      mad_pp r0.xyz, r7, r0.x, -r1
					      mad_pp oC0.xyz, r1.w, r0, r1
					      mov_pp oC0.w, r0.w
					    endif
					
					// approximately 212 instruction slots used (8 texture, 204 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat34 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27.x = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27.x) * u_xlat17 + 1.0;
					            u_xlat27.x = u_xlat35 * u_xlat17;
					            u_xlat21.x = u_xlat34 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					ivec2 u_xlati9;
					vec3 u_xlat11;
					float u_xlat17;
					vec2 u_xlat21;
					float u_xlat22;
					vec2 u_xlat27;
					ivec2 u_xlati27;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat0.w, u_xlat1.x);
					    u_xlat11.x = u_xlat0.w * 1.17647052;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat11.x * -2.0 + 3.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat1.y = u_xlat11.x * _BlurCoe.y;
					    u_xlat1.x = u_xlat1.x * -1.17647052;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat31;
					    u_xlat1.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat21.xy = u_xlat1.yx * vec2(0.5, 0.5);
					    u_xlat21.x = max(u_xlat21.y, u_xlat21.x);
					    u_xlatb31 = u_xlat21.x>=0.00999999978;
					    if(u_xlatb31){
					        u_xlat2.xy = u_xlat21.xx * _MainTex_TexelSize.xy;
					        u_xlat31 = max((-u_xlat0.w), 0.0);
					        u_xlat22 = max(u_xlat0.w, 0.0);
					        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat22);
					        u_xlat1.x = u_xlat1.x * 0.5 + 0.00999999978;
					        u_xlat1.y = u_xlat1.y * 0.5 + 0.00999999978;
					        u_xlat1.xy = u_xlat21.xx / u_xlat1.xy;
					        u_xlat5.xyz = u_xlat3.xyz;
					        u_xlat6.xyz = u_xlat4.xyz;
					        u_xlat21.x = u_xlat31;
					        u_xlat32 = u_xlat22;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat7.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat7.xy = floor(u_xlat7.xy);
					            u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
					            u_xlati27.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati27.xy = (-u_xlati27.xy) + u_xlati9.xy;
					            u_xlat27.xy = vec2(u_xlati27.xy);
					            u_xlat7.xy = u_xlat27.xy * vec2(0.5, 0.5) + u_xlat7.xy;
					            u_xlat7.xy = u_xlat7.xy * _MainTex_TexelSize.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					            u_xlat34 = max((-u_xlat7.w), 0.0);
					            u_xlat35 = (-u_xlat0.w) + u_xlat7.w;
					            u_xlat35 = abs(u_xlat35) * -0.5;
					            u_xlat35 = u_xlat35 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat35 = max(u_xlat35, 0.0);
					            u_xlat36 = max(u_xlat7.w, 0.0);
					            u_xlat35 = u_xlat35 * u_xlat36;
					            u_xlat36 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.x + -1.0;
					            u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					            u_xlat7.x = u_xlat36 * -2.0 + 3.0;
					            u_xlat36 = u_xlat36 * u_xlat36;
					            u_xlat36 = (-u_xlat7.x) * u_xlat36 + 1.0;
					            u_xlat7.x = u_xlat34 * u_xlat36;
					            u_xlat17 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat1.y + -1.0;
					            u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					            u_xlat27.x = u_xlat17 * -2.0 + 3.0;
					            u_xlat17 = u_xlat17 * u_xlat17;
					            u_xlat17 = (-u_xlat27.x) * u_xlat17 + 1.0;
					            u_xlat27.x = u_xlat35 * u_xlat17;
					            u_xlat21.x = u_xlat34 * u_xlat36 + u_xlat21.x;
					            u_xlat5.xyz = u_xlat8.xyz * u_xlat7.xxx + u_xlat5.xyz;
					            u_xlat32 = u_xlat35 * u_xlat17 + u_xlat32;
					            u_xlat6.xyz = u_xlat8.xyz * u_xlat27.xxx + u_xlat6.xyz;
					        }
					        u_xlat30 = u_xlat21.x + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat5.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat6.xyz / vec3(u_xlat30);
					        u_xlat30 = u_xlat32 * 0.0408163257;
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat1.x = u_xlat21.x * 0.0408163257;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat30 = max(u_xlat1.x, u_xlat31);
					        u_xlat11.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        SV_Target0.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat3.xyz;
					        SV_Target0.w = u_xlat1.x;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2776645
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   float4 _BlurParams;
					//   float4 _BoostParams;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   sampler2D _SecondTex;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _BlurCoe            c1       1
					//   _BlurParams         c2       1
					//   _BoostParams        c3       1
					//   _SecondTex          s0       1
					//   _MainTex            s1       1
					//   _CameraDepthTexture s2       1
					//
					
					    ps_3_0
					    def c4, 1, 0, -3, 5
					    def c5, 9.99999975e-006, 1, -1, 3.030303
					    def c6, 0.300000012, 0.589999974, 0.109999999, -0.00999999978
					    def c7, -2, 3, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c4.xxyy, v0.xyxx
					    texldl_pp r1, r0, s0
					    texldl_pp r0, r0, s1
					    max_pp r2.x, r1.y, r1.z
					    max_pp r3.x, r1.x, r2.x
					    rcp_pp r2.x, r3.x
					    mul_pp r2.xyz, r1, r2.x
					    mad_pp r2.w, r3.x, -c4.z, c4.x
					    add r3.xy, -r3.x, c4.xwzw
					    mul_pp r2.xyz, r2.w, r2
					    rcp r2.w, r3.y
					    mul_pp r2.xyz, r2.w, r2
					    cmp_pp r1.xyz, r3.x, r1, r2
					    texld_pp r2, v0, s2
					    mad r2.x, c0.x, r2.x, c0.y
					    rcp_pp r2.x, r2.x
					    add r2.y, r2.x, c5.x
					    add_pp r2.x, r2.x, -c2.z
					    rcp r2.y, r2.y
					    mul r2.z, r2_abs.x, c2.x
					    cmp r2.x, r2.x, c5.y, c5.z
					    mad_sat r2.y, r2.z, r2.y, -c2.w
					    mul_pp r2.x, r2.y, r2.x
					    cmp_pp r2.y, r2.x, c3.y, c3.x
					    mul_pp r2.y, r2.y, r2.x
					    mul_pp r2.yzw, r0.xxyz, r2.y
					    dp3_pp r3.x, r0, c6
					    add r3.x, r3.x, -c3.z
					    cmp_pp r2.yzw, r3.x, r2, c4.y
					    add_pp r3.xyz, r0, r2.yzww
					    mov r4.x, c4.x
					    mad r2.y, r2.x, -c1.y, r4.x
					    cmp_pp r2.x, r2.y, c4.y, r2.x
					    max_pp r4.x, r2.x, r1.w
					    mul_sat_pp r1.w, r4.x, c5.w
					    mad_pp r2.x, r1.w, c7.x, c7.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r2.y, r1.w, r2.x
					    mad r1.w, r2.x, r1.w, c6.w
					    lrp_pp r0.xyz, r2.y, r1, r3
					    mov_pp r3.w, r0.w
					    cmp_pp oC0, r1.w, r0, r3
					
					// approximately 44 instruction slots used (5 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / u_xlat1.x;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat5.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat5.x = abs(u_xlat5.x) * _BlurParams.x;
					    u_xlat9 = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1 = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1) ? -1.0 : 1.0;
					    u_xlat5.x = u_xlat5.x / u_xlat9;
					    u_xlat5.x = u_xlat5.x + (-_BlurParams.w);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat5.x * u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / u_xlat1.x;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat5.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat5.x = abs(u_xlat5.x) * _BlurParams.x;
					    u_xlat9 = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1 = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1) ? -1.0 : 1.0;
					    u_xlat5.x = u_xlat5.x / u_xlat9;
					    u_xlat5.x = u_xlat5.x + (-_BlurParams.w);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat5.x * u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2857002
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   float4 _BlurParams;
					//   float4 _BoostParams;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   sampler2D _SecondTex;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _BlurCoe            c1       1
					//   _BlurParams         c2       1
					//   _BoostParams        c3       1
					//   _SecondTex          s0       1
					//   _MainTex            s1       1
					//   _CameraDepthTexture s2       1
					//
					
					    ps_3_0
					    def c4, 1, 0, -3, 5
					    def c5, 0.300000012, 0.589999974, 0.109999999, 3.030303
					    def c6, -2, 3, -0.00999999978, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c4.xxyy, v0.xyxx
					    texldl_pp r1, r0, s0
					    texldl_pp r0, r0, s1
					    max_pp r2.x, r1.y, r1.z
					    max_pp r3.x, r1.x, r2.x
					    rcp_pp r2.x, r3.x
					    mul_pp r2.xyz, r1, r2.x
					    mad_pp r2.w, r3.x, -c4.z, c4.x
					    add r3.xy, -r3.x, c4.xwzw
					    mul_pp r2.xyz, r2.w, r2
					    rcp r2.w, r3.y
					    mul_pp r2.xyz, r2.w, r2
					    cmp_pp r1.xyz, r3.x, r1, r2
					    texld_pp r2, v0, s2
					    mad r2.x, c0.x, r2.x, c0.y
					    rcp_pp r2.x, r2.x
					    add r2.y, r2.x, -c1.z
					    mad_pp r2.xz, c2.zyxw, r2.x, c2.wyyw
					    max_pp r3.x, r2.z, -c4.x
					    mov_sat_pp r2.x, r2.x
					    min_pp r2.z, r3.x, c4.y
					    cmp_pp r2.x, r2.y, r2.x, r2.z
					    cmp_pp r2.y, r2.x, c3.y, c3.x
					    mul_pp r2.y, r2.y, r2.x
					    mul_pp r2.yzw, r0.xxyz, r2.y
					    dp3_pp r3.x, r0, c5
					    add r3.x, r3.x, -c3.z
					    cmp_pp r2.yzw, r3.x, r2, c4.y
					    add_pp r3.xyz, r0, r2.yzww
					    mov r4.x, c4.x
					    mad r2.y, r2.x, -c1.y, r4.x
					    cmp_pp r2.x, r2.y, c4.y, r2.x
					    max_pp r4.x, r2.x, r1.w
					    mul_sat_pp r1.w, r4.x, c5.w
					    mad_pp r2.x, r1.w, c6.x, c6.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r2.y, r1.w, r2.x
					    mad r1.w, r2.x, r1.w, c6.z
					    lrp_pp r0.xyz, r2.y, r1, r3
					    mov_pp r3.w, r0.w
					    cmp_pp oC0, r1.w, r0, r3
					
					// approximately 43 instruction slots used (5 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / u_xlat1.x;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat9 = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat9 = min(u_xlat9, 0.0);
					    u_xlat1.x = (u_xlatb5) ? u_xlat9 : u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat5;
					bool u_xlatb5;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat5.x = float(1.0) / u_xlat1.x;
					    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat9 = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat9 = min(u_xlat9, 0.0);
					    u_xlat1.x = (u_xlatb5) ? u_xlat9 : u_xlat1.x;
					    u_xlatb5 = u_xlat1.x<0.0;
					    u_xlat5.x = (u_xlatb5) ? _BoostParams.x : _BoostParams.y;
					    u_xlat5.x = u_xlat5.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3 = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3<_BoostParams.z;
					    u_xlat5.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat5.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb5 = 1.0<u_xlat5.x;
					    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
					    u_xlat12 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat12 = u_xlat12 * 3.030303;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat12<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2921163
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   float4 _BlurParams;
					//   float4 _BoostParams;
					//   sampler2D _CameraDepthTexture;
					//   float4 _Convolved_TexelSize;
					//   sampler2D _MainTex;
					//   sampler2D _SecondTex;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ZBufferParams       c0       1
					//   _BlurCoe             c1       1
					//   _BlurParams          c2       1
					//   _BoostParams         c3       1
					//   _Convolved_TexelSize c4       1
					//   _SecondTex           s0       1
					//   _MainTex             s1       1
					//   _CameraDepthTexture  s2       1
					//
					
					    ps_3_0
					    def c5, 0.666000009, 1, 0, -3
					    def c6, 1, 5, 9.99999975e-006, -1
					    def c7, 0.300000012, 0.589999974, 0.109999999, 3.030303
					    def c8, -2, 3, -0.00999999978, 0
					    def c9, 0.5, 1.5, -0.165999994, 0.165999994
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0.xy, c4, v0
					    frc_pp r0.zw, r0.xyxy
					    add_pp r0.xy, -r0.zwzw, r0
					    add_pp r1, r0.xyxy, c9.xxyy
					    mad_pp r0.zw, v0.xyxy, c4.xyxy, -r1.xyxy
					    mul_pp r1.xy, r0.zwzw, r0.zwzw
					    mul_pp r2.xy, r0.zwzw, r1
					    mul_pp r2.zw, r2.xyxy, c9.z
					    mad_pp r2.zw, r1.xyxy, c9.x, r2
					    mad_pp r1.xy, r2, c9.x, -r1
					    mul_pp r2.xy, r2, c9.w
					    add_pp r1.xy, r1, c5.x
					    mad_pp r0.zw, r0, -c9.x, r2
					    add_pp r0.zw, r0, c9.w
					    add_pp r2.zw, -r0, c5.y
					    add_pp r0.zw, r1.xyxy, r0
					    add_pp r2.zw, -r1.xyxy, r2
					    rcp r3.x, r2.z
					    rcp r3.y, r2.w
					    mad_pp r1.zw, r2.xyxy, r3.xyxy, r1
					    mul_pp r3.xy, r1.zwzw, c4.zwzw
					    rcp r2.x, r0.z
					    rcp r2.y, r0.w
					    mad_pp r0.xy, r1, r2, r0
					    add_pp r0.xy, r0, -c9.x
					    mul_pp r1.xy, r0, c4.zwzw
					    mov r1.z, c5.z
					    mov r3.zw, r1.xyyz
					    texldl r4, r3.xzww, s0
					    texldl r5, r3.xyww, s0
					    mov_pp r1.w, r3.y
					    texldl r3, r1.xwzz, s0
					    texldl r1, r1.xyzz, s0
					    mul r1, r0.z, r1
					    mul r3, r0.z, r3
					    mul r5, r2.z, r5
					    mul r4, r2.z, r4
					    mul r4, r0.w, r4
					    mad r0, r1, r0.w, r4
					    mad r0, r3, r2.w, r0
					    mad_pp r0, r5, r2.w, r0
					    max_pp r1.x, r0.y, r0.z
					    max_pp r2.x, r0.x, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.xyz, r0, r1.x
					    mad_pp r1.w, r2.x, -c5.w, c5.y
					    add r2.xy, -r2.x, c6
					    mul_pp r1.xyz, r1.w, r1
					    rcp r1.w, r2.y
					    mul_pp r1.xyz, r1.w, r1
					    cmp_pp r0.xyz, r2.x, r0, r1
					    texld_pp r1, v0, s2
					    mad r1.x, c0.x, r1.x, c0.y
					    rcp_pp r1.x, r1.x
					    add r1.y, r1.x, c6.z
					    add_pp r1.x, r1.x, -c2.z
					    rcp r1.y, r1.y
					    mul r1.z, r1_abs.x, c2.x
					    cmp r1.x, r1.x, c6.x, c6.w
					    mad_sat r1.y, r1.z, r1.y, -c2.w
					    mul_pp r1.x, r1.y, r1.x
					    mov r1.y, c5.y
					    mad r1.y, r1.x, -c1.y, r1.y
					    cmp_pp r1.y, r1.y, c5.z, r1.x
					    max_pp r2.x, r1.y, r0.w
					    mul_sat_pp r0.w, r2.x, c7.w
					    mad_pp r1.y, r0.w, c8.x, c8.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r1.z, r0.w, r1.y
					    mad r0.w, r1.y, r0.w, c8.z
					    cmp_pp r1.y, r1.x, c3.y, c3.x
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r2, c5.yyzz, v0.xyxx
					    texldl_pp r2, r2, s1
					    mul_pp r1.xyw, r1.x, r2.xyzz
					    dp3_pp r3.x, r2, c7
					    add r3.x, r3.x, -c3.z
					    cmp_pp r1.xyw, r3.x, r1, c5.z
					    add_pp r3.xyz, r1.xyww, r2
					    lrp_pp r2.xyz, r1.z, r0, r3
					    mov_pp r3.w, r2.w
					    cmp_pp oC0, r0.w, r2, r3
					
					// approximately 87 instruction slots used (11 texture, 76 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat12.xy);
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat13.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat2.xy = u_xlat13.xy * vec2(-0.165999994, -0.165999994);
					    u_xlat2.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat2.xy;
					    u_xlat1.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat13.xy = u_xlat13.xy * vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat1.xy + vec2(0.666000009, 0.666000009);
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat2.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat2.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat1.xy + u_xlat12.xy;
					    u_xlat2.xy = (-u_xlat1.xy) + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat3.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat1.xy = u_xlat13.xy / u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat3.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat1 = textureLod(_SecondTex, u_xlat3.xw, 0.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1;
					    u_xlat1 = u_xlat12.yyyy * u_xlat1;
					    u_xlat4 = textureLod(_SecondTex, u_xlat3.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat3.zy, 0.0);
					    u_xlat3 = textureLod(_SecondTex, u_xlat3.xy, 0.0);
					    u_xlat3 = u_xlat2.xxxx * u_xlat3;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat1;
					    u_xlat0 = u_xlat5 * u_xlat2.yyyy + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat2.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / u_xlat1.x;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat7.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat7.x = abs(u_xlat7.x) * _BlurParams.x;
					    u_xlat13.x = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1 = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1) ? -1.0 : 1.0;
					    u_xlat7.x = u_xlat7.x / u_xlat13.x;
					    u_xlat7.x = u_xlat7.x + (-_BlurParams.w);
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat12.xy);
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat13.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat2.xy = u_xlat13.xy * vec2(-0.165999994, -0.165999994);
					    u_xlat2.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat2.xy;
					    u_xlat1.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat13.xy = u_xlat13.xy * vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat1.xy + vec2(0.666000009, 0.666000009);
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat2.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat2.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat1.xy + u_xlat12.xy;
					    u_xlat2.xy = (-u_xlat1.xy) + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat3.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat1.xy = u_xlat13.xy / u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat3.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat1 = textureLod(_SecondTex, u_xlat3.xw, 0.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1;
					    u_xlat1 = u_xlat12.yyyy * u_xlat1;
					    u_xlat4 = textureLod(_SecondTex, u_xlat3.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat3.zy, 0.0);
					    u_xlat3 = textureLod(_SecondTex, u_xlat3.xy, 0.0);
					    u_xlat3 = u_xlat2.xxxx * u_xlat3;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat1;
					    u_xlat0 = u_xlat5 * u_xlat2.yyyy + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat2.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / u_xlat1.x;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat7.x = u_xlat1.x + (-_BlurParams.z);
					    u_xlat7.x = abs(u_xlat7.x) * _BlurParams.x;
					    u_xlat13.x = u_xlat1.x + 9.99999975e-06;
					    u_xlatb1 = u_xlat1.x<_BlurParams.z;
					    u_xlat1.x = (u_xlatb1) ? -1.0 : 1.0;
					    u_xlat7.x = u_xlat7.x / u_xlat13.x;
					    u_xlat7.x = u_xlat7.x + (-_BlurParams.w);
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3005083
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   float4 _BlurParams;
					//   float4 _BoostParams;
					//   sampler2D _CameraDepthTexture;
					//   float4 _Convolved_TexelSize;
					//   sampler2D _MainTex;
					//   sampler2D _SecondTex;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ZBufferParams       c0       1
					//   _BlurCoe             c1       1
					//   _BlurParams          c2       1
					//   _BoostParams         c3       1
					//   _Convolved_TexelSize c4       1
					//   _SecondTex           s0       1
					//   _MainTex             s1       1
					//   _CameraDepthTexture  s2       1
					//
					
					    ps_3_0
					    def c5, 0.666000009, 1, 1.5, 0
					    def c6, -3, 1, 5, 3.030303
					    def c7, 0.300000012, 0.589999974, 0.109999999, -0.00999999978
					    def c8, -2, 3, 0, 0
					    def c9, 0.5, -0.5, -0.165999994, 0.165999994
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0.xy, c4, v0
					    frc_pp r0.zw, r0.xyxy
					    add_pp r0.xy, -r0.zwzw, r0
					    add_pp r0.zw, r0.xyxy, c5.z
					    add_pp r1, r0.xyxy, c9.xxyy
					    mad_pp r0.xy, v0, c4, -r1
					    mul_pp r1.xy, r0, r0
					    mul_pp r2.xy, r0, r1
					    mul_pp r2.zw, r2.xyxy, c9.z
					    mad_pp r2.zw, r1.xyxy, c9.x, r2
					    mad_pp r1.xy, r2, c9.x, -r1
					    mul_pp r2.xy, r2, c9.w
					    add_pp r1.xy, r1, c5.x
					    mad_pp r0.xy, r0, -c9.x, r2.zwzw
					    add_pp r0.xy, r0, c9.w
					    add_pp r2.zw, -r0.xyxy, c5.y
					    add_pp r0.xy, r1, r0
					    add_pp r2.zw, -r1.xyxy, r2
					    rcp r3.x, r2.z
					    rcp r3.y, r2.w
					    mad_pp r0.zw, r2.xyxy, r3.xyxy, r0
					    mul_pp r3.xy, r0.zwzw, c4.zwzw
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    mad_pp r0.zw, r1.xyxy, r2.xyxy, r1
					    mul_pp r1.xy, r0.zwzw, c4.zwzw
					    mov r1.z, c5.w
					    mov r3.zw, r1.xyyz
					    texldl r4, r3.xzww, s0
					    texldl r5, r3.xyww, s0
					    mov_pp r1.w, r3.y
					    texldl r3, r1.xwzz, s0
					    texldl r1, r1.xyzz, s0
					    mul r1, r0.x, r1
					    mul r3, r0.x, r3
					    mul r5, r2.z, r5
					    mul r4, r2.z, r4
					    mul r4, r0.y, r4
					    mad r0, r1, r0.y, r4
					    mad r0, r3, r2.w, r0
					    mad_pp r0, r5, r2.w, r0
					    max_pp r1.x, r0.y, r0.z
					    max_pp r2.x, r0.x, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.xyz, r0, r1.x
					    mad_pp r1.w, r2.x, -c6.x, c6.y
					    add r2.xy, -r2.x, c6.yzzw
					    mul_pp r1.xyz, r1.w, r1
					    rcp r1.w, r2.y
					    mul_pp r1.xyz, r1.w, r1
					    cmp_pp r0.xyz, r2.x, r0, r1
					    texld_pp r1, v0, s2
					    mad r1.x, c0.x, r1.x, c0.y
					    rcp_pp r1.x, r1.x
					    add r1.y, r1.x, -c1.z
					    mad_pp r1.xz, c2.zyxw, r1.x, c2.wyyw
					    max_pp r2.x, r1.z, -c5.y
					    mov_sat_pp r1.x, r1.x
					    min_pp r1.z, r2.x, c5.w
					    cmp_pp r1.x, r1.y, r1.x, r1.z
					    mov r1.y, c5.y
					    mad r1.y, r1.x, -c1.y, r1.y
					    cmp_pp r1.y, r1.y, c5.w, r1.x
					    max_pp r2.x, r1.y, r0.w
					    mul_sat_pp r0.w, r2.x, c6.w
					    mad_pp r1.y, r0.w, c8.x, c8.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r1.z, r0.w, r1.y
					    mad r0.w, r1.y, r0.w, c7.w
					    cmp_pp r1.y, r1.x, c3.y, c3.x
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r2, c5.yyww, v0.xyxx
					    texldl_pp r2, r2, s1
					    mul_pp r1.xyw, r1.x, r2.xyzz
					    dp3_pp r3.x, r2, c7
					    add r3.x, r3.x, -c3.z
					    cmp_pp r1.xyw, r3.x, r1, c5.w
					    add_pp r3.xyz, r1.xyww, r2
					    lrp_pp r2.xyz, r1.z, r0, r3
					    mov_pp r3.w, r2.w
					    cmp_pp oC0, r0.w, r2, r3
					
					// approximately 86 instruction slots used (11 texture, 75 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					float u_xlat13;
					vec2 u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat1 = u_xlat0.xyxy + vec4(0.5, 0.5, -0.5, -0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat1.xy);
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat2.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat14.xy = u_xlat2.xy * vec2(-0.165999994, -0.165999994);
					    u_xlat14.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat14.xy;
					    u_xlat1.xy = u_xlat2.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat1.xy + vec2(0.666000009, 0.666000009);
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat14.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat14.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat1.xy + u_xlat12.xy;
					    u_xlat14.xy = (-u_xlat1.xy) + u_xlat14.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat1.xy + u_xlat1.zw;
					    u_xlat1.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat14.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat1.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat3 = textureLod(_SecondTex, u_xlat1.xw, 0.0);
					    u_xlat3 = u_xlat14.xxxx * u_xlat3;
					    u_xlat3 = u_xlat12.yyyy * u_xlat3;
					    u_xlat4 = textureLod(_SecondTex, u_xlat1.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat1.zy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, u_xlat1.xy, 0.0);
					    u_xlat1 = u_xlat14.xxxx * u_xlat1;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat3;
					    u_xlat0 = u_xlat5 * u_xlat14.yyyy + u_xlat0;
					    u_xlat0 = u_xlat1 * u_xlat14.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / u_xlat1.x;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat13 = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13 = min(u_xlat13, 0.0);
					    u_xlat1.x = (u_xlatb7) ? u_xlat13 : u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BlurCoe;
						vec4 _BlurParams;
						vec4 _BoostParams;
						vec4 _Convolved_TexelSize;
						vec4 unused_0_5[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					float u_xlat13;
					vec2 u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat1 = u_xlat0.xyxy + vec4(0.5, 0.5, -0.5, -0.5);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _Convolved_TexelSize.xy + (-u_xlat1.xy);
					    u_xlat1.xy = u_xlat12.xy * u_xlat12.xy;
					    u_xlat2.xy = u_xlat12.xy * u_xlat1.xy;
					    u_xlat14.xy = u_xlat2.xy * vec2(-0.165999994, -0.165999994);
					    u_xlat14.xy = u_xlat1.xy * vec2(0.5, 0.5) + u_xlat14.xy;
					    u_xlat1.xy = u_xlat2.xy * vec2(0.5, 0.5) + (-u_xlat1.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(0.165999994, 0.165999994);
					    u_xlat1.xy = u_xlat1.xy + vec2(0.666000009, 0.666000009);
					    u_xlat12.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + u_xlat14.xy;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.165999994, 0.165999994);
					    u_xlat14.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
					    u_xlat12.xy = u_xlat1.xy + u_xlat12.xy;
					    u_xlat14.xy = (-u_xlat1.xy) + u_xlat14.xy;
					    u_xlat1.xy = u_xlat1.xy / u_xlat12.xy;
					    u_xlat1.xy = u_xlat1.xy + u_xlat1.zw;
					    u_xlat1.zw = u_xlat1.xy * _Convolved_TexelSize.zw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat14.xy;
					    u_xlat0.xy = u_xlat0.xy + u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.5, 1.5);
					    u_xlat1.xy = u_xlat0.xy * _Convolved_TexelSize.zw;
					    u_xlat3 = textureLod(_SecondTex, u_xlat1.xw, 0.0);
					    u_xlat3 = u_xlat14.xxxx * u_xlat3;
					    u_xlat3 = u_xlat12.yyyy * u_xlat3;
					    u_xlat4 = textureLod(_SecondTex, u_xlat1.zw, 0.0);
					    u_xlat5 = textureLod(_SecondTex, u_xlat1.zy, 0.0);
					    u_xlat1 = textureLod(_SecondTex, u_xlat1.xy, 0.0);
					    u_xlat1 = u_xlat14.xxxx * u_xlat1;
					    u_xlat5 = u_xlat12.xxxx * u_xlat5;
					    u_xlat4 = u_xlat12.xxxx * u_xlat4;
					    u_xlat0 = u_xlat4 * u_xlat12.yyyy + u_xlat3;
					    u_xlat0 = u_xlat5 * u_xlat14.yyyy + u_xlat0;
					    u_xlat0 = u_xlat1 * u_xlat14.yyyy + u_xlat0;
					    u_xlat1.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat1.x = max(u_xlat0.x, u_xlat1.x);
					    u_xlat7.x = float(1.0) / u_xlat1.x;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xxx;
					    u_xlat2.x = (-u_xlat1.x) * -3.0 + 1.0;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = (-u_xlat1.x) + 5.0;
					    u_xlatb1 = 1.0<u_xlat1.x;
					    u_xlat7.xyz = u_xlat7.xyz / u_xlat2.xxx;
					    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat7.xyz : u_xlat0.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<_BlurCoe.z;
					    u_xlat1.xz = _BlurParams.zx * u_xlat1.xx + _BlurParams.wy;
					    u_xlat13 = max(u_xlat1.z, -1.0);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13 = min(u_xlat13, 0.0);
					    u_xlat1.x = (u_xlatb7) ? u_xlat13 : u_xlat1.x;
					    u_xlatb7 = u_xlat1.x<0.0;
					    u_xlat7.x = (u_xlatb7) ? _BoostParams.x : _BoostParams.y;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlatb3 = u_xlat3.x<_BoostParams.z;
					    u_xlat7.xyz = (bool(u_xlatb3)) ? vec3(0.0, 0.0, 0.0) : u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat7.x = u_xlat1.x * _BlurCoe.y;
					    u_xlatb7 = 1.0<u_xlat7.x;
					    u_xlat1.x = u_xlatb7 ? u_xlat1.x : float(0.0);
					    u_xlat18 = max(u_xlat0.w, u_xlat1.x);
					    u_xlat18 = u_xlat18 * 3.030303;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb0 = u_xlat18<0.00999999978;
					    u_xlat1.w = u_xlat2.w;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3074758
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c4.x, c4.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c4.z
					    else
					      mov r3.xz, c4
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.zw, c5.x
					      mov r4, c3.y
					      rep i0
					        mul_pp r5.w, r4.w, c5.y
					        mad_pp r6.xy, r5.w, r2, c2
					        mad_pp r3.xy, r6, r1.zwzw, v0
					        texldl_pp r6, r3, s0
					        mad_pp r3.x, r4.w, c5.z, c5.w
					        add_pp r3.y, -r0.w, r6.w
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r5.w, r6.w, c3.y
					        mul r5.w, r3.y, r5.w
					        mad_sat_pp r7.x, r3_abs.x, r1.x, -c3.x
					        mad_pp r7.y, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.y, -r7.x, c3.x
					        mul_pp r7.x, -r6.w, r7.x
					        cmp_pp r6.w, r6.w, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r7.x, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.x, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r5.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r6.w
					        mad_pp r4.xyz, r6, r6.w, r4
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r4.w, r4.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.y
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.z
					      mad_pp r2.xyz, r5, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r4, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 72 instruction slots used (4 texture, 68 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.200000003, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.400000006, -1, 9.99999975e-005, 0.333333343
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c5.x, c5.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c5.z
					    else
					      mov r3.xz, c5
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov r4.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.zw, c4.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.w, r5.w, c4.y
					        mad_pp r7.xy, r6.w, r2, c2
					        mul_pp r7.zw, r1, r7.xyxy
					        mad_pp r3.xy, r7, r1.zwzw, v0
					        texldl_pp r8, r3, s0
					        mov r9.z, c4.z
					        mad r3.xy, r3, c0.zwzw, r9.z
					        frc r7.xy, r3
					        add r3.xy, r3, -r7
					        add_pp r3.xy, r3, c3.x
					        cmp r7.xy, -r7.zwzw, c3.y, c3.x
					        cmp r7.zw, r7, -c3.y, -c3.x
					        add r7.xy, r7.zwzw, r7
					        mad_pp r3.xy, r7, c4.w, r3
					        mul r4.xy, r3, c0
					        texldl_pp r7, r4, s0
					        mad_pp r3.x, r5.w, c6.x, c6.y
					        add_pp r3.y, -r0.w, r7.w
					        mul r3.y, r3_abs.y, c4.z
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r4.x, r7.w, c3.y
					        mul r4.x, r3.y, r4.x
					        mad_sat_pp r4.y, r3_abs.x, r1.x, -c3.x
					        mad_pp r6.w, r4.y, c5.x, c5.y
					        mul_pp r4.y, r4.y, r4.y
					        mad_pp r4.y, r6.w, -r4.y, c3.x
					        mul_pp r4.y, r4.y, -r7.w
					        cmp_pp r4.y, r7.w, c3.y, r4.y
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r6.w, r3.x, c5.x, c5.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r6.w, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r4.x
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r4.y
					        mad_pp r5.xyz, r8, r4.y, r5
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r6.xyz, r8, r3.x, r6
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.w
					      mad_pp r2.xyz, r6, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r5, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 86 instruction slots used (6 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.200000003;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.400000006 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.333333343;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.333333343;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3116262
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3171758
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c4.x, c4.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c4
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4, s1
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r1.w, r7.w
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r8.x, r7.w, c3.y
					        mul r8.x, r4.y, r8.x
					        mad_sat_pp r8.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.z, r8.y, c4.x, c4.y
					        mul_pp r8.y, r8.y, r8.y
					        mad_pp r8.y, r8.z, -r8.y, c3.x
					        mul_pp r8.y, -r7.w, r8.y
					        cmp_pp r7.w, r7.w, c3.y, r8.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r8.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r7.w
					        mad_pp r5.xyz, r7, r7.w, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.y
					      rcp r2.y, r2.y
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r5.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 81 instruction slots used (6 texture, 75 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.200000003, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.400000006, -1, 9.99999975e-005, 0.333333343
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c5.x, c5.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c5.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c5
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov r5.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.w, c4.x
					      mov_pp r6.w, c4.x
					      mov r7, c3.y
					      rep i0
					        mul_pp r8.x, r7.w, c4.y
					        mad_pp r8.xy, r8.x, r3.xwzw, c2
					        mul_pp r8.zw, r3.xyyz, r8.xyxy
					        mad_pp r4.xy, r8, r3.yzzw, v0
					        texldl_pp r9, r4, s1
					        mov r10.z, c4.z
					        mad r4.xy, r4, c0.zwzw, r10.z
					        frc r8.xy, r4
					        add r4.xy, r4, -r8
					        add_pp r4.xy, r4, c3.x
					        cmp r8.xy, -r8.zwzw, c3.y, c3.x
					        cmp r8.zw, r8, -c3.y, -c3.x
					        add r8.xy, r8.zwzw, r8
					        mad_pp r4.xy, r8, c4.w, r4
					        mul r5.xy, r4, c0
					        texldl_pp r8, r5, s1
					        mad_pp r4.x, r7.w, c6.x, c6.y
					        add_pp r4.y, -r1.w, r8.w
					        mul r4.y, r4_abs.y, c4.z
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.y, r5.x
					        mad_sat_pp r5.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.x, r5.y, c5.x, c5.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r8.x, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.x, r4.x, c5.x, c5.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.x, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r5.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r5.y
					        mad_pp r6.xyz, r9, r5.y, r6
					        add_pp r6.w, r4.x, r6.w
					        mad_pp r7.xyz, r9, r4.x, r7
					        add r7.w, r7.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.z
					      rcp r2.y, r2.y
					      add_pp r2.z, r6.w, c6.z
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r6.w, c6.w
					      mul_sat_pp r2.w, r2.w, c6.w
					      mad_pp r3.yzw, r7.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r6.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 95 instruction slots used (8 texture, 87 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.333333343;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3271654
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.200000003, 0.400000006, -1
					    def c6, -0.5, 9.99999975e-005, 0.333333343, 0
					    defi i0, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.200000003;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.400000006 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.333333343;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.333333343;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3292108
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c4.x, c4.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c4.z
					    else
					      mov r3.xz, c4
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.zw, c5.x
					      mov r4, c3.y
					      rep i0
					        mul_pp r5.w, r4.w, c5.y
					        mad_pp r6.xy, r5.w, r2, c2
					        mad_pp r3.xy, r6, r1.zwzw, v0
					        texldl_pp r6, r3, s0
					        mad_pp r3.x, r4.w, c5.z, c5.w
					        add_pp r3.y, -r0.w, r6.w
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r5.w, r6.w, c3.y
					        mul r5.w, r3.y, r5.w
					        mad_sat_pp r7.x, r3_abs.x, r1.x, -c3.x
					        mad_pp r7.y, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.y, -r7.x, c3.x
					        mul_pp r7.x, -r6.w, r7.x
					        cmp_pp r6.w, r6.w, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r7.x, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.x, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r5.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r6.w
					        mad_pp r4.xyz, r6, r6.w, r4
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r4.w, r4.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.y
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.z
					      mad_pp r2.xyz, r5, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r4, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 72 instruction slots used (4 texture, 68 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.100000001, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.200000003, -1, 9.99999975e-005, 0.181818187
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c5.x, c5.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c5.z
					    else
					      mov r3.xz, c5
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov r4.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.zw, c4.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.w, r5.w, c4.y
					        mad_pp r7.xy, r6.w, r2, c2
					        mul_pp r7.zw, r1, r7.xyxy
					        mad_pp r3.xy, r7, r1.zwzw, v0
					        texldl_pp r8, r3, s0
					        mov r9.z, c4.z
					        mad r3.xy, r3, c0.zwzw, r9.z
					        frc r7.xy, r3
					        add r3.xy, r3, -r7
					        add_pp r3.xy, r3, c3.x
					        cmp r7.xy, -r7.zwzw, c3.y, c3.x
					        cmp r7.zw, r7, -c3.y, -c3.x
					        add r7.xy, r7.zwzw, r7
					        mad_pp r3.xy, r7, c4.w, r3
					        mul r4.xy, r3, c0
					        texldl_pp r7, r4, s0
					        mad_pp r3.x, r5.w, c6.x, c6.y
					        add_pp r3.y, -r0.w, r7.w
					        mul r3.y, r3_abs.y, c4.z
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r4.x, r7.w, c3.y
					        mul r4.x, r3.y, r4.x
					        mad_sat_pp r4.y, r3_abs.x, r1.x, -c3.x
					        mad_pp r6.w, r4.y, c5.x, c5.y
					        mul_pp r4.y, r4.y, r4.y
					        mad_pp r4.y, r6.w, -r4.y, c3.x
					        mul_pp r4.y, r4.y, -r7.w
					        cmp_pp r4.y, r7.w, c3.y, r4.y
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r6.w, r3.x, c5.x, c5.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r6.w, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r4.x
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r4.y
					        mad_pp r5.xyz, r8, r4.y, r5
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r6.xyz, r8, r3.x, r6
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.w
					      mad_pp r2.xyz, r6, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r5, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 86 instruction slots used (6 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.100000001;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.200000003 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.181818187;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.181818187;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3360284
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3471981
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c4.x, c4.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c4
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4, s1
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r1.w, r7.w
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r8.x, r7.w, c3.y
					        mul r8.x, r4.y, r8.x
					        mad_sat_pp r8.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.z, r8.y, c4.x, c4.y
					        mul_pp r8.y, r8.y, r8.y
					        mad_pp r8.y, r8.z, -r8.y, c3.x
					        mul_pp r8.y, -r7.w, r8.y
					        cmp_pp r7.w, r7.w, c3.y, r8.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r8.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r7.w
					        mad_pp r5.xyz, r7, r7.w, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.y
					      rcp r2.y, r2.y
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r5.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 81 instruction slots used (6 texture, 75 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.100000001, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.200000003, -1, 9.99999975e-005, 0.181818187
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c5.x, c5.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c5.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c5
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov r5.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.w, c4.x
					      mov_pp r6.w, c4.x
					      mov r7, c3.y
					      rep i0
					        mul_pp r8.x, r7.w, c4.y
					        mad_pp r8.xy, r8.x, r3.xwzw, c2
					        mul_pp r8.zw, r3.xyyz, r8.xyxy
					        mad_pp r4.xy, r8, r3.yzzw, v0
					        texldl_pp r9, r4, s1
					        mov r10.z, c4.z
					        mad r4.xy, r4, c0.zwzw, r10.z
					        frc r8.xy, r4
					        add r4.xy, r4, -r8
					        add_pp r4.xy, r4, c3.x
					        cmp r8.xy, -r8.zwzw, c3.y, c3.x
					        cmp r8.zw, r8, -c3.y, -c3.x
					        add r8.xy, r8.zwzw, r8
					        mad_pp r4.xy, r8, c4.w, r4
					        mul r5.xy, r4, c0
					        texldl_pp r8, r5, s1
					        mad_pp r4.x, r7.w, c6.x, c6.y
					        add_pp r4.y, -r1.w, r8.w
					        mul r4.y, r4_abs.y, c4.z
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.y, r5.x
					        mad_sat_pp r5.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.x, r5.y, c5.x, c5.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r8.x, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.x, r4.x, c5.x, c5.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.x, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r5.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r5.y
					        mad_pp r6.xyz, r9, r5.y, r6
					        add_pp r6.w, r4.x, r6.w
					        mad_pp r7.xyz, r9, r4.x, r7
					        add r7.w, r7.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.z
					      rcp r2.y, r2.y
					      add_pp r2.z, r6.w, c6.z
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r6.w, c6.w
					      mul_sat_pp r2.w, r2.w, c6.w
					      mad_pp r3.yzw, r7.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r6.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 95 instruction slots used (8 texture, 87 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.181818187;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3478478
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.100000001, 0.200000003, -1
					    def c6, -0.5, 9.99999975e-005, 0.181818187, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.100000001;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.200000003 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.181818187;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.181818187;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3583226
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c4.x, c4.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c4.z
					    else
					      mov r3.xz, c4
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.zw, c5.x
					      mov r4, c3.y
					      rep i0
					        mul_pp r5.w, r4.w, c5.y
					        mad_pp r6.xy, r5.w, r2, c2
					        mad_pp r3.xy, r6, r1.zwzw, v0
					        texldl_pp r6, r3, s0
					        mad_pp r3.x, r4.w, c5.z, c5.w
					        add_pp r3.y, -r0.w, r6.w
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r5.w, r6.w, c3.y
					        mul r5.w, r3.y, r5.w
					        mad_sat_pp r7.x, r3_abs.x, r1.x, -c3.x
					        mad_pp r7.y, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.y, -r7.x, c3.x
					        mul_pp r7.x, -r6.w, r7.x
					        cmp_pp r6.w, r6.w, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r7.x, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.x, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r5.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r6.w
					        mad_pp r4.xyz, r6, r6.w, r4
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r4.w, r4.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.y
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.z
					      mad_pp r2.xyz, r5, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r4, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 72 instruction slots used (4 texture, 68 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					float u_xlat14;
					vec2 u_xlat17;
					vec2 u_xlat18;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat6.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat6.x = abs(u_xlat6.x) * -0.5;
					            u_xlat6.x = u_xlat6.x * abs(u_xlat28) + 1.0;
					            u_xlat6.x = max(u_xlat6.x, 0.0);
					            u_xlat14 = max((-u_xlat5.w), 0.0);
					            u_xlat29 = max(u_xlat5.w, 0.0);
					            u_xlat29 = u_xlat6.x * u_xlat29;
					            u_xlat6.xz = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat6.xz = clamp(u_xlat6.xz, 0.0, 1.0);
					            u_xlat7.xy = u_xlat6.xz * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat6.xz = u_xlat6.xz * u_xlat6.xz;
					            u_xlat6.xz = (-u_xlat7.xy) * u_xlat6.xz + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat6.x * u_xlat14;
					            u_xlat30 = u_xlat29 * u_xlat6.z;
					            u_xlat18.x = u_xlat14 * u_xlat6.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat29 * u_xlat6.z + u_xlat18.y;
					            u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.0666666701, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.13333334, -1, 9.99999975e-005, 0.125
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    mul_sat_pp r1.xy, r0.w, c3.zwzw
					    mad_pp r1.zw, r1.xyxy, c5.x, c5.y
					    mul_pp r1.xy, r1, r1
					    mul_pp r1.xy, r1, r1.zwzw
					    mul_pp r1.zw, r1.xyxy, c1.xyxy
					    max_pp r2.x, r1.w, r1.z
					    if_lt r2.x, c5.z
					    else
					      mov r3.xz, c5
					      mad_pp r1.xy, r1, c1, r3.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_pp r1.xy, r1, r2.x
					      mul_pp r1.zw, r2.x, c0.xyxy
					      mul r2.xy, r3.x, c2
					      mov r3.zw, c3.y
					      mov r4.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.zw, c4.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.w, r5.w, c4.y
					        mad_pp r7.xy, r6.w, r2, c2
					        mul_pp r7.zw, r1, r7.xyxy
					        mad_pp r3.xy, r7, r1.zwzw, v0
					        texldl_pp r8, r3, s0
					        mov r9.z, c4.z
					        mad r3.xy, r3, c0.zwzw, r9.z
					        frc r7.xy, r3
					        add r3.xy, r3, -r7
					        add_pp r3.xy, r3, c3.x
					        cmp r7.xy, -r7.zwzw, c3.y, c3.x
					        cmp r7.zw, r7, -c3.y, -c3.x
					        add r7.xy, r7.zwzw, r7
					        mad_pp r3.xy, r7, c4.w, r3
					        mul r4.xy, r3, c0
					        texldl_pp r7, r4, s0
					        mad_pp r3.x, r5.w, c6.x, c6.y
					        add_pp r3.y, -r0.w, r7.w
					        mul r3.y, r3_abs.y, c4.z
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r4.x, r7.w, c3.y
					        mul r4.x, r3.y, r4.x
					        mad_sat_pp r4.y, r3_abs.x, r1.x, -c3.x
					        mad_pp r6.w, r4.y, c5.x, c5.y
					        mul_pp r4.y, r4.y, r4.y
					        mad_pp r4.y, r6.w, -r4.y, c3.x
					        mul_pp r4.y, r4.y, -r7.w
					        cmp_pp r4.y, r7.w, c3.y, r4.y
					        mad_sat_pp r3.x, r3_abs.x, r1.y, -c3.x
					        mad_pp r6.w, r3.x, c5.x, c5.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r6.w, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r4.x
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r2.z, r2.z, r4.y
					        mad_pp r5.xyz, r8, r4.y, r5
					        add_pp r2.w, r2.w, r3.x
					        mad_pp r6.xyz, r8, r3.x, r6
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r1.xy, r2.zwzw, c6.z
					      rcp r1.x, r1.x
					      rcp r1.y, r1.y
					      mul_sat_pp r1.zw, r2.xywz, c6.w
					      mad_pp r2.xyz, r6, r1.y, -r0
					      mad_pp r2.xyz, r1.z, r2, r0
					      cmp_pp r1.y, r0.w, c3.y, -r0.w
					      max_pp r2.w, r1.y, r1.w
					      mad_pp r3.xyz, r5, r1.x, -r2
					      mad_pp r2.xyz, r2.w, r3, r2
					      add_sat_pp r1.x, r1.w, r1.z
					      lrp_pp r3.xyz, r1.x, r2, r0
					      mov_pp r0.xyz, r3
					    endif
					    mov_pp oC0, r0
					
					// approximately 86 instruction slots used (6 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					ivec2 u_xlati7;
					vec3 u_xlat10;
					float u_xlat13;
					vec2 u_xlat17;
					vec2 u_xlat18;
					vec2 u_xlat21;
					ivec2 u_xlati21;
					float u_xlat25;
					bool u_xlatb25;
					int u_xlati27;
					float u_xlat28;
					bool u_xlatb28;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat17.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xy;
					    u_xlat17.xy = u_xlat1.xy * _BlurCoe.xy;
					    u_xlat17.x = max(u_xlat17.x, u_xlat17.y);
					    u_xlatb25 = u_xlat17.x>=0.00999999978;
					    if(u_xlatb25){
					        u_xlat1.xy = u_xlat1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat1.xy = u_xlat17.xx / u_xlat1.xy;
					        u_xlat17.xy = u_xlat17.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        u_xlat18.x = float(0.00100000005);
					        u_xlat18.y = float(0.00100000005);
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat28 = float(u_xlati_loop_1);
					            u_xlat5.x = u_xlat28 * 0.0666666701;
					            u_xlat5.xy = u_xlat5.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat21.xy = u_xlat17.xy * u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * u_xlat17.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat5.xy = floor(u_xlat5.xy);
					            u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					            u_xlati7.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat21.xyxx).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = ivec2(uvec2(lessThan(u_xlat21.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati21.xy = (-u_xlati7.xy) + u_xlati21.xy;
					            u_xlat21.xy = vec2(u_xlati21.xy);
					            u_xlat5.xy = u_xlat21.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					            u_xlat5.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					            u_xlat28 = u_xlat28 * 0.13333334 + -1.0;
					            u_xlat5.x = (-u_xlat0.w) + u_xlat5.w;
					            u_xlat5.x = abs(u_xlat5.x) * -0.5;
					            u_xlat5.x = u_xlat5.x * abs(u_xlat28) + 1.0;
					            u_xlat5.x = max(u_xlat5.x, 0.0);
					            u_xlat13 = max((-u_xlat5.w), 0.0);
					            u_xlat21.x = max(u_xlat5.w, 0.0);
					            u_xlat5.x = u_xlat5.x * u_xlat21.x;
					            u_xlat21.xy = abs(vec2(u_xlat28)) * u_xlat1.xy + vec2(-1.0, -1.0);
					            u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat21.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat21.xy = u_xlat21.xy * u_xlat21.xy;
					            u_xlat21.xy = (-u_xlat7.xy) * u_xlat21.xy + vec2(1.0, 1.0);
					            u_xlat28 = u_xlat21.x * u_xlat13;
					            u_xlat30 = u_xlat21.y * u_xlat5.x;
					            u_xlat18.x = u_xlat13 * u_xlat21.x + u_xlat18.x;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					            u_xlat18.y = u_xlat5.x * u_xlat21.y + u_xlat18.y;
					            u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat4.xyz;
					        }
					        u_xlat1.xw = u_xlat18.xy + vec2(9.99999975e-05, 9.99999975e-05);
					        u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.www;
					        u_xlat25 = u_xlat18.y * 0.125;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat2.x = u_xlat18.x * 0.125;
					        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat10.xyz = vec3(u_xlat25) * u_xlat10.xyz + u_xlat0.xyz;
					        u_xlat3.x = max((-u_xlat0.w), 0.0);
					        u_xlat3.x = max(u_xlat2.x, u_xlat3.x);
					        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat10.xyz);
					        u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat10.xyz;
					        u_xlat25 = u_xlat25 + u_xlat2.x;
					        u_xlat25 = min(u_xlat25, 1.0);
					        u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					        u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    }
					    SV_Target0 = u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3661488
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r0, r0, s0
					    min_pp r2.x, r0.y, r0.x
					    mul_sat_pp r0.x, r0.y, c3.z
					    mad_pp r0.z, r0.x, c4.x, c4.y
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.z, r0.x, c1.y
					    mul_sat_pp r0.w, r2.x, c3.w
					    mad_pp r2.x, r0.w, c4.x, c4.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, c1.x
					    max_pp r3.x, r0.z, r2.x
					    if_lt r3.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r2.xz, c4
					      mad_pp r0.z, r0.w, c1.x, r2.z
					      rcp r0.z, r0.z
					      mad_pp r0.x, r0.x, c1.y, r2.z
					      rcp r0.x, r0.x
					      mul_pp r0.xz, r0, r3.x
					      mul_pp r2.yz, r3.x, c0.xxyw
					      mul r2.xw, r2.x, c2.xyzy
					      mov r3.zw, c3.y
					      mov_pp r4.xyz, c3.y
					      mov_pp r0.w, c5.x
					      mov_pp r4.w, c5.x
					      mov r5, c3.y
					      rep i0
					        mul_pp r6.x, r5.w, c5.y
					        mad_pp r6.xy, r6.x, r2.xwzw, c2
					        mad_pp r3.xy, r6, r2.yzzw, v0
					        texldl_pp r6, r3.xyww, s1
					        texldl_pp r7, r3, s0
					        mad_pp r3.x, r5.w, c5.z, c5.w
					        add_pp r3.y, -r0.y, r7.y
					        mul r3.y, r3_abs.y, c6.x
					        mad_pp r3.y, r3.y, r3_abs.x, c3.x
					        max_pp r6.w, r7.y, c3.y
					        mul r6.w, r3.y, r6.w
					        mad_sat_pp r7.x, r3_abs.x, r0.z, -c3.x
					        mad_pp r7.z, r7.x, c4.x, c4.y
					        mul_pp r7.x, r7.x, r7.x
					        mad_pp r7.x, r7.z, -r7.x, c3.x
					        mul_pp r7.x, r7.x, -r7.y
					        cmp_pp r7.x, r7.y, c3.y, r7.x
					        mad_sat_pp r3.x, r3_abs.x, r0.x, -c3.x
					        mad_pp r7.y, r3.x, c4.x, c4.y
					        mul_pp r3.x, r3.x, r3.x
					        mad_pp r3.x, r7.y, -r3.x, c3.x
					        mul_pp r3.x, r3.x, r6.w
					        cmp_pp r3.x, r3.y, r3.x, c3.y
					        add_pp r0.w, r0.w, r7.x
					        mad_pp r4.xyz, r6, r7.x, r4
					        add_pp r4.w, r3.x, r4.w
					        mad_pp r5.xyz, r6, r3.x, r5
					        add r5.w, r5.w, c3.x
					      endrep
					      add_pp r0.x, r0.w, c6.y
					      rcp r0.x, r0.x
					      add_pp r0.z, r4.w, c6.y
					      rcp r0.z, r0.z
					      mul_sat_pp r2.x, r4.w, c6.z
					      mul_sat_pp r0.w, r0.w, c6.z
					      mad_pp r2.yzw, r5.xxyz, r0.z, -r1.xxyz
					      mad_pp r2.yzw, r2.x, r2, r1.xxyz
					      cmp_pp r0.y, r0.y, c3.y, -r0.y
					      max_pp r3.x, r0.y, r0.w
					      mad_pp r0.xyz, r4, r0.x, -r2.yzww
					      mad_pp r0.xyz, r3.x, r0, r2.yzww
					      add_sat_pp r2.x, r0.w, r2.x
					      add_pp r0.xyz, -r1, r0
					      mad_pp oC0.xyz, r2.x, r0, r1
					      max_pp oC0.w, r1.w, r0.w
					    endif
					
					// approximately 88 instruction slots used (8 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3678074
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c4.x, c4.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c4.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c4
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4, s1
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r1.w, r7.w
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r8.x, r7.w, c3.y
					        mul r8.x, r4.y, r8.x
					        mad_sat_pp r8.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.z, r8.y, c4.x, c4.y
					        mul_pp r8.y, r8.y, r8.y
					        mad_pp r8.y, r8.z, -r8.y, c3.x
					        mul_pp r8.y, -r7.w, r8.y
					        cmp_pp r7.w, r7.w, c3.y, r8.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r8.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r7.w
					        mad_pp r5.xyz, r7, r7.w, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.y
					      rcp r2.y, r2.y
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r5.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 81 instruction slots used (6 texture, 75 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat7.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat7.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat30 = u_xlat5.x * u_xlat21;
					            u_xlat7.x = u_xlat5.w * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _ThirdTex          s0       1
					//   _MainTex           s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0, -1.17647052, 1.17647052
					    def c4, 0.00100000005, 0.0666666701, -0.5, 0.5
					    def c5, -2, 3, 0.00999999978, 0
					    def c6, 0.13333334, -1, 9.99999975e-005, 0.125
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s1
					    mul_pp r2.x, r1.w, c2.z
					    mul_sat_pp r2.yz, r1.w, c3.xzww
					    mad_pp r3.xy, r2.yzzw, c5.x, c5.y
					    mul_pp r2.yz, r2, r2
					    mul_pp r2.yz, r2, r3.xxyw
					    mul_pp r3.xy, r2.yzzw, c1
					    max_pp r2.w, r3.y, r3.x
					    if_lt r2.w, c5.z
					      mov_pp oC0.xyz, r1
					      mov_pp oC0.w, r2.x
					    else
					      mov r3.xz, c5
					      mad_pp r2.yz, r2, c1.xxyw, r3.z
					      rcp r2.y, r2.y
					      rcp r2.z, r2.z
					      mul_pp r2.yz, r2, r2.w
					      mul_pp r3.yz, r2.w, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov r5.zw, c3.y
					      mov_pp r6.xyz, c3.y
					      mov_pp r2.w, c4.x
					      mov_pp r6.w, c4.x
					      mov r7, c3.y
					      rep i0
					        mul_pp r8.x, r7.w, c4.y
					        mad_pp r8.xy, r8.x, r3.xwzw, c2
					        mul_pp r8.zw, r3.xyyz, r8.xyxy
					        mad_pp r4.xy, r8, r3.yzzw, v0
					        texldl_pp r9, r4, s1
					        mov r10.z, c4.z
					        mad r4.xy, r4, c0.zwzw, r10.z
					        frc r8.xy, r4
					        add r4.xy, r4, -r8
					        add_pp r4.xy, r4, c3.x
					        cmp r8.xy, -r8.zwzw, c3.y, c3.x
					        cmp r8.zw, r8, -c3.y, -c3.x
					        add r8.xy, r8.zwzw, r8
					        mad_pp r4.xy, r8, c4.w, r4
					        mul r5.xy, r4, c0
					        texldl_pp r8, r5, s1
					        mad_pp r4.x, r7.w, c6.x, c6.y
					        add_pp r4.y, -r1.w, r8.w
					        mul r4.y, r4_abs.y, c4.z
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r5.x, r8.w, c3.y
					        mul r5.x, r4.y, r5.x
					        mad_sat_pp r5.y, r4_abs.x, r2.y, -c3.x
					        mad_pp r8.x, r5.y, c5.x, c5.y
					        mul_pp r5.y, r5.y, r5.y
					        mad_pp r5.y, r8.x, -r5.y, c3.x
					        mul_pp r5.y, r5.y, -r8.w
					        cmp_pp r5.y, r8.w, c3.y, r5.y
					        mad_sat_pp r4.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.x, r4.x, c5.x, c5.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.x, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r5.x
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r5.y
					        mad_pp r6.xyz, r9, r5.y, r6
					        add_pp r6.w, r4.x, r6.w
					        mad_pp r7.xyz, r9, r4.x, r7
					        add r7.w, r7.w, c3.x
					      endrep
					      add_pp r2.y, r2.w, c6.z
					      rcp r2.y, r2.y
					      add_pp r2.z, r6.w, c6.z
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r6.w, c6.w
					      mul_sat_pp r2.w, r2.w, c6.w
					      mad_pp r3.yzw, r7.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r1.w, r1.w, c3.y, -r1.w
					      max_pp r4.x, r1.w, r2.w
					      mad_pp r4.yzw, r6.xxyz, r2.y, -r3
					      mad_pp r3.yzw, r4.x, r4, r3
					      texldl_pp r0, r0, s0
					      min_pp r4.xyz, r0, r3.yzww
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r4.xxyz
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r2.x, r2.w
					    endif
					
					// approximately 95 instruction slots used (8 texture, 87 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					vec4 u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					ivec2 u_xlati22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1 = u_xlat0.w * _Offsets.z;
					    u_xlat9.xy = u_xlat0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat2.xy;
					    u_xlat2.xy = u_xlat9.xy * _BlurCoe.xy;
					    u_xlat25 = max(u_xlat2.x, u_xlat2.y);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat9.xy = u_xlat9.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat9.xy = vec2(u_xlat25) / u_xlat9.xy;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5.x = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5.x * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat6.xy = u_xlat2.xy * u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat13.xy = floor(u_xlat13.xy);
					            u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					            u_xlati22.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat6.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati6.xy = (-u_xlati22.xy) + u_xlati6.xy;
					            u_xlat6.xy = vec2(u_xlati6.xy);
					            u_xlat13.xy = u_xlat6.xy * vec2(0.5, 0.5) + u_xlat13.xy;
					            u_xlat13.xy = u_xlat13.xy * _MainTex_TexelSize.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat5.x = u_xlat5.x * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat0.w) + u_xlat6.w;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5.x) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat13.y = max((-u_xlat6.w), 0.0);
					            u_xlat29 = max(u_xlat6.w, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat5.xw = abs(u_xlat5.xx) * u_xlat9.xy + vec2(-1.0, -1.0);
					            u_xlat5.xw = clamp(u_xlat5.xw, 0.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat5.xw = u_xlat5.xw * u_xlat5.xw;
					            u_xlat5.xw = (-u_xlat6.xy) * u_xlat5.xw + vec2(1.0, 1.0);
					            u_xlat6.xy = u_xlat5.xw * u_xlat13.yx;
					            u_xlat25 = u_xlat13.y * u_xlat5.x + u_xlat25;
					            u_xlat3.xyz = u_xlat7.xyz * u_xlat6.xxx + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5.w + u_xlat27;
					            u_xlat4.xyz = u_xlat7.xyz * u_xlat6.yyy + u_xlat4.xyz;
					        }
					        u_xlat9.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat9.xxx;
					        u_xlat9.x = u_xlat27 * 0.125;
					        u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat24 = max((-u_xlat0.w), 0.0);
					        u_xlat24 = max(u_xlat17, u_xlat24);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat24 = u_xlat17 + u_xlat9.x;
					        u_xlat24 = min(u_xlat24, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat17, u_xlat1);
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = u_xlat1;
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "Name"="FallbackSubShader_SM3" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 3766071
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BlurCoe;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   sampler2D _SecondTex;
					//   sampler2D _ThirdTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurCoe           c1       1
					//   _Offsets           c2       1
					//   _SecondTex         s0       1
					//   _ThirdTex          s1       1
					//   _MainTex           s2       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 1.17647052, -1.17647052
					    def c4, -2, 3, 0.00999999978, 0
					    def c5, 0.00100000005, 0.0666666701, 0.13333334, -1
					    def c6, -0.5, 9.99999975e-005, 0.125, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul_pp r0, c3.xxyy, v0.xyxx
					    texldl_pp r1, r0, s2
					    mul_pp r1.w, r1.w, c2.z
					    texldl_pp r2, r0, s0
					    min_pp r3.x, r2.y, r2.x
					    mul_sat_pp r2.x, r2.y, c3.z
					    mad_pp r2.z, r2.x, c4.x, c4.y
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.z
					    mul_pp r2.z, r2.x, c1.y
					    mul_sat_pp r2.w, r3.x, c3.w
					    mad_pp r3.x, r2.w, c4.x, c4.y
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r2.w, r2.w, r3.x
					    mul_pp r3.x, r2.w, c1.x
					    max_pp r4.x, r2.z, r3.x
					    if_lt r4.x, c4.z
					      mov_pp oC0, r1
					    else
					      mov r3.xz, c4
					      mad_pp r2.z, r2.w, c1.x, r3.z
					      rcp r2.z, r2.z
					      mad_pp r2.x, r2.x, c1.y, r3.z
					      rcp r2.x, r2.x
					      mul_pp r2.xz, r2, r4.x
					      mul_pp r3.yz, r4.x, c0.xxyw
					      mul r3.xw, r3.x, c2.xyzy
					      mov r4.zw, c3.y
					      mov_pp r5.xyz, c3.y
					      mov_pp r2.w, c5.x
					      mov_pp r5.w, c5.x
					      mov r6, c3.y
					      rep i0
					        mul_pp r7.x, r6.w, c5.y
					        mad_pp r7.xy, r7.x, r3.xwzw, c2
					        mad_pp r4.xy, r7, r3.yzzw, v0
					        texldl_pp r7, r4.xyww, s2
					        texldl_pp r8, r4, s0
					        mad_pp r4.x, r6.w, c5.z, c5.w
					        add_pp r4.y, -r2.y, r8.y
					        mul r4.y, r4_abs.y, c6.x
					        mad_pp r4.y, r4.y, r4_abs.x, c3.x
					        max_pp r7.w, r8.y, c3.y
					        mul r7.w, r4.y, r7.w
					        mad_sat_pp r8.x, r4_abs.x, r2.z, -c3.x
					        mad_pp r8.z, r8.x, c4.x, c4.y
					        mul_pp r8.x, r8.x, r8.x
					        mad_pp r8.x, r8.z, -r8.x, c3.x
					        mul_pp r8.x, r8.x, -r8.y
					        cmp_pp r8.x, r8.y, c3.y, r8.x
					        mad_sat_pp r4.x, r4_abs.x, r2.x, -c3.x
					        mad_pp r8.y, r4.x, c4.x, c4.y
					        mul_pp r4.x, r4.x, r4.x
					        mad_pp r4.x, r8.y, -r4.x, c3.x
					        mul_pp r4.x, r4.x, r7.w
					        cmp_pp r4.x, r4.y, r4.x, c3.y
					        add_pp r2.w, r2.w, r8.x
					        mad_pp r5.xyz, r7, r8.x, r5
					        add_pp r5.w, r4.x, r5.w
					        mad_pp r6.xyz, r7, r4.x, r6
					        add r6.w, r6.w, c3.x
					      endrep
					      add_pp r2.x, r2.w, c6.y
					      rcp r2.x, r2.x
					      add_pp r2.z, r5.w, c6.y
					      rcp r2.z, r2.z
					      mul_sat_pp r3.x, r5.w, c6.z
					      mul_sat_pp r2.w, r2.w, c6.z
					      mad_pp r3.yzw, r6.xxyz, r2.z, -r1.xxyz
					      mad_pp r3.yzw, r3.x, r3, r1.xxyz
					      cmp_pp r2.y, r2.y, c3.y, -r2.y
					      max_pp r4.x, r2.y, r2.w
					      mad_pp r2.xyz, r5, r2.x, -r3.yzww
					      mad_pp r2.xyz, r4.x, r2, r3.yzww
					      texldl_pp r0, r0, s1
					      min_pp r3.yzw, r0.xxyz, r2.xxyz
					      add_sat_pp r0.x, r2.w, r3.x
					      add_pp r0.yzw, -r1.xxyz, r3
					      mad_pp oC0.xyz, r0.x, r0.yzww, r1
					      max_pp oC0.w, r1.w, r2.w
					    endif
					
					// approximately 91 instruction slots used (10 texture, 81 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "USE_SPECIAL_FETCH_FOR_COC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 _BlurCoe;
						vec4 unused_0_3[3];
						vec4 _Offsets;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _SecondTex;
					uniform  sampler2D _ThirdTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat17;
					vec2 u_xlat18;
					float u_xlat21;
					float u_xlat25;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.x = min(u_xlat1.y, u_xlat1.x);
					    u_xlat1.xz = u_xlat1.xy * vec2(-1.17647052, 1.17647052);
					    u_xlat1.xz = clamp(u_xlat1.xz, 0.0, 1.0);
					    u_xlat25 = u_xlat1.z * -2.0 + 3.0;
					    u_xlat17 = u_xlat1.z * u_xlat1.z;
					    u_xlat17 = u_xlat17 * u_xlat25;
					    u_xlat25 = u_xlat17 * _BlurCoe.y;
					    u_xlat2.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * _BlurCoe.x;
					    u_xlat25 = max(u_xlat25, u_xlat2.x);
					    u_xlatb2 = u_xlat25>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat1.x = u_xlat1.x * _BlurCoe.x + 0.00999999978;
					        u_xlat1.z = u_xlat17 * _BlurCoe.y + 0.00999999978;
					        u_xlat1.xz = vec2(u_xlat25) / u_xlat1.xz;
					        u_xlat2.xy = vec2(u_xlat25) * _MainTex_TexelSize.xy;
					        u_xlat18.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat25 = 0.00100000005;
					        u_xlat3.x = float(0.0);
					        u_xlat3.y = float(0.0);
					        u_xlat3.z = float(0.0);
					        u_xlat27 = float(0.00100000005);
					        u_xlat4.x = float(0.0);
					        u_xlat4.y = float(0.0);
					        u_xlat4.z = float(0.0);
					        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat5 = float(u_xlati_loop_1);
					            u_xlat13.x = u_xlat5 * 0.0666666701;
					            u_xlat13.xy = u_xlat13.xx * u_xlat18.xy + _Offsets.xy;
					            u_xlat13.xy = u_xlat13.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					            u_xlat7 = textureLod(_SecondTex, u_xlat13.xy, 0.0);
					            u_xlat5 = u_xlat5 * 0.13333334 + -1.0;
					            u_xlat13.x = (-u_xlat1.y) + u_xlat7.y;
					            u_xlat13.x = abs(u_xlat13.x) * -0.5;
					            u_xlat13.x = u_xlat13.x * abs(u_xlat5) + 1.0;
					            u_xlat13.x = max(u_xlat13.x, 0.0);
					            u_xlat21 = max((-u_xlat7.y), 0.0);
					            u_xlat29 = max(u_xlat7.y, 0.0);
					            u_xlat13.x = u_xlat13.x * u_xlat29;
					            u_xlat29 = abs(u_xlat5) * u_xlat1.x + -1.0;
					            u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					            u_xlat30 = u_xlat29 * -2.0 + 3.0;
					            u_xlat29 = u_xlat29 * u_xlat29;
					            u_xlat29 = (-u_xlat30) * u_xlat29 + 1.0;
					            u_xlat30 = u_xlat29 * u_xlat21;
					            u_xlat5 = abs(u_xlat5) * u_xlat1.z + -1.0;
					            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					            u_xlat7.x = u_xlat5 * -2.0 + 3.0;
					            u_xlat5 = u_xlat5 * u_xlat5;
					            u_xlat5 = (-u_xlat7.x) * u_xlat5 + 1.0;
					            u_xlat7.x = u_xlat5 * u_xlat13.x;
					            u_xlat25 = u_xlat21 * u_xlat29 + u_xlat25;
					            u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					            u_xlat27 = u_xlat13.x * u_xlat5 + u_xlat27;
					            u_xlat4.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat4.xyz;
					        }
					        u_xlat1.x = u_xlat25 + 9.99999975e-05;
					        u_xlat2.xyz = u_xlat3.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 + 9.99999975e-05;
					        u_xlat3.xyz = u_xlat4.xyz / u_xlat1.xxx;
					        u_xlat1.x = u_xlat27 * 0.125;
					        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					        u_xlat17 = u_xlat25 * 0.125;
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					        u_xlat9 = max((-u_xlat1.y), 0.0);
					        u_xlat9 = max(u_xlat17, u_xlat9);
					        u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat3.xyz;
					        u_xlat3 = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0);
					        u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					        u_xlat1.x = u_xlat17 + u_xlat1.x;
					        u_xlat1.x = min(u_xlat1.x, 1.0);
					        u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					        SV_Target0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat17);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}"
}
}
 }
}
Fallback Off
}